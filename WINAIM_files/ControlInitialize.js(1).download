if (this.JSON && !this.JSON.parseWithDate) {
    var reISO = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/;
    var reISO1 = /^(\d{2})-(\d{2})-(\d{4})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/;
    var reMsAjax = /^\/Date\((d|-|.*)\)[\/|\\]$/;

    JSON.parseWithDate = function (json) {
        /// <summary>  
        /// parses a JSON string and turns ISO or MSAJAX date strings  
        /// into native JS date objects  
        /// </summary>      
        /// <param name="json" type="var">json with dates to parse</param>          
        /// </param>  
        /// <returns type="value, array or object" />  
        try {
            var res = JSON.parse(json,
            function (key, value) {
                if (typeof value === 'string') {
                    var a = reISO.exec(value);
                    if (a)
                        return new Date(Date.UTC(+a[1], +a[2] - 1,
                                                 +a[3], +a[4], +a[5], +a[6]));
                    a = reMsAjax.exec(value);
                    if (a) {
                        var b = a[1].split(/[-+,.]/);
                        return new Date(b[0] ? +b[0] : 0 - +b[1]);
                    }
                }
                return value;
            });
            return res;
        } catch (e) {
            // orignal error thrown has no error message so rethrow with message  
            throw new Error("JSON content could not be parsed");
            return null;
        }
    };
    JSON.dateStringToDate = function (dtString) {
        /// <summary>  
        /// Converts a JSON ISO or MSAJAX string into a date object  
        /// </summary>      
        /// <param name="" type="var">Date String</param>  
        /// <returns type="date or null if invalid" />   
        var a = reISO1.exec(dtString);
        if (a)
            return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3],
                                     +a[4], +a[5], +a[6]));
        a = reMsAjax.exec(dtString);
        if (a) {
            var b = a[1].split(/[-,.]/);
            return new Date(+b[0]);
        }
        return null;
    };
    JSON.stringifyWcf = function (json) {
        /// <summary>  
        /// Wcf specific stringify that encodes dates in the  
        /// a WCF compatible format ("/Date(9991231231)/")  
        /// Note: this format works ONLY with WCF.   
        ///       ASMX can use ISO dates as of .NET 3.5 SP1  
        /// </summary>  
        /// <param name="key" type="var">property name</param>  
        /// <param name="value" type="var">value of the property</param>           
        return JSON.stringify(json, function (key, value) {
            if (typeof value == "string") {
                var a = reISO.exec(value);
                if (a) {
                    var val = '/Date(' +
                              new Date(Date.UTC(+a[1], +a[2] - 1,
                                       +a[3], +a[4],
                                       +a[5], +a[6])).getTime() + ')/';
                    this[key] = val;
                    return val;
                }
            }
            return value;
        })
    };
    JSON.stringToDate = function (dtSting) {
        var reggie1 = /(\d{2})-(\d{2})-(\d{4}) (\d{2}):(\d{2})/;
        var reggie = /(\d{2})-(\d{2})-(\d{4}) (\d{2}):(\d{2}):(\d{2})/;
        var dateArray = reggie.exec(dtSting);
        var dateObject = null;
        if (dateArray == null) {
            dateArray = reggie1.exec(dtSting);
            dateObject = new Date(
                (+dateArray[3]),
                (+dateArray[2]) - 1, // Careful, month starts at 0!
                (+dateArray[1]),
                (+dateArray[4]),
                (+dateArray[5]),
                0, 0
            );
        }
        else {
            dateObject = new Date(
                   (+dateArray[3]),
                   (+dateArray[2]) - 1, // Careful, month starts at 0!
                   (+dateArray[1]),
                   (+dateArray[4]),
                   (+dateArray[5]),
                   (+dateArray[6]), 0
               );
        }
        return dateObject;
    };
    //-- Code is copled with "dd-MM-yyyy HH:mm:ss"
    JSON.stringToFormatedDate = function (dtstring) {
        var dateSplit = dtstring.split(' ');
        var oDate = dateSplit[0].split('-');
        var oTime = dateSplit[1].split(':');
        var OutPut = new Date(oDate[2], (parseInt(oDate[1]) - 1), oDate[0], oTime[0], oTime[1], oTime[2]);
        return OutPut;
    };
}

String.prototype.replaceAll = function (find, replace) {
    var str = this;
    return str.split(find).join(replace);
};

//String.prototype.replaceAll = function (find, replaceStr) {
//    var str = this;
//    return str.split(find).join(replaceStr);
//    //return str.replace(new RegExp(find, 'g'), replaceStr);
//};

//-- Added By Devaraj S
function GridTableInitialize(GridConfigUrl, GridDataUrl, oModel) {
    //--Dashboard Approval Grid Initialize function.
    this.DashBoardApprovalGridInit = function (GridConfigUrl, GridDataUrl, oModel) {
        var odtbasicTable = $('#dt_basic').dataTable({
            "sPaginationType": "full_numbers",
            "sDom": "<'dt-bottom-row'l>r<'dt-wrapper't><'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>",//'<'toolbar'>frtip'",
            "fnInitComplete": function (oSettings, json) {
                $('.ColVis_Button').addClass('btn btn-default btn-sm').html('Hide / Show <i class="icon-arrow-down"></i>');
                $(this).closest('#dt_table_tools_wrapper').find('.DTTT.btn-group').addClass('table_tools_group').children('a.btn').each(function () {
                    $(this).addClass('btn-sm btn-default');
                });
            },
            "iDisplayLength": 5,
            "aoColumnDefs": [{ 'bVisible': false, 'aTargets': [3], "bAutoWidth": false }, { 'bVisible': false, 'aTargets': [4], "bAutoWidth": false }, { 'bVisible': false, 'aTargets': [5], "bAutoWidth": false }],
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                //This is not realy necessary
                $(nRow).unbind('click');
                $(nRow).bind('click', function () {
                    param = { request: "" };
                    window.localStorage.setItem("CurrentMenuId", "li_Approve");

                    var aPos = odtbasicTable.fnGetPosition(this);
                    var atData = odtbasicTable.fnGetData(aPos);

                    var UserId = atData[3];
                    var TemplateId = atData[4];
                    var PlaceId = atData[5];
                    var TemplateGroupId = atData[7];
                    var PlaceDimension = 0;
                    var ddl_PlaceDimension = document.getElementById("ddl_PlaceDimension");
                    if (ddl_PlaceDimension != undefined && ddl_PlaceDimension != null)
                        PlaceDimension = ddl_PlaceDimension.options[ddl_PlaceDimension.selectedIndex].value;

                    var result = $.ajax({
                        url: GetParentFolderOfApplication() + '/DCApproval/ActionFromDashBoard',
                        contentType: 'application/json; charset=utf-8',
                        type: 'POST',
                        dataType: 'html',
                        data: JSON.stringify(param),
                        async: false,
                        success: function (response) {
                            var url = response;
                            var daterangeText = document.getElementById("daterange3").getElementsByTagName("span")[0].innerHTML;
                            window.location.href = GetParentFolderOfApplication() + url + "?TemplateId=" + TemplateId + "&PlaceId=" + PlaceId + "&Date=" +
                                daterangeText + "&User=" + UserId + "&Approve=" + 0 + "&PlaceDimension=" + PlaceDimension + "&TemplateGroupId=" + TemplateGroupId;
                        },
                        error: function (response) {
                            ShowMessage("AjaxError.", 4);
                        }
                    });
                });
            },
            "fnDrawCallback": function (oSets, fnCallbackDraw) {
                var oTable = $('#dt_basic').DataTable();

                if (TotalDc != oSets.aoData.length) {
                    var datalength = oSets.aiDisplay.length;
                    //oSets.aiDisplay.remove(0, oTable.fnSettings().aiDisplay.length);

                    for (var itrCnt = datalength; itrCnt < TotalDc; itrCnt++) {
                        oSets.aiDisplay.push(itrCnt);
                    }
                }

                var Data = [];

                if (TotalDc != oSets.aoData.length) {
                    var datalength = oSets.aoData.length;
                    for (var itrCntj = 0; itrCntj < oSets.aoColumns.length; itrCntj++) {
                        Data.push("");
                    }

                    for (var itrCnt = datalength; itrCnt < TotalDc; itrCnt++) {
                        fnAddData_Modified(oTable, oSets, Data, false);
                        //oSets.aoData[itrCnt].nTr.innerHTML = "";
                    }
                }

                var iPageCount = oTable.dataTableExt.oPagination.iFullNumbersShowPages;
                var iPageCountHalf = Math.floor(iPageCount / 2);
                var iPages = Math.ceil(TotalDc / oSets._iDisplayLength);
                var iCurrentPage = Math.ceil(oSets._iDisplayStart / oSets._iDisplayLength) + 1;
                var sList = "";
                var iStartButton, iEndButton, i, iLen;
                var oClasses = oSets.oClasses;
                var anButtons, anStatic, nPaginateList, nNode;
                var an = oSets.aanFeatures.p;
                var oPaging = oSets.oInstance.fnPagingInfo();
                var oLang = oSets.oLanguage.oPaginate;
                var fnClickHandler = function (e) {
                    if (oSets.oApi._fnPageChange(oSets, e.data.action)) {
                        var CurrentPageNo = 0;
                        if (e.data.action == "previous")
                            CurrentPageNo = iCurrentPage - 1;
                        else if (e.data.action == "next")
                            CurrentPageNo = iCurrentPage + 1;
                        else if (e.data.action == "first")
                            CurrentPageNo = 1;
                        else if (e.data.action == "last")
                            CurrentPageNo = iPages;
                        var oGridControl = new GridControl();
                        var parameterToLoadData = {};
                        var templateValue = (document.getElementById("ddl_Template").value != null && document.getElementById("ddl_Template").value != undefined && document.getElementById("ddl_Template").value != '' ? document.getElementById("ddl_Template").value : 0);
                        var PlaceValue = (document.getElementById("ddl_Place").value != null && document.getElementById("ddl_Place").value != undefined && document.getElementById("ddl_Place").value != '' ? document.getElementById("ddl_Place").value : 0);
                        var PlaceDimension = (document.getElementById("ddl_PlaceDimension").value != null && document.getElementById("ddl_PlaceDimension").value != undefined && document.getElementById("ddl_PlaceDimension").value != '' ? document.getElementById("ddl_PlaceDimension").value : 0);
                        parameterToLoadData = {
                            Param: "DashBoard", Date: document.getElementById("daterange3").getElementsByTagName("span")[0].innerHTML, Template: templateValue,
                            Place: PlaceValue, PlaceDimension: PlaceDimension
                        };
                        parameterToLoadData = JSON.stringify(parameterToLoadData);
                        parameterToLoadData = { request: parameterToLoadData, PageSize: oSets._iDisplayLength, CurrentPage: CurrentPageNo, SortColumnName: oSets.aoColumns[oSets.aaSorting[0][0]].nTh.id, SortType: oSets.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending" };
                        parameterToLoadData = JSON.stringify(parameterToLoadData);
                        var result = GetPAPPDataCaptureDataSource(GridConfigUrl, GridDataUrl, parameterToLoadData);

                        var startCnt = oSets._iDisplayStart;
                        var RowContent = "";
                        var RowCont = "";

                        for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                            Data = [];
                            //if (oSets.aoData[startCnt + itrCnt].nTr.innerHTML == "") {
                            RowContent = "";
                            var j = 0;
                            for (var k = 0; k < MetaData.length; k++) {
                                RowCont = "";
                                if (MetaData[k].Visible != undefined) {
                                    if (MetaData[k].Visible == true) {
                                        if (MetaData[k].IsGroupColumn != true) {
                                            oSets.aoColumns[j].bShowColumns = true;
                                            if (MetaData[k].Visible && oSets.aoColumns[j].bVisible) {
                                                RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k], result[itrCnt]);
                                                //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                            }
                                            j = j + 1;
                                        }
                                        if (MetaData[k].IsGroupColumn) {
                                            if (MetaData[k].IsGroupColumn == true) {
                                                for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                                    oSets.aoColumns[j].bShowColumns = true;
                                                    if (MetaData[k].SubColumns[i].Visible && oSets.aoColumns[j].bVisible) {
                                                        RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k].SubColumns[i], result[itrCnt]);
                                                        //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                    }
                                                    j = j + 1;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        j = j + 1;
                                    }
                                }
                                oGridControl.GetDataClmn(RowCont, MetaData[k], result[itrCnt], Data);
                            }
                            if (oSets.aoData[startCnt + itrCnt] != undefined && oSets.aoData[startCnt + itrCnt] != null) {
                                oSets.aoData[startCnt + itrCnt].nTr = null;
                                oSets.aoData[startCnt + itrCnt]._aData = Data;
                            }
                        }
                        oTable.fnDraw(false);
                    }
                };

                /* Pages calculation */
                if (oSets._iDisplayLength === -1) {
                    iStartButton = 1;
                    iEndButton = 1;
                    iCurrentPage = 1;
                }
                else if (iPages < iPageCount) {
                    iStartButton = 1;
                    iEndButton = iPages;
                }
                else if (iCurrentPage <= iPageCountHalf) {
                    iStartButton = 1;
                    iEndButton = iPageCount;
                }
                else if (iCurrentPage >= (iPages - iPageCountHalf)) {
                    iStartButton = iPages - iPageCount + 1;
                    iEndButton = iPages;
                }
                else {
                    iStartButton = iCurrentPage - Math.ceil(iPageCount / 2) + 1;
                    iEndButton = iStartButton + iPageCount - 1;
                }

                /* Loop over each instance of the pager */
                for (i = 0, iLen = an.length ; i < iLen ; i++) {
                    nNode = an[i];
                    if (!nNode.hasChildNodes()) {
                        continue;
                    }

                    $('li', an[i]).remove();

                    $(nNode).append(
                        '<ul class = "pagination">' +
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageFirst + '"><a>' + oLang.sFirst + '</a></li>' +
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPagePrevious + '"><a>' + oLang.sPrevious + '</a></li>' +
                            //'<li><span></span><li>'+
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageNext + '"><a>' + oLang.sNext + '</a></li>' +
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageLast + '"><a>' + oLang.sLast + '</a></li>' +
                        '</ul>'
                    );
                    var els = $('a', nNode);
                    var nFirst = els[0],
                        nPrev = els[1],
                        nNext = els[2],
                        nLast = els[3];

                    oSets.oApi._fnBindAction(nFirst, { action: "first" }, fnClickHandler);
                    oSets.oApi._fnBindAction(nPrev, { action: "previous" }, fnClickHandler);
                    oSets.oApi._fnBindAction(nNext, { action: "next" }, fnClickHandler);
                    oSets.oApi._fnBindAction(nLast, { action: "last" }, fnClickHandler);

                    ///* Build the dynamic list */
                    for (var j = iStartButton ; j <= iEndButton ; j++) {
                        sClass = (j == oPaging.iPage + 1) ? 'class="active"' : '';
                        $('<li ' + sClass + '><a href="#">' + j + '</a></li>')
                            .insertBefore($('.next,.last', an[i])[0])
                            .bind('click', function (e) {
                                e.preventDefault();
                                oSets._iDisplayStart = (parseInt($('a', this).text(), 10) - 1) * oPaging.iLength;
                                var CurrentPageNo = $('a', this).text();
                                var oGridControl = new GridControl();
                                var parameterToLoadData = {};
                                var templateValue = (document.getElementById("ddl_Template").value != null && document.getElementById("ddl_Template").value != undefined && document.getElementById("ddl_Template").value != '' ? document.getElementById("ddl_Template").value : 0);
                                var PlaceValue = (document.getElementById("ddl_Place").value != null && document.getElementById("ddl_Place").value != undefined && document.getElementById("ddl_Place").value != '' ? document.getElementById("ddl_Place").value : 0);
                                var PlaceDimension = (document.getElementById("ddl_PlaceDimension").value != null && document.getElementById("ddl_PlaceDimension").value != undefined && document.getElementById("ddl_PlaceDimension").value != '' ? document.getElementById("ddl_PlaceDimension").value : 0);
                                parameterToLoadData = {
                                    Param: "DashBoard", Date: document.getElementById("daterange3").getElementsByTagName("span")[0].innerHTML, Template: templateValue,
                                    Place: PlaceValue, PlaceDimension: PlaceDimension
                                };
                                parameterToLoadData = JSON.stringify(parameterToLoadData);
                                parameterToLoadData = { request: parameterToLoadData, PageSize: oSets._iDisplayLength, CurrentPage: CurrentPageNo, SortColumnName: oSets.aoColumns[oSets.aaSorting[0][0]].nTh.id, SortType: oSets.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending" };
                                parameterToLoadData = JSON.stringify(parameterToLoadData);
                                var result = GetPAPPDataCaptureDataSource(GridConfigUrl, GridDataUrl, parameterToLoadData);

                                var startCnt = oSets._iDisplayStart;
                                var RowContent = "";
                                var RowCont = "";

                                for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                                    Data = [];
                                    //if (oSets.aoData[startCnt + itrCnt].nTr.innerHTML == "") {
                                    RowContent = "";
                                    var j = 0;
                                    for (var k = 0; k < MetaData.length; k++) {
                                        RowCont = "";
                                        if (MetaData[k].Visible != undefined) {
                                            if (MetaData[k].Visible == true) {
                                                if (MetaData[k].IsGroupColumn != true) {
                                                    oSets.aoColumns[j].bShowColumns = true;
                                                    if (MetaData[k].Visible && oSets.aoColumns[j].bVisible) {
                                                        RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k], result[itrCnt]);
                                                        //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                    }
                                                    j = j + 1;
                                                }
                                                if (MetaData[k].IsGroupColumn) {
                                                    if (MetaData[k].IsGroupColumn == true) {
                                                        for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                                            oSets.aoColumns[j].bShowColumns = true;
                                                            if (MetaData[k].SubColumns[i].Visible && oSets.aoColumns[j].bVisible) {
                                                                RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k].SubColumns[i], result[itrCnt]);
                                                                //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                            }
                                                            j = j + 1;
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                j = j + 1;
                                            }
                                        }
                                        oGridControl.GetDataClmn(RowCont, MetaData[k], result[itrCnt], Data);
                                    }
                                    if (oSets.aoData[startCnt + itrCnt] != undefined && oSets.aoData[startCnt + itrCnt] != null) {
                                        oSets.aoData[startCnt + itrCnt].nTr = null;
                                        oSets.aoData[startCnt + itrCnt]._aData = Data;
                                    }
                                }
                                oTable.fnDraw(false);
                            });
                    }

                    /* Update the permanent button's classes */
                    anButtons = nNode.getElementsByTagName('li');
                    anStatic = [
                        anButtons[0], anButtons[1],
                        anButtons[anButtons.length - 2], anButtons[anButtons.length - 1]
                    ];

                    $(anStatic).removeClass(oClasses.sPageButton + " " + oClasses.sPageButtonActive + " " + oClasses.sPageButtonStaticDisabled);
                    $([anStatic[0], anStatic[1]]).addClass(
                        (iCurrentPage == 1) ?
                            oClasses.sPageButtonStaticDisabled :
                            oClasses.sPageButton
                    );
                    $([anStatic[2], anStatic[3]]).addClass(
                        (iPages === 0 || iCurrentPage === iPages || oSets._iDisplayLength === -1) ?
                            oClasses.sPageButtonStaticDisabled :
                            oClasses.sPageButton
                    );
                }
            },
            "fnHeaderCallback": function (nHead, aData, iStart, iEnd, aiDisplay) {
                var oTable = $('#dt_basic').DataTable();
                var oSettings = oTable.fnSettings();
                if (oSettings.bColumnVisible) {
                    var j = 0, IsDefaultSort = 0;
                    for (var k = 0; k < MetaData.length; k++) {
                        if (MetaData[k].Visible != undefined) {
                            if (MetaData[k].Visible == true) {
                                if (MetaData[k].IsGroupColumn != true) {
                                    oSettings.aoColumns[j].bShowColumns = true;
                                    if (!MetaData[k].ColumnDefaultVisible)
                                        oTable.fnSetColumnVis(j, false);
                                    oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                    if (!MetaData[k].Sortable)
                                        oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                    j = j + 1;
                                }
                                if (MetaData[k].IsGroupColumn) {
                                    if (MetaData[k].IsGroupColumn == true) {
                                        for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                            if (MetaData[k].SubColumns[i].IsGroupColumn) {
                                                j = groupColumnSortingApply(MetaData[k].SubColumns[i].SubColumns, j, oTable, oSettings);
                                            }
                                            else {
                                                oSettings.aoColumns[j].bShowColumns = true;
                                                if (!MetaData[k].SubColumns[i].ColumnDefaultVisible)
                                                    oTable.fnSetColumnVis(j, false);
                                                oSettings.aoColumns[j].bSortable = MetaData[k].SubColumns[i].Sortable;
                                                if (!MetaData[k].SubColumns[i].Sortable)
                                                    oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                                j = j + 1;
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                oTable.fnSetColumnVis(j, false);
                                oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                oSettings.aoColumns[j].bShowColumns = false;
                                if (!MetaData[k].Sortable)
                                    oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                j = j + 1;
                            }
                        }
                    }
                }
                if (ColVis != undefined) {
                    ColVis.fnRebuild();
                }
            },
            "fnInfoCallback": function (oSets, iStart, iEnd, iMax, iTotal, sOut) {
                //iEnd = (iStart - 1) + oSets._iDisplayLength
                var TotalCount = 0;
                if (TotalDc != 0)
                    TotalCount = TotalDc;
                if (iTotal === 0) {
                    /* Empty record set */
                    sOut = oSets.oLanguage.sInfoEmpty;
                }
                else {
                    /* Normal record set */
                    sOut = oSets.oLanguage.sInfo;
                }

                if (iTotal != iMax) {
                    /* Record set after filtering */
                    sOut += ' ' + oSets.oLanguage.sInfoFiltered;
                    TotalCount = iTotal;
                }

                // Convert the macros
                sOut += oSets.oLanguage.sInfoPostFix;
                sOut = sOut.replace(/_START_/g, iStart).
                    replace(/_END_/g, iEnd).
                    replace(/_TOTAL_/g, TotalCount).
                    replace(/_MAX_/g, iMax);
                return sOut;
            },
            "fnFooterCallback": function (nFoot, aData, iStart, iEnd, aiDisplay) {
                var oTable = $('#dt_basic').DataTable();
                var oTableDate = oTable.fnGetNodes();
                var oSettings = oTable.fnSettings();
                //iEnd = iStart + oSettings._iDisplayLength
                var itrCnt = 0;
                var diff = iEnd - iStart;
                if (diff != 0) {
                    for (var item in oTableDate) {
                        if (oTableDate[item]._DT_RowIndex >= iStart && oTableDate[item]._DT_RowIndex < iEnd) {
                            if ($('input', oTable.fnGetNodes(oTableDate[item]._DT_RowIndex)).length > 0) {
                                if ($('input', oTable.fnGetNodes(oTableDate[item]._DT_RowIndex))[0].checked == true)
                                    itrCnt = itrCnt + 1;
                            }
                        }
                    }
                    if ($('#selectall').length > 0) {
                        if (diff == itrCnt)
                            $('#selectall')[0].checked = true;
                        else
                            $('#selectall')[0].checked = false;
                    }
                }
            },
            "bAutoWidth": false
        });

        var nLength = document.getElementById('dt_basic_length');
        $('select', nLength).unbind();
        $('select', nLength).bind('change.DT', function () {
            var target = LoadingImage();
            var oTable = $('#dt_basic').DataTable();
            var iVal = $(this).val();

            var oSettings = oTable.fnSettings();

            /* Update all other length options for the new display */
            var n = oSettings.aanFeatures.l;
            for (i = 0, iLen = n.length ; i < iLen ; i++) {
                if (n[i] != this.parentNode) {
                    $('select', n[i]).val(iVal);
                }
            }

            /* Redraw the table */
            oSettings._iDisplayLength = parseInt(iVal, 10);
            oTable._fnCalculateEnd(oSettings);

            /* If we have space to show extra rows (backing up from the end point - then do so */
            if (oSettings.fnDisplayEnd() == oSettings.fnRecordsDisplay()) {
                oSettings._iDisplayStart = oSettings.fnDisplayEnd() - oSettings._iDisplayLength;
                if (oSettings._iDisplayStart < 0) {
                    oSettings._iDisplayStart = 0;
                }
            }

            if (oSettings._iDisplayLength == -1) {
                oSettings._iDisplayStart = 0;
            }
            var CurrentPageNo = 1;
            var oGridControl = new GridControl();
            var parameterToLoadData = {};
            var templateValue = (document.getElementById("ddl_Template").value != null && document.getElementById("ddl_Template").value != undefined && document.getElementById("ddl_Template").value != '' ? document.getElementById("ddl_Template").value : 0);
            var PlaceValue = (document.getElementById("ddl_Place").value != null && document.getElementById("ddl_Place").value != undefined && document.getElementById("ddl_Place").value != '' ? document.getElementById("ddl_Place").value : 0);
            var PlaceDimension = (document.getElementById("ddl_PlaceDimension").value != null && document.getElementById("ddl_PlaceDimension").value != undefined && document.getElementById("ddl_PlaceDimension").value != '' ? document.getElementById("ddl_PlaceDimension").value : 0);
            parameterToLoadData = {
                Param: "DashBoard", Date: document.getElementById("daterange3").getElementsByTagName("span")[0].innerHTML, Template: templateValue,
                Place: PlaceValue, PlaceDimension: PlaceDimension
            };
            parameterToLoadData = JSON.stringify(parameterToLoadData);
            parameterToLoadData = { request: parameterToLoadData, PageSize: oSettings._iDisplayLength, CurrentPage: CurrentPageNo, SortColumnName: oSettings.aoColumns[oSettings.aaSorting[0][0]].nTh.id, SortType: oSettings.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending" };
            parameterToLoadData = JSON.stringify(parameterToLoadData);
            var result = GetPAPPDataCaptureDataSource(GridConfigUrl, GridDataUrl, parameterToLoadData);
            GridResultData = result;

            var startCnt = oSettings._iDisplayStart;
            var RowContent = "";
            var RowCont = "";
            oSettings.aiDisplay = [];

            if (TotalDc != oSettings.aiDisplay.length) {
                var datalength = oSettings.aiDisplay.length;
                //oSets.aiDisplay.remove(0, oTable.fnSettings().aiDisplay.length);

                for (var itrCnt = datalength; itrCnt < TotalDc; itrCnt++) {
                    oSettings.aiDisplay.push(itrCnt);
                }
            }

            for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                Data = [];
                //if (oSettings.aoData[startCnt + itrCnt].nTr.innerHTML == "") {
                RowContent = "";
                var j = 0;
                for (var k = 0; k < MetaData.length; k++) {
                    RowCont = "";
                    if (MetaData[k].Visible != undefined) {
                        if (MetaData[k].Visible == true) {
                            if (MetaData[k].IsGroupColumn != true) {
                                oSettings.aoColumns[j].bShowColumns = true;
                                if (MetaData[k].Visible && oSettings.aoColumns[j].bVisible) {
                                    RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k], result[itrCnt]);
                                    //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                }
                                j = j + 1;
                            }
                            if (MetaData[k].IsGroupColumn) {
                                if (MetaData[k].IsGroupColumn == true) {
                                    for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                        oSettings.aoColumns[j].bShowColumns = true;
                                        if (MetaData[k].SubColumns[i].Visible && oSettings.aoColumns[j].bVisible) {
                                            RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k].SubColumns[i], result[itrCnt]);
                                            //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                        }
                                        j = j + 1;
                                    }
                                }
                            }
                        }
                        else {
                            j = j + 1;
                        }
                    }
                    oGridControl.GetDataClmn(RowCont, MetaData[k], result[itrCnt], Data);
                }
                if (oSettings.aoData[startCnt + itrCnt] != null && oSettings.aoData[startCnt + itrCnt] != undefined) {
                    oSettings.aoData[startCnt + itrCnt].nTr = null;
                    oSettings.aoData[startCnt + itrCnt]._aData = Data;
                }
                //}
            }

            oTable._fnDraw(false);
            RemoveLoadingImage(target);
        });
    }

    //--Operation Log Grid Initialize function.
    this.OperationLogGridInit = function (GridConfigUrl, GridDataUrl, oModel) {
        var oTable = $('.fullOperLog')
            .on('click.DT', function (e) {
                if (e.target.tagName == "TH") {
                    var oSets = oTable.fnSettings();
                    var CurrentPageNo = 0;
                    var oGridControl = new GridControl();
                    var _DynamicPage = new DynamicPage(oModel);
                    var GridLoadParameters = [];
                    for (var item in oModel.ControlConfigDict) {
                        if (oModel.ControlConfigDict[item].ControlTypeName != "Label")
                            GridLoadParameters.push(oModel.ControlConfigDict[item].ClientID)
                    }
                    var parameterToLoadData = _DynamicPage.GetLoadParameterList(GridLoadParameters);
                    parameterToLoadData = JSON.stringify(parameterToLoadData);
                    parameterToLoadData = { request: parameterToLoadData, PageSize: oSets._iDisplayLength, CurrentPage: CurrentPageNo + 1, SortColumnName: oSets.aoColumns[oSets.aaSorting[0][0]].nTh.id, SortType: oSets.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending" };
                    parameterToLoadData = JSON.stringify(parameterToLoadData);

                    var result = GetDataSource(GridDataUrl, parameterToLoadData);

                    var startCnt = oSets._iDisplayStart;
                    var RowContent = "";
                    var RowCont = "";

                    var iColumn, iNextSort;

                    var iDataIndex = oSets.aaSorting[0][0];

                    /* If the shift key is pressed then we are multiple column sorting */
                    if (e.shiftKey) {
                        /* Are we already doing some kind of sort on this column? */
                        var bFound = false;
                        for (var i = 0 ; i < oSets.aaSorting.length ; i++) {
                            if (oSets.aaSorting[i][0] == iDataIndex) {
                                bFound = true;
                                iColumn = oSets.aaSorting[i][0];
                                iNextSort = oSets.aaSorting[i][2] + 1;

                                if (!oSets.aoColumns[iColumn].asSorting[iNextSort]) {
                                    /* Reached the end of the sorting options, remove from multi-col sort */
                                    oSets.aaSorting.splice(i, 1);
                                }
                                else {
                                    /* Move onto next sorting direction */
                                    oSets.aaSorting[i][1] = oSets.aoColumns[iColumn].asSorting[iNextSort];
                                    oSets.aaSorting[i][2] = iNextSort;
                                }
                                break;
                            }
                        }

                        /* No sort yet - add it in */
                        if (bFound === false) {
                            oSets.aaSorting.push([iDataIndex,
                                oSets.aoColumns[iDataIndex].asSorting[0], 0]);
                        }
                    }
                    else {
                        /* If no shift key then single column sort */
                        if (oSets.aaSorting.length == 1 && oSets.aaSorting[0][0] == iDataIndex) {
                            iColumn = oSets.aaSorting[0][0];
                            iNextSort = oSets.aaSorting[0][2];
                            if (!oSets.aoColumns[iColumn].asSorting[iNextSort]) {
                                iNextSort = 0;
                            }
                            oSets.aaSorting[0][1] = oSets.aoColumns[iColumn].asSorting[iNextSort];
                            oSets.aaSorting[0][2] = iNextSort;
                        }
                        else {
                            oSets.aaSorting.splice(0, oSets.aaSorting.length);
                            oSets.aaSorting.push([iDataIndex,
                                oSets.aoColumns[iDataIndex].asSorting[0], 0]);
                        }
                    }

                    oTable._fnSort(oSets);
                    oSets.aiDisplay = [];

                    if (TotalDc != oSets.aiDisplay.length) {
                        var datalength = oSets.aiDisplay.length;
                        //oSets.aiDisplay.remove(0, oTable.fnSettings().aiDisplay.length);

                        for (var itrCnt = datalength; itrCnt < TotalDc; itrCnt++) {
                            oSets.aiDisplay.push(itrCnt);
                        }
                    }

                    for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                        Data = [];
                        RowContent = "";
                        for (var itrCntj = 0; itrCntj < MetaData.length; itrCntj++) {
                            RowCont = "";
                            if (MetaData[itrCntj].Visible)
                                RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[itrCntj], result[itrCnt]);
                            oGridControl.GetDataClmn(RowCont, MetaData[itrCntj], result[itrCnt], Data);
                        }
                        oSets.aoData[startCnt + itrCnt].nTr.innerHTML = RowContent;
                        oSets.aoData[startCnt + itrCnt]._aData = Data;
                    }
                    oTable._fnDraw(false);
                }
            })
            .dataTable({
                "sPaginationType": "full_numbers",
                "sDom": "R<'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>l>r<'dt-wrapper't><'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>",
                //"aoColumnDefs": [{ 'bVisible': false, 'aTargets': [0], "bAutoWidth": false }],
                "fnInitComplete": function (oSettings, json) {
                    //$('.ColVis_Button').addClass('btn btn-default btn-sm').html('Hide / Show <i class="icon-arrow-down"></i>');
                    $(this).closest('#dt_table_tools_wrapper').find('.DTTT.btn-group').addClass('table_tools_group').children('a.btn').each(function () {
                        $(this).addClass('btn-sm btn-default');
                    });
                    this.css("visibility", "visible");
                },
                "sScrollXInner": "110%",
                "bStateSave": false,
                "bAutoWidth": false,
                "aaSorting": [[0, 'asc']],
                "fnDrawCallback": function (oSets, fnCallbackDraw) {
                    var oTable = $('.fullOperLog').DataTable();

                    if (TotalDc != oSets.aoData.length) {
                        var datalength = oSets.aiDisplay.length;
                        //oSets.aiDisplay.remove(0, oTable.fnSettings().aiDisplay.length);

                        for (var itrCnt = datalength; itrCnt < TotalDc; itrCnt++) {
                            oSets.aiDisplay.push(itrCnt);
                        }
                    }

                    var Data = [];

                    if (TotalDc != oSets.aoData.length) {
                        var datalength = oSets.aoData.length;
                        for (var itrCntj = 0; itrCntj < oSets.aoColumns.length; itrCntj++) {
                            Data.push("");
                        }

                        for (var itrCnt = datalength; itrCnt < TotalDc; itrCnt++) {
                            fnAddData_Modified(oTable, oSets, Data, false);
                            oSets.aoData[itrCnt].nTr.innerHTML = "";
                        }
                    }

                    var iPageCount = oTable.dataTableExt.oPagination.iFullNumbersShowPages;
                    var iPageCountHalf = Math.floor(iPageCount / 2);
                    var iPages = Math.ceil(TotalDc / oSets._iDisplayLength);
                    var iCurrentPage = Math.ceil(oSets._iDisplayStart / oSets._iDisplayLength) + 1;
                    var sList = "";
                    var iStartButton, iEndButton, i, iLen;
                    var oClasses = oSets.oClasses;
                    var anButtons, anStatic, nPaginateList, nNode;
                    var an = oSets.aanFeatures.p;
                    var oPaging = oSets.oInstance.fnPagingInfo();
                    var oLang = oSets.oLanguage.oPaginate;
                    var fnClickHandler = function (e) {
                        if (oSets.oApi._fnPageChange(oSets, e.data.action)) {
                            var CurrentPageNo = 0;
                            if (e.data.action == "previous")
                                CurrentPageNo = iCurrentPage - 1;
                            else if (e.data.action == "next")
                                CurrentPageNo = iCurrentPage + 1;
                            else if (e.data.action == "first")
                                CurrentPageNo = 1;
                            else if (e.data.action == "last")
                                CurrentPageNo = iPages;
                            var oGridControl = new GridControl();
                            var _DynamicPage = new DynamicPage(oModel);
                            var GridLoadParameters = [];
                            for (var item in oModel.ControlConfigDict) {
                                if (oModel.ControlConfigDict[item].ControlTypeName != "Label")
                                    GridLoadParameters.push(oModel.ControlConfigDict[item].ClientID)
                            }
                            var parameterToLoadData = _DynamicPage.GetLoadParameterList(GridLoadParameters);
                            parameterToLoadData = JSON.stringify(parameterToLoadData);
                            parameterToLoadData = { request: parameterToLoadData, PageSize: oSets._iDisplayLength, CurrentPage: CurrentPageNo, SortColumnName: oSets.aoColumns[oSets.aaSorting[0][0]].nTh.id, SortType: oSets.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending" };
                            parameterToLoadData = JSON.stringify(parameterToLoadData);

                            var result = GetDataSource(GridDataUrl, parameterToLoadData);

                            var startCnt = oSets._iDisplayStart;
                            var RowContent = "";
                            var RowCont = "";

                            for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                                Data = [];
                                if (oSets.aoData[startCnt + itrCnt].nTr.innerHTML == "") {
                                    RowContent = "";
                                    for (var itrCntj = 0; itrCntj < MetaData.length; itrCntj++) {
                                        RowCont = "";
                                        if (MetaData[itrCntj].Visible) {
                                            RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[itrCntj], result[itrCnt]);
                                            //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                        }
                                        oGridControl.GetDataClmn(RowCont, MetaData[itrCntj], result[itrCnt], Data);
                                    }
                                    oSets.aoData[startCnt + itrCnt].nTr.innerHTML = RowContent;
                                    oSets.aoData[startCnt + itrCnt]._aData = Data;
                                }
                            }
                            oTable.fnDraw(false);
                        }
                    };

                    /* Pages calculation */
                    if (oSets._iDisplayLength === -1) {
                        iStartButton = 1;
                        iEndButton = 1;
                        iCurrentPage = 1;
                    }
                    else if (iPages < iPageCount) {
                        iStartButton = 1;
                        iEndButton = iPages;
                    }
                    else if (iCurrentPage <= iPageCountHalf) {
                        iStartButton = 1;
                        iEndButton = iPageCount;
                    }
                    else if (iCurrentPage >= (iPages - iPageCountHalf)) {
                        iStartButton = iPages - iPageCount + 1;
                        iEndButton = iPages;
                    }
                    else {
                        iStartButton = iCurrentPage - Math.ceil(iPageCount / 2) + 1;
                        iEndButton = iStartButton + iPageCount - 1;
                    }

                    /* Loop over each instance of the pager */
                    for (i = 0, iLen = an.length ; i < iLen ; i++) {
                        nNode = an[i];
                        if (!nNode.hasChildNodes()) {
                            continue;
                        }

                        $('li', an[i]).remove();

                        $(nNode).append(
                            '<ul class = "pagination">' +
                                '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageFirst + '"><a>' + oLang.sFirst + '</a></li>' +
                                '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPagePrevious + '"><a>' + oLang.sPrevious + '</a></li>' +
                                //'<li><span></span><li>'+
                                '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageNext + '"><a>' + oLang.sNext + '</a></li>' +
                                '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageLast + '"><a>' + oLang.sLast + '</a></li>' +
                            '</ul>'
                        );
                        var els = $('a', nNode);
                        var nFirst = els[0],
                            nPrev = els[1],
                            nNext = els[2],
                            nLast = els[3];

                        oSets.oApi._fnBindAction(nFirst, { action: "first" }, fnClickHandler);
                        oSets.oApi._fnBindAction(nPrev, { action: "previous" }, fnClickHandler);
                        oSets.oApi._fnBindAction(nNext, { action: "next" }, fnClickHandler);
                        oSets.oApi._fnBindAction(nLast, { action: "last" }, fnClickHandler);

                        ///* Build the dynamic list */
                        for (var j = iStartButton ; j <= iEndButton ; j++) {
                            sClass = (j == oPaging.iPage + 1) ? 'class="active"' : '';
                            $('<li ' + sClass + '><a href="#">' + j + '</a></li>')
                                .insertBefore($('.next,.last', an[i])[0])
                                .bind('click', function (e) {
                                    e.preventDefault();
                                    oSets._iDisplayStart = (parseInt($('a', this).text(), 10) - 1) * oPaging.iLength;
                                    var CurrentPageNo = $('a', this).text();
                                    var oGridControl = new GridControl();
                                    var _DynamicPage = new DynamicPage(oModel);
                                    var GridLoadParameters = [];
                                    for (var item in oModel.ControlConfigDict) {
                                        if (oModel.ControlConfigDict[item].ControlTypeName != "Label")
                                            GridLoadParameters.push(oModel.ControlConfigDict[item].ClientID)
                                    }
                                    var parameterToLoadData = _DynamicPage.GetLoadParameterList(GridLoadParameters);
                                    parameterToLoadData = JSON.stringify(parameterToLoadData);
                                    parameterToLoadData = { request: parameterToLoadData, PageSize: oSets._iDisplayLength, CurrentPage: CurrentPageNo, SortColumnName: oSets.aoColumns[oSets.aaSorting[0][0]].nTh.id, SortType: oSets.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending" };
                                    parameterToLoadData = JSON.stringify(parameterToLoadData);

                                    var result = GetDataSource(GridDataUrl, parameterToLoadData);

                                    var startCnt = oSets._iDisplayStart;
                                    var RowContent = "";
                                    var RowCont = "";

                                    for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                                        Data = [];
                                        if (oSets.aoData[startCnt + itrCnt] != undefined) {
                                            if (oSets.aoData[startCnt + itrCnt].nTr.innerHTML == "") {
                                                RowContent = "";
                                                for (var itrCntj = 0; itrCntj < MetaData.length; itrCntj++) {
                                                    RowCont = "";
                                                    if (MetaData[itrCntj].Visible) {
                                                        RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[itrCntj], result[itrCnt]);
                                                        //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                    }
                                                    oGridControl.GetDataClmn(RowCont, MetaData[itrCntj], result[itrCnt], Data);
                                                }
                                                oSets.aoData[startCnt + itrCnt].nTr.innerHTML = RowContent;
                                                oSets.aoData[startCnt + itrCnt]._aData = Data;
                                            }
                                        }
                                    }
                                    oTable.fnDraw(false);
                                });
                        }

                        /* Update the permanent button's classes */
                        anButtons = nNode.getElementsByTagName('li');
                        anStatic = [
                            anButtons[0], anButtons[1],
                            anButtons[anButtons.length - 2], anButtons[anButtons.length - 1]
                        ];

                        $(anStatic).removeClass(oClasses.sPageButton + " " + oClasses.sPageButtonActive + " " + oClasses.sPageButtonStaticDisabled);
                        $([anStatic[0], anStatic[1]]).addClass(
                            (iCurrentPage == 1) ?
                                oClasses.sPageButtonStaticDisabled :
                                oClasses.sPageButton
                        );
                        $([anStatic[2], anStatic[3]]).addClass(
                            (iPages === 0 || iCurrentPage === iPages || oSets._iDisplayLength === -1) ?
                                oClasses.sPageButtonStaticDisabled :
                                oClasses.sPageButton
                        );
                    }
                },
                "fnHeaderCallback": function (nHead, aData, iStart, iEnd, aiDisplay) {
                    var oTable = $('.fullOperLog').DataTable();
                    var oSettings = oTable.fnSettings();
                    var j = 0;
                    for (var k = 0; k < MetaData.length; k++) {
                        if (MetaData[k].Visible != undefined) {
                            if (MetaData[k].Visible == true) {
                                if (MetaData[k].IsGroupColumn != true) {
                                    oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                    if (!MetaData[k].Sortable)
                                        oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                    j = j + 1;
                                }
                                if (MetaData[k].IsGroupColumn) {
                                    if (MetaData[k].IsGroupColumn == true) {
                                        for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                            oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                            if (!MetaData[k].Sortable)
                                                oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                            j = j + 1;
                                        }
                                    }
                                }
                            }
                            else {
                                oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                if (!MetaData[k].Sortable)
                                    oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                j = j + 1;
                            }
                        }
                    }
                },
                "fnInfoCallback": function (oSets, iStart, iEnd, iMax, iTotal, sOut) {
                    //iEnd = (iStart - 1) + oSets._iDisplayLength
                    if (iTotal === 0) {
                        /* Empty record set */
                        sOut = oSets.oLanguage.sInfoEmpty;
                    }
                    else {
                        /* Normal record set */
                        sOut = oSets.oLanguage.sInfo;
                    }

                    if (iTotal != iMax) {
                        /* Record set after filtering */
                        sOut += ' ' + oSets.oLanguage.sInfoFiltered;
                    }

                    // Convert the macros
                    sOut += oSets.oLanguage.sInfoPostFix;
                    sOut = sOut.replace(/_START_/g, iStart).
                        replace(/_END_/g, iEnd).
                        replace(/_TOTAL_/g, TotalDc).
                        replace(/_MAX_/g, iMax);
                    return sOut;
                },
                //true
                "bScrollAutoCss": true
            });
    }

    //--Approval Profile Grid Initialize function.
    this.ApprovalProfileGridInit = function (GridConfigUrl, GridDataUrl, oModel) {
        selected = [];

        var odtbasicTable = $('#datatable_ApprovalProf').dataTable({
            "sPaginationType": "full_numbers",
            "sDom": "<'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>lf>r<'dt-wrapper't><'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>",//'<'toolbar'>frtip'",
            "fnInitComplete": function (oSettings, json) {
                $('.ColVis_Button').addClass('btn btn-default btn-sm').html('Hide / Show <i class="icon-arrow-down"></i>');
                $(this).closest('#dt_table_tools_wrapper').find('.DTTT.btn-group').addClass('table_tools_group').children('a.btn').each(function () {
                    $(this).addClass('btn-sm btn-default');
                });
            },
            "iDisplayLength": 10,
            "aLengthMenu": [5, 10, 25, 50, 100, 500, 1000],
            "aoColumnDefs": [],//{ 'bVisible': false, 'aTargets': [0], "bAutoWidth": false }, { 'bVisible': false, 'aTargets': [2], "bAutoWidth": false }
            "fnDrawCallback": function (oSets, fnCallbackDraw) {
                var oTable = $('.full-width').DataTable();

                if (TotalDc != oSets.aoData.length) {
                    var datalength = oSets.aiDisplay.length;
                    //oSets.aiDisplay.remove(0, oTable.fnSettings().aiDisplay.length);

                    for (var itrCnt = datalength; itrCnt < TotalDc; itrCnt++) {
                        oSets.aiDisplay.push(itrCnt);
                    }
                }

                var Data = [];

                if (TotalDc != oSets.aoData.length) {
                    var datalength = oSets.aoData.length;
                    for (var itrCntj = 0; itrCntj < oSets.aoColumns.length; itrCntj++) {
                        Data.push("");
                    }

                    for (var itrCnt = datalength; itrCnt < TotalDc; itrCnt++) {
                        fnAddData_Modified(oTable, oSets, Data, false);
                        //oSets.aoData[itrCnt].nTr.innerHTML = "";
                    }
                }

                var iPageCount = oTable.dataTableExt.oPagination.iFullNumbersShowPages;
                var iPageCountHalf = Math.floor(iPageCount / 2);
                var iPages = Math.ceil(TotalDc / oSets._iDisplayLength);
                var iCurrentPage = Math.ceil(oSets._iDisplayStart / oSets._iDisplayLength) + 1;
                var sList = "";
                var iStartButton, iEndButton, i, iLen;
                var oClasses = oSets.oClasses;
                var anButtons, anStatic, nPaginateList, nNode;
                var an = oSets.aanFeatures.p;
                var oPaging = oSets.oInstance.fnPagingInfo();
                var oLang = oSets.oLanguage.oPaginate;
                var fnClickHandler = function (e) {
                    if (oSets.oApi._fnPageChange(oSets, e.data.action)) {
                        var CurrentPageNo = 0;
                        if (e.data.action == "previous")
                            CurrentPageNo = iCurrentPage - 1;
                        else if (e.data.action == "next")
                            CurrentPageNo = iCurrentPage + 1;
                        else if (e.data.action == "first")
                            CurrentPageNo = 1;
                        else if (e.data.action == "last")
                            CurrentPageNo = iPages;
                        var oGridControl = new GridControl();
                        var _DynamicPage = new DynamicPage(oModel);
                        var GridLoadParameters = [];
                        for (var item in oModel.ControlConfigDict) {
                            if (oModel.ControlConfigDict[item].ControlTypeName != "Label")
                                GridLoadParameters.push(oModel.ControlConfigDict[item].ClientID)
                        }
                        var parameterToLoadData = _DynamicPage.GetLoadParameterList(GridLoadParameters);
                        parameterToLoadData = JSON.stringify(parameterToLoadData);
                        parameterToLoadData = { request: parameterToLoadData, PageSize: oSets._iDisplayLength, CurrentPage: CurrentPageNo, SortColumnName: oSets.aoColumns[oSets.aaSorting[0][0]].nTh.id, SortType: oSets.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending" };
                        parameterToLoadData = JSON.stringify(parameterToLoadData);

                        var result = GetDataSource(GridDataUrl, parameterToLoadData);

                        var startCnt = oSets._iDisplayStart;
                        var RowContent = "";
                        var RowCont = "";

                        for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                            Data = [];
                            //if (oSets.aoData[startCnt + itrCnt].nTr.innerHTML == "") {
                            RowContent = "";
                            var j = 0;
                            for (var k = 0; k < MetaData.length; k++) {
                                RowCont = "";
                                if (MetaData[k].Visible != undefined) {
                                    if (MetaData[k].Visible == true) {
                                        if (MetaData[k].IsGroupColumn != true) {
                                            oSets.aoColumns[j].bShowColumns = true;
                                            if (MetaData[k].Visible && oSets.aoColumns[j].bVisible) {
                                                RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k], result[itrCnt]);
                                                //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                            }
                                            j = j + 1;
                                        }
                                        if (MetaData[k].IsGroupColumn) {
                                            if (MetaData[k].IsGroupColumn == true) {
                                                for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                                    oSets.aoColumns[j].bShowColumns = true;
                                                    if (MetaData[k].SubColumns[i].Visible && oSets.aoColumns[j].bVisible) {
                                                        RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k].SubColumns[i], result[itrCnt]);
                                                        //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                    }
                                                    j = j + 1;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        j = j + 1;
                                    }
                                }
                                oGridControl.GetDataClmn(RowCont, MetaData[k], result[itrCnt], Data);
                            }
                            if (oSets.aoData[startCnt + itrCnt] != undefined && oSets.aoData[startCnt + itrCnt] != null) {
                                oSets.aoData[startCnt + itrCnt].nTr = null;
                                oSets.aoData[startCnt + itrCnt]._aData = Data;
                            }
                        }
                        oTable.fnDraw(false);
                    }
                };

                /* Pages calculation */
                if (oSets._iDisplayLength === -1) {
                    iStartButton = 1;
                    iEndButton = 1;
                    iCurrentPage = 1;
                }
                else if (iPages < iPageCount) {
                    iStartButton = 1;
                    iEndButton = iPages;
                }
                else if (iCurrentPage <= iPageCountHalf) {
                    iStartButton = 1;
                    iEndButton = iPageCount;
                }
                else if (iCurrentPage >= (iPages - iPageCountHalf)) {
                    iStartButton = iPages - iPageCount + 1;
                    iEndButton = iPages;
                }
                else {
                    iStartButton = iCurrentPage - Math.ceil(iPageCount / 2) + 1;
                    iEndButton = iStartButton + iPageCount - 1;
                }

                /* Loop over each instance of the pager */
                for (i = 0, iLen = an.length ; i < iLen ; i++) {
                    nNode = an[i];
                    if (!nNode.hasChildNodes()) {
                        continue;
                    }

                    $('li', an[i]).remove();

                    $(nNode).append(
                        '<ul class = "pagination">' +
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageFirst + '"><a>' + oLang.sFirst + '</a></li>' +
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPagePrevious + '"><a>' + oLang.sPrevious + '</a></li>' +
                            //'<li><span></span><li>'+
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageNext + '"><a>' + oLang.sNext + '</a></li>' +
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageLast + '"><a>' + oLang.sLast + '</a></li>' +
                        '</ul>'
                    );
                    var els = $('a', nNode);
                    var nFirst = els[0],
                        nPrev = els[1],
                        nNext = els[2],
                        nLast = els[3];

                    oSets.oApi._fnBindAction(nFirst, { action: "first" }, fnClickHandler);
                    oSets.oApi._fnBindAction(nPrev, { action: "previous" }, fnClickHandler);
                    oSets.oApi._fnBindAction(nNext, { action: "next" }, fnClickHandler);
                    oSets.oApi._fnBindAction(nLast, { action: "last" }, fnClickHandler);

                    ///* Build the dynamic list */
                    for (var j = iStartButton ; j <= iEndButton ; j++) {
                        sClass = (j == oPaging.iPage + 1) ? 'class="active"' : '';
                        $('<li ' + sClass + '><a href="#">' + j + '</a></li>')
                            .insertBefore($('.next,.last', an[i])[0])
                            .bind('click', function (e) {
                                e.preventDefault();
                                oSets._iDisplayStart = (parseInt($('a', this).text(), 10) - 1) * oPaging.iLength;
                                var CurrentPageNo = $('a', this).text();
                                var oGridControl = new GridControl();
                                var _DynamicPage = new DynamicPage(oModel);
                                var GridLoadParameters = [];
                                for (var item in oModel.ControlConfigDict) {
                                    if (oModel.ControlConfigDict[item].ControlTypeName != "Label")
                                        GridLoadParameters.push(oModel.ControlConfigDict[item].ClientID)
                                }
                                var parameterToLoadData = _DynamicPage.GetLoadParameterList(GridLoadParameters);
                                parameterToLoadData = JSON.stringify(parameterToLoadData);
                                parameterToLoadData = { request: parameterToLoadData, PageSize: oSets._iDisplayLength, CurrentPage: CurrentPageNo, SortColumnName: oSets.aoColumns[oSets.aaSorting[0][0]].nTh.id, SortType: oSets.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending" };
                                parameterToLoadData = JSON.stringify(parameterToLoadData);

                                var result = GetDataSource(GridDataUrl, parameterToLoadData);

                                var startCnt = oSets._iDisplayStart;
                                var RowContent = "";
                                var RowCont = "";

                                for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                                    Data = [];
                                    //if (oSets.aoData[startCnt + itrCnt].nTr.innerHTML == "") {
                                    RowContent = "";
                                    var j = 0;
                                    for (var k = 0; k < MetaData.length; k++) {
                                        RowCont = "";
                                        if (MetaData[k].Visible != undefined) {
                                            if (MetaData[k].Visible == true) {
                                                if (MetaData[k].IsGroupColumn != true) {
                                                    oSets.aoColumns[j].bShowColumns = true;
                                                    if (MetaData[k].Visible && oSets.aoColumns[j].bVisible) {
                                                        RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k], result[itrCnt]);
                                                        //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                    }
                                                    j = j + 1;
                                                }
                                                if (MetaData[k].IsGroupColumn) {
                                                    if (MetaData[k].IsGroupColumn == true) {
                                                        for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                                            oSets.aoColumns[j].bShowColumns = true;
                                                            if (MetaData[k].SubColumns[i].Visible && oSets.aoColumns[j].bVisible) {
                                                                RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k].SubColumns[i], result[itrCnt]);
                                                                //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                            }
                                                            j = j + 1;
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                j = j + 1;
                                            }
                                        }
                                        oGridControl.GetDataClmn(RowCont, MetaData[k], result[itrCnt], Data);
                                    }
                                    if (oSets.aoData[startCnt + itrCnt] != undefined && oSets.aoData[startCnt + itrCnt] != null) {
                                        oSets.aoData[startCnt + itrCnt].nTr = null;
                                        oSets.aoData[startCnt + itrCnt]._aData = Data;
                                    }
                                }
                                oTable.fnDraw(false);
                            });
                    }

                    /* Update the permanent button's classes */
                    anButtons = nNode.getElementsByTagName('li');
                    anStatic = [
                        anButtons[0], anButtons[1],
                        anButtons[anButtons.length - 2], anButtons[anButtons.length - 1]
                    ];

                    $(anStatic).removeClass(oClasses.sPageButton + " " + oClasses.sPageButtonActive + " " + oClasses.sPageButtonStaticDisabled);
                    $([anStatic[0], anStatic[1]]).addClass(
                        (iCurrentPage == 1) ?
                            oClasses.sPageButtonStaticDisabled :
                            oClasses.sPageButton
                    );
                    $([anStatic[2], anStatic[3]]).addClass(
                        (iPages === 0 || iCurrentPage === iPages || oSets._iDisplayLength === -1) ?
                            oClasses.sPageButtonStaticDisabled :
                            oClasses.sPageButton
                    );
                }
            },
            "fnHeaderCallback": function (nHead, aData, iStart, iEnd, aiDisplay) {
                var oTable = $('.full-width').DataTable();
                var oSettings = oTable.fnSettings();
                if (oSettings.bColumnVisible) {
                    var j = 0, IsDefaultSort = 0;
                    for (var k = 0; k < MetaData.length; k++) {
                        if (MetaData[k].Visible != undefined) {
                            if (MetaData[k].Visible == true) {
                                if (MetaData[k].IsGroupColumn != true) {
                                    oSettings.aoColumns[j].bShowColumns = true;
                                    if (!MetaData[k].ColumnDefaultVisible)
                                        oTable.fnSetColumnVis(j, false);
                                    oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                    if (!MetaData[k].Sortable)
                                        oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                    j = j + 1;
                                }
                                if (MetaData[k].IsGroupColumn) {
                                    if (MetaData[k].IsGroupColumn == true) {
                                        for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                            if (MetaData[k].SubColumns[i].IsGroupColumn) {
                                                j = groupColumnSortingApply(MetaData[k].SubColumns[i].SubColumns, j, oTable, oSettings);
                                            }
                                            else {
                                                oSettings.aoColumns[j].bShowColumns = true;
                                                if (!MetaData[k].SubColumns[i].ColumnDefaultVisible)
                                                    oTable.fnSetColumnVis(j, false);
                                                oSettings.aoColumns[j].bSortable = MetaData[k].SubColumns[i].Sortable;
                                                if (!MetaData[k].SubColumns[i].Sortable)
                                                    oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                                j = j + 1;
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                oTable.fnSetColumnVis(j, false);
                                oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                oSettings.aoColumns[j].bShowColumns = false;
                                if (!MetaData[k].Sortable)
                                    oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                j = j + 1;
                            }
                        }
                    }
                }
                if (ColVis != undefined) {
                    ColVis.fnRebuild();
                }
            },
            "fnInfoCallback": function (oSets, iStart, iEnd, iMax, iTotal, sOut) {
                //iEnd = (iStart - 1) + oSets._iDisplayLength
                var TotalCount = 0;
                if (TotalDc != 0)
                    TotalCount = TotalDc;
                if (iTotal === 0) {
                    /* Empty record set */
                    sOut = oSets.oLanguage.sInfoEmpty;
                }
                else {
                    /* Normal record set */
                    sOut = oSets.oLanguage.sInfo;
                }

                if (iTotal != iMax) {
                    /* Record set after filtering */
                    sOut += ' ' + oSets.oLanguage.sInfoFiltered;
                    TotalCount = iTotal;
                }

                // Convert the macros
                sOut += oSets.oLanguage.sInfoPostFix;
                sOut = sOut.replace(/_START_/g, iStart).
                    replace(/_END_/g, iEnd).
                    replace(/_TOTAL_/g, TotalCount).
                    replace(/_MAX_/g, iMax);
                return sOut;
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                //This is not realy necessary
                $(nRow).unbind('click');
                $(nRow).bind('click', function () {
                    var aPos = odtbasicTable.fnGetPosition(this);
                    var atData = odtbasicTable.fnGetData(aPos);

                    selected = [];
                    odtbasicTable.$('tr.row-selected').removeClass('row-selected');
                    $('input', odtbasicTable.fnGetNodes()).each(function () {
                        this.checked = false;
                    });

                    $(this).addClass('row-selected');
                    if (selected.indexOf(atData[0]) == -1)
                        selected.push(atData[0]);
                    var checkBox = document.getElementById("Chk_" + atData[0]);
                    if (checkBox != undefined && checkBox != null) {
                        checkBox.checked = true;
                    }

                    var _DynamicPage = null;
                    var GridLoadParameters = [];
                    var model = null;
                    var lcontrolConfigDict = null;
                    if (oModel._HTMLPageConfigLst != undefined) {
                        for (var i = 0; i < oModel._HTMLPageConfigLst.length; i++) {
                            model = oModel._HTMLPageConfigLst[i];
                            if (lcontrolConfigDict != null) {
                                for (var item in model.ControlConfigDict) {
                                    lcontrolConfigDict[item] = model.ControlConfigDict[item];
                                }
                                model.ControlConfigDict = lcontrolConfigDict;
                            }
                            else {
                                lcontrolConfigDict = model.ControlConfigDict;
                            }
                        }
                    }
                    else {
                        model = oModel;
                    }
                    if (model != null) {
                        _DynamicPage = new DynamicPage(model);
                        if (model.ControlConfigDict != undefined) {
                            for (var item in model.ControlConfigDict) {
                                if (model.ControlConfigDict[item].ControlTypeName != "Label")
                                    GridLoadParameters.push(model.ControlConfigDict[item].ClientID)
                            }
                        }
                    }
                    if (GridLoadParameters.length > 0) {
                        var _ComboBox = new WiNAiMComboBox(model);
                        /* Operation Context */
                        var controlConfig = model.ControlConfigDict[GridLoadParameters[0]];
                        var _DefaultComboBox = _ComboBox.factory(controlConfig.ComboTypeName);
                        _DefaultComboBox.setData(controlConfig, atData[2]);
                        _DefaultComboBox.onchange();
                        /* Role / User */
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[1]], parseInt(atData[6]) > 0 ? 2 : (parseInt(atData[4]) > 0 ? 1 : 0));
                        /* Role */
                        controlConfig = model.ControlConfigDict[GridLoadParameters[2]];
                        _ComboBox.setData(controlConfig, atData[4]);
                        _ComboBox.onchange(controlConfig);
                        /* User */
                        controlConfig = model.ControlConfigDict[GridLoadParameters[3]];
                        _ComboBox.setData(controlConfig, atData[6]);
                        /* Is Team wise */
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[8]], atData[13]);
                        /* DCPlaceType */
                        controlConfig = model.ControlConfigDict[GridLoadParameters[4]];
                        _ComboBox.setData(controlConfig, atData[23]);
                        _ComboBox.onchange(controlConfig);
                        /* Place */
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[6]], atData[8]);
                        /* Template */
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[5]], atData[10]);
                        /* Approval Type */
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[9]], atData[12].toString() == "true" ? 1 : 2); /*_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[6]], atData[25] == "true" ? true : false);*/
                        /* Approval Level. */
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[7]], atData[14]);

                        /* Object Id */
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[10]], atData[0]);
                        if (atData[14] != '') {
                            var _ApprovalLevelTextBoxChange = new ApprovalLevelTextBoxChange(model.ControlConfigDict[GridLoadParameters[6]], model);
                            //_ApprovalLevelTextBoxChange.onchange();
                            GridLoadParameters = [];
                            if (model != null) {
                                _DynamicPage = new DynamicPage(model);
                                if (model.ControlConfigDict != undefined) {
                                    for (var item in model.ControlConfigDict) {
                                        if (model.ControlConfigDict[item].ControlTypeName != "Label")
                                            GridLoadParameters.push(model.ControlConfigDict[item].ClientID)
                                    }
                                }
                            }
                            var lastIndex = 0;
                            var lastIndex1 = 0;
                            for (var i = 0; i < parseInt(atData[14]) ; i++) {
                                if (i == 0) {
                                    lastIndex = 9;
                                    lastIndex1 = 15;
                                }
                                else {
                                    lastIndex = lastIndex + 6;
                                    lastIndex1 = lastIndex1 + 4
                                }
                                var _RoleOrUserIndex = GridLoadParameters.indexOf((model.HTMLPageID + '_RoleOrUser' + (i + 1)));
                                var _ddlRoleIndex = GridLoadParameters.indexOf((model.HTMLPageID + '_ddlRole' + (i + 1)));
                                var _ddlUserIndex = GridLoadParameters.indexOf((model.HTMLPageID + '_ddlUser' + (i + 1)));
                                _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[_RoleOrUserIndex]], parseInt(atData[lastIndex1 + 1]) > 0 ? 2 : (parseInt(atData[lastIndex1]) > 0 ? 1 : 0)); //-- Role / User
                                //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[_RoleOrUserIndex]], parseInt(atData[lastIndex1]) > 0 ? 1 : (parseInt(atData[lastIndex1 + 1]) > 0 ? 2 : 0)); //-- Role / User
                                /* Role */
                                controlConfig = model.ControlConfigDict[GridLoadParameters[_ddlRoleIndex]];
                                _ComboBox.setData(controlConfig, atData[lastIndex1]);
                                _ComboBox.onchange(controlConfig);
                                /* User */
                                controlConfig = model.ControlConfigDict[GridLoadParameters[_ddlUserIndex]];
                                _ComboBox.setData(controlConfig, atData[lastIndex1 + 1]);
                            }
                        }
                    }
                });
            },
            "fnFooterCallback": function (nFoot, aData, iStart, iEnd, aiDisplay) {
                var oTable = $('.full-width').DataTable();
                var oTableDate = oTable.fnGetNodes();
                var oSettings = oTable.fnSettings();
                //iEnd = iStart + oSettings._iDisplayLength
                var itrCnt = 0;
                var diff = iEnd - iStart;
                if (diff != 0) {
                    for (var item in oTableDate) {
                        if (oTableDate[item]._DT_RowIndex >= iStart && oTableDate[item]._DT_RowIndex < iEnd) {
                            if ($('input', oTable.fnGetNodes(oTableDate[item]._DT_RowIndex)).length > 0) {
                                if ($('input', oTable.fnGetNodes(oTableDate[item]._DT_RowIndex))[0].checked == true)
                                    itrCnt = itrCnt + 1;
                            }
                        }
                    }
                    if (diff == itrCnt)
                        $('#selectall')[0].checked = true;
                    else
                        $('#selectall')[0].checked = false;
                }
            },
            "bAutoWidth": false
        });

        var nLength = document.getElementById('datatable_ApprovalProf_length');
        var oCommonMethodForGridInit = new CommonMethodForGridInit("datatable_ApprovalProf", oModel, GridConfigUrl, GridDataUrl);
        $('select', nLength).unbind();
        $('select', nLength).bind('change.DT', oCommonMethodForGridInit.PageCountChangeEventHandler);

        $('#selectall').click(function () {
            var itr = 0;
            if (this.checked == true) {
                $('input', odtbasicTable.fnGetNodes()).each(function () {
                    var aPos = odtbasicTable.fnGetPosition(this.parentElement.parentElement);
                    var atData = odtbasicTable.fnGetData(aPos);
                    if (this.parentElement.parentElement._DT_RowIndex >= odtbasicTable.fnSettings()._iDisplayStart && this.parentElement.parentElement._DT_RowIndex < odtbasicTable.fnSettings()._iDisplayEnd &&
                        odtbasicTable.fnSettings().aiDisplay.length == odtbasicTable.fnSettings().aoData.length) {
                        if (this.parentElement.parentElement.tagName == "TR") {
                            $(this.parentElement.parentElement).addClass('row-selected');
                            if (selected.indexOf(atData[0]) == -1)
                                selected.push(atData[0]);
                            this.checked = true;
                            $('input', odtbasicTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                        }
                    }
                    else if (itr < odtbasicTable.fnSettings()._iDisplayEnd && odtbasicTable.fnSettings().aiDisplay.length != odtbasicTable.fnSettings().aoData.length &&
                        odtbasicTable.fnSettings().aiDisplay.indexOf(this.parentElement.parentElement._DT_RowIndex) != -1) {
                        if (this.parentElement.parentElement.tagName == "TR") {
                            $(this.parentElement.parentElement).addClass('row-selected');
                            if (selected.indexOf(atData[0]) == -1)
                                selected.push(atData[0]);
                            this.checked = true;
                            $('input', odtbasicTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                        }
                    }
                    itr += 1;
                });
                if (document.getElementById("DcApprovalPage_Master_Default_ObjectId").value != "" && document.getElementById("DcApprovalPage_Master_Default_ObjectId").value != null && document.getElementById("DcApprovalPage_Master_Default_ObjectId").value != undefined)
                    document.getElementById("DcApprovalPage_Master_Default_ObjectId").value = "";
            }
            else {
                $('input', odtbasicTable.fnGetNodes()).each(function () {
                    var aPos = odtbasicTable.fnGetPosition(this.parentElement.parentElement);
                    var atData = odtbasicTable.fnGetData(aPos);
                    if (this.parentElement.parentElement._DT_RowIndex >= odtbasicTable.fnSettings()._iDisplayStart && this.parentElement.parentElement._DT_RowIndex < odtbasicTable.fnSettings()._iDisplayEnd &&
                        odtbasicTable.fnSettings().aiDisplay.length == odtbasicTable.fnSettings().aoData.length) {
                        this.checked = false;
                        if (this.parentElement.parentElement.tagName == "TR") {
                            if ($(this.parentElement.parentElement).hasClass('row-selected')) {
                                $(this.parentElement.parentElement).removeClass('row-selected');
                                var index = selected.indexOf(atData[0]);
                                if (index != -1)
                                    selected.splice(index, 1);
                            }
                        }
                        $('input', odtbasicTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                    }
                    else if (itr < odtbasicTable.fnSettings()._iDisplayEnd && odtbasicTable.fnSettings().aiDisplay.length != odtbasicTable.fnSettings().aoData.length &&
                        odtbasicTable.fnSettings().aiDisplay.indexOf(this.parentElement.parentElement._DT_RowIndex) != -1) {
                        this.checked = false;
                        if (this.parentElement.parentElement.tagName == "TR") {
                            if ($(this.parentElement.parentElement).hasClass('row-selected')) {
                                $(this.parentElement.parentElement).removeClass('row-selected');
                                var index = selected.indexOf(atData[0]);
                                if (index != -1)
                                    selected.splice(index, 1);
                            }
                        }
                        $('input', odtbasicTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                    }
                    itr += 1;
                });
                if (document.getElementById("DcApprovalPage_Master_Default_ObjectId").value != "" && document.getElementById("DcApprovalPage_Master_Default_ObjectId").value != null && document.getElementById("DcApprovalPage_Master_Default_ObjectId").value != undefined)
                    document.getElementById("DcApprovalPage_Master_Default_ObjectId").value = "";
            }
        });
    }

    //--Handover Profile Grid Initialize function.
    this.HandoverProfileGridInit = function (GridConfigUrl, GridDataUrl, oModel) {
        selected = [];

        var odtbasicTable = $('#datatable_ApprovalProf').dataTable({
            "sPaginationType": "full_numbers",
            "sDom": "<'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>lf>r<'dt-wrapper't><'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>",//'<'toolbar'>frtip'",
            "fnInitComplete": function (oSettings, json) {
                $('.ColVis_Button').addClass('btn btn-default btn-sm').html('Hide / Show <i class="icon-arrow-down"></i>');
                $(this).closest('#dt_table_tools_wrapper').find('.DTTT.btn-group').addClass('table_tools_group').children('a.btn').each(function () {
                    $(this).addClass('btn-sm btn-default');
                });
            },
            "iDisplayLength": 10,
            "aLengthMenu": [5, 10, 25, 50, 100, 500, 1000],
            "aoColumnDefs": [],//{ 'bVisible': false, 'aTargets': [0], "bAutoWidth": false }, { 'bVisible': false, 'aTargets': [2], "bAutoWidth": false }
            "fnDrawCallback": function (oSets, fnCallbackDraw) {
                var oTable = $('.full-width').DataTable();

                if (TotalDc != oSets.aoData.length) {
                    var datalength = oSets.aiDisplay.length;
                    //oSets.aiDisplay.remove(0, oTable.fnSettings().aiDisplay.length);

                    for (var itrCnt = datalength; itrCnt < TotalDc; itrCnt++) {
                        oSets.aiDisplay.push(itrCnt);
                    }
                }

                var Data = [];

                if (TotalDc != oSets.aoData.length) {
                    var datalength = oSets.aoData.length;
                    for (var itrCntj = 0; itrCntj < oSets.aoColumns.length; itrCntj++) {
                        Data.push("");
                    }

                    for (var itrCnt = datalength; itrCnt < TotalDc; itrCnt++) {
                        fnAddData_Modified(oTable, oSets, Data, false);
                        //oSets.aoData[itrCnt].nTr.innerHTML = "";
                    }
                }

                var iPageCount = oTable.dataTableExt.oPagination.iFullNumbersShowPages;
                var iPageCountHalf = Math.floor(iPageCount / 2);
                var iPages = Math.ceil(TotalDc / oSets._iDisplayLength);
                var iCurrentPage = Math.ceil(oSets._iDisplayStart / oSets._iDisplayLength) + 1;
                var sList = "";
                var iStartButton, iEndButton, i, iLen;
                var oClasses = oSets.oClasses;
                var anButtons, anStatic, nPaginateList, nNode;
                var an = oSets.aanFeatures.p;
                var oPaging = oSets.oInstance.fnPagingInfo();
                var oLang = oSets.oLanguage.oPaginate;
                var fnClickHandler = function (e) {
                    if (oSets.oApi._fnPageChange(oSets, e.data.action)) {
                        var CurrentPageNo = 0;
                        if (e.data.action == "previous")
                            CurrentPageNo = iCurrentPage - 1;
                        else if (e.data.action == "next")
                            CurrentPageNo = iCurrentPage + 1;
                        else if (e.data.action == "first")
                            CurrentPageNo = 1;
                        else if (e.data.action == "last")
                            CurrentPageNo = iPages;
                        var oGridControl = new GridControl();
                        var _DynamicPage = new DynamicPage(oModel);
                        var GridLoadParameters = [];
                        for (var item in oModel.ControlConfigDict) {
                            if (oModel.ControlConfigDict[item].ControlTypeName != "Label")
                                GridLoadParameters.push(oModel.ControlConfigDict[item].ClientID)
                        }
                        var parameterToLoadData = _DynamicPage.GetLoadParameterList(GridLoadParameters);
                        parameterToLoadData = JSON.stringify(parameterToLoadData);
                        parameterToLoadData = { request: parameterToLoadData, PageSize: oSets._iDisplayLength, CurrentPage: CurrentPageNo, SortColumnName: oSets.aoColumns[oSets.aaSorting[0][0]].nTh.id, SortType: oSets.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending" };
                        parameterToLoadData = JSON.stringify(parameterToLoadData);

                        var result = GetDataSource(GridDataUrl, parameterToLoadData);

                        var startCnt = oSets._iDisplayStart;
                        var RowContent = "";
                        var RowCont = "";

                        for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                            Data = [];
                            //if (oSets.aoData[startCnt + itrCnt].nTr.innerHTML == "") {
                            RowContent = "";
                            var j = 0;
                            for (var k = 0; k < MetaData.length; k++) {
                                RowCont = "";
                                if (MetaData[k].Visible != undefined) {
                                    if (MetaData[k].Visible == true) {
                                        if (MetaData[k].IsGroupColumn != true) {
                                            oSets.aoColumns[j].bShowColumns = true;
                                            if (MetaData[k].Visible && oSets.aoColumns[j].bVisible) {
                                                RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k], result[itrCnt]);
                                                //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                            }
                                            j = j + 1;
                                        }
                                        if (MetaData[k].IsGroupColumn) {
                                            if (MetaData[k].IsGroupColumn == true) {
                                                for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                                    oSets.aoColumns[j].bShowColumns = true;
                                                    if (MetaData[k].SubColumns[i].Visible && oSets.aoColumns[j].bVisible) {
                                                        RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k].SubColumns[i], result[itrCnt]);
                                                        //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                    }
                                                    j = j + 1;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        j = j + 1;
                                    }
                                }
                                oGridControl.GetDataClmn(RowCont, MetaData[k], result[itrCnt], Data);
                            }
                            if (oSets.aoData[startCnt + itrCnt] != undefined && oSets.aoData[startCnt + itrCnt] != null) {
                                oSets.aoData[startCnt + itrCnt].nTr = null;
                                oSets.aoData[startCnt + itrCnt]._aData = Data;
                            }
                        }
                        oTable.fnDraw(false);
                    }
                };

                /* Pages calculation */
                if (oSets._iDisplayLength === -1) {
                    iStartButton = 1;
                    iEndButton = 1;
                    iCurrentPage = 1;
                }
                else if (iPages < iPageCount) {
                    iStartButton = 1;
                    iEndButton = iPages;
                }
                else if (iCurrentPage <= iPageCountHalf) {
                    iStartButton = 1;
                    iEndButton = iPageCount;
                }
                else if (iCurrentPage >= (iPages - iPageCountHalf)) {
                    iStartButton = iPages - iPageCount + 1;
                    iEndButton = iPages;
                }
                else {
                    iStartButton = iCurrentPage - Math.ceil(iPageCount / 2) + 1;
                    iEndButton = iStartButton + iPageCount - 1;
                }

                /* Loop over each instance of the pager */
                for (i = 0, iLen = an.length ; i < iLen ; i++) {
                    nNode = an[i];
                    if (!nNode.hasChildNodes()) {
                        continue;
                    }

                    $('li', an[i]).remove();

                    $(nNode).append(
                        '<ul class = "pagination">' +
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageFirst + '"><a>' + oLang.sFirst + '</a></li>' +
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPagePrevious + '"><a>' + oLang.sPrevious + '</a></li>' +
                            //'<li><span></span><li>'+
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageNext + '"><a>' + oLang.sNext + '</a></li>' +
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageLast + '"><a>' + oLang.sLast + '</a></li>' +
                        '</ul>'
                    );
                    var els = $('a', nNode);
                    var nFirst = els[0],
                        nPrev = els[1],
                        nNext = els[2],
                        nLast = els[3];

                    oSets.oApi._fnBindAction(nFirst, { action: "first" }, fnClickHandler);
                    oSets.oApi._fnBindAction(nPrev, { action: "previous" }, fnClickHandler);
                    oSets.oApi._fnBindAction(nNext, { action: "next" }, fnClickHandler);
                    oSets.oApi._fnBindAction(nLast, { action: "last" }, fnClickHandler);

                    ///* Build the dynamic list */
                    for (var j = iStartButton ; j <= iEndButton ; j++) {
                        sClass = (j == oPaging.iPage + 1) ? 'class="active"' : '';
                        $('<li ' + sClass + '><a href="#">' + j + '</a></li>')
                            .insertBefore($('.next,.last', an[i])[0])
                            .bind('click', function (e) {
                                e.preventDefault();
                                oSets._iDisplayStart = (parseInt($('a', this).text(), 10) - 1) * oPaging.iLength;
                                var CurrentPageNo = $('a', this).text();
                                var oGridControl = new GridControl();
                                var _DynamicPage = new DynamicPage(oModel);
                                var GridLoadParameters = [];
                                for (var item in oModel.ControlConfigDict) {
                                    if (oModel.ControlConfigDict[item].ControlTypeName != "Label")
                                        GridLoadParameters.push(oModel.ControlConfigDict[item].ClientID)
                                }
                                var parameterToLoadData = _DynamicPage.GetLoadParameterList(GridLoadParameters);
                                parameterToLoadData = JSON.stringify(parameterToLoadData);
                                parameterToLoadData = { request: parameterToLoadData, PageSize: oSets._iDisplayLength, CurrentPage: CurrentPageNo, SortColumnName: oSets.aoColumns[oSets.aaSorting[0][0]].nTh.id, SortType: oSets.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending" };
                                parameterToLoadData = JSON.stringify(parameterToLoadData);

                                var result = GetDataSource(GridDataUrl, parameterToLoadData);

                                var startCnt = oSets._iDisplayStart;
                                var RowContent = "";
                                var RowCont = "";

                                for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                                    Data = [];
                                    //if (oSets.aoData[startCnt + itrCnt].nTr.innerHTML == "") {
                                    RowContent = "";
                                    var j = 0;
                                    for (var k = 0; k < MetaData.length; k++) {
                                        RowCont = "";
                                        if (MetaData[k].Visible != undefined) {
                                            if (MetaData[k].Visible == true) {
                                                if (MetaData[k].IsGroupColumn != true) {
                                                    oSets.aoColumns[j].bShowColumns = true;
                                                    if (MetaData[k].Visible && oSets.aoColumns[j].bVisible) {
                                                        RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k], result[itrCnt]);
                                                        //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                    }
                                                    j = j + 1;
                                                }
                                                if (MetaData[k].IsGroupColumn) {
                                                    if (MetaData[k].IsGroupColumn == true) {
                                                        for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                                            oSets.aoColumns[j].bShowColumns = true;
                                                            if (MetaData[k].SubColumns[i].Visible && oSets.aoColumns[j].bVisible) {
                                                                RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k].SubColumns[i], result[itrCnt]);
                                                                //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                            }
                                                            j = j + 1;
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                j = j + 1;
                                            }
                                        }
                                        oGridControl.GetDataClmn(RowCont, MetaData[k], result[itrCnt], Data);
                                    }
                                    if (oSets.aoData[startCnt + itrCnt] != undefined && oSets.aoData[startCnt + itrCnt] != null) {
                                        oSets.aoData[startCnt + itrCnt].nTr = null;
                                        oSets.aoData[startCnt + itrCnt]._aData = Data;
                                    }
                                }
                                oTable.fnDraw(false);
                            });
                    }

                    /* Update the permanent button's classes */
                    anButtons = nNode.getElementsByTagName('li');
                    anStatic = [
                        anButtons[0], anButtons[1],
                        anButtons[anButtons.length - 2], anButtons[anButtons.length - 1]
                    ];

                    $(anStatic).removeClass(oClasses.sPageButton + " " + oClasses.sPageButtonActive + " " + oClasses.sPageButtonStaticDisabled);
                    $([anStatic[0], anStatic[1]]).addClass(
                        (iCurrentPage == 1) ?
                            oClasses.sPageButtonStaticDisabled :
                            oClasses.sPageButton
                    );
                    $([anStatic[2], anStatic[3]]).addClass(
                        (iPages === 0 || iCurrentPage === iPages || oSets._iDisplayLength === -1) ?
                            oClasses.sPageButtonStaticDisabled :
                            oClasses.sPageButton
                    );
                }
            },
            "fnHeaderCallback": function (nHead, aData, iStart, iEnd, aiDisplay) {
                var oTable = $('.full-width').DataTable();
                var oSettings = oTable.fnSettings();
                if (oSettings.bColumnVisible) {
                    var j = 0, IsDefaultSort = 0;
                    for (var k = 0; k < MetaData.length; k++) {
                        if (MetaData[k].Visible != undefined) {
                            if (MetaData[k].Visible == true) {
                                if (MetaData[k].IsGroupColumn != true) {
                                    oSettings.aoColumns[j].bShowColumns = true;
                                    if (!MetaData[k].ColumnDefaultVisible)
                                        oTable.fnSetColumnVis(j, false);
                                    oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                    if (!MetaData[k].Sortable)
                                        oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                    j = j + 1;
                                }
                                if (MetaData[k].IsGroupColumn) {
                                    if (MetaData[k].IsGroupColumn == true) {
                                        for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                            if (MetaData[k].SubColumns[i].IsGroupColumn) {
                                                j = groupColumnSortingApply(MetaData[k].SubColumns[i].SubColumns, j, oTable, oSettings);
                                            }
                                            else {
                                                oSettings.aoColumns[j].bShowColumns = true;
                                                if (!MetaData[k].SubColumns[i].ColumnDefaultVisible)
                                                    oTable.fnSetColumnVis(j, false);
                                                oSettings.aoColumns[j].bSortable = MetaData[k].SubColumns[i].Sortable;
                                                if (!MetaData[k].SubColumns[i].Sortable)
                                                    oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                                j = j + 1;
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                oTable.fnSetColumnVis(j, false);
                                oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                oSettings.aoColumns[j].bShowColumns = false;
                                if (!MetaData[k].Sortable)
                                    oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                j = j + 1;
                            }
                        }
                    }
                }
                if (ColVis != undefined) {
                    ColVis.fnRebuild();
                }
            },
            "fnInfoCallback": function (oSets, iStart, iEnd, iMax, iTotal, sOut) {
                //iEnd = (iStart - 1) + oSets._iDisplayLength
                var TotalCount = 0;
                if (TotalDc != 0)
                    TotalCount = TotalDc;
                if (iTotal === 0) {
                    /* Empty record set */
                    sOut = oSets.oLanguage.sInfoEmpty;
                }
                else {
                    /* Normal record set */
                    sOut = oSets.oLanguage.sInfo;
                }

                if (iTotal != iMax) {
                    /* Record set after filtering */
                    sOut += ' ' + oSets.oLanguage.sInfoFiltered;
                    TotalCount = iTotal;
                }

                // Convert the macros
                sOut += oSets.oLanguage.sInfoPostFix;
                sOut = sOut.replace(/_START_/g, iStart).
                    replace(/_END_/g, iEnd).
                    replace(/_TOTAL_/g, TotalCount).
                    replace(/_MAX_/g, iMax);
                return sOut;
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                //This is not realy necessary
                $(nRow).unbind('click');
                $(nRow).bind('click', function () {
                    var aPos = odtbasicTable.fnGetPosition(this);
                    var atData = odtbasicTable.fnGetData(aPos);

                    selected = [];
                    odtbasicTable.$('tr.row-selected').removeClass('row-selected');
                    $('input', odtbasicTable.fnGetNodes()).each(function () {
                        this.checked = false;
                    });

                    $(this).addClass('row-selected');
                    if (selected.indexOf(atData[0]) == -1)
                        selected.push(atData[0]);
                    var checkBox = document.getElementById("Chk_" + atData[0]);
                    if (checkBox != undefined && checkBox != null) {
                        checkBox.checked = true;
                    }

                    var _DynamicPage = null;
                    var GridLoadParameters = [];
                    var model = null;
                    var lcontrolConfigDict = null;
                    if (oModel._HTMLPageConfigLst != undefined) {
                        for (var i = 0; i < oModel._HTMLPageConfigLst.length; i++) {
                            model = oModel._HTMLPageConfigLst[i];
                            if (lcontrolConfigDict != null) {
                                for (var item in model.ControlConfigDict) {
                                    lcontrolConfigDict[item] = model.ControlConfigDict[item];
                                }
                                model.ControlConfigDict = lcontrolConfigDict;
                            }
                            else {
                                lcontrolConfigDict = model.ControlConfigDict;
                            }
                        }
                    }
                    else {
                        model = oModel;
                    }
                    if (model != null) {
                        _DynamicPage = new DynamicPage(model);
                        if (model.ControlConfigDict != undefined) {
                            for (var item in model.ControlConfigDict) {
                                if (model.ControlConfigDict[item].ControlTypeName != "Label")
                                    GridLoadParameters.push(model.ControlConfigDict[item].ClientID)
                            }
                        }
                    }
                    if (GridLoadParameters.length > 0) {
                        var _ComboBox = new WiNAiMComboBox(model);
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[0]], atData[2]);
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[1]], atData[6]);
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[2]], atData[4]);
                        ////_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[3]], atData[9]);
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[3]], atData[0]);


                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[0]], atData[2]);
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[1]], parseInt(atData[6]) > 0 ? 2 : (parseInt(atData[4]) > 0 ? 1 : 0));
                        /* Role */
                        controlConfig = model.ControlConfigDict[GridLoadParameters[2]];
                        _ComboBox.setData(controlConfig, atData[4]);
                        _ComboBox.onchange(controlConfig);
                        /* User */
                        controlConfig = model.ControlConfigDict[GridLoadParameters[3]];
                        _ComboBox.setData(controlConfig, atData[6]);

                        /* Place Dimension */
                        controlConfig = model.ControlConfigDict[GridLoadParameters[4]];
                        _ComboBox.setData(controlConfig, atData[12]);
                        _ComboBox.onchange(controlConfig);
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[5]], atData[10]);
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[6]], atData[8]);
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[3]], atData[9]);
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[7]], atData[0]);
                    }
                });
            },
            "fnFooterCallback": function (nFoot, aData, iStart, iEnd, aiDisplay) {
                var oTable = $('.full-width').DataTable();
                var oTableDate = oTable.fnGetNodes();
                var oSettings = oTable.fnSettings();
                //iEnd = iStart + oSettings._iDisplayLength
                var itrCnt = 0;
                var diff = iEnd - iStart;
                if (diff != 0) {
                    for (var item in oTableDate) {
                        if (oTableDate[item]._DT_RowIndex >= iStart && oTableDate[item]._DT_RowIndex < iEnd) {
                            if ($('input', oTable.fnGetNodes(oTableDate[item]._DT_RowIndex)).length > 0) {
                                if ($('input', oTable.fnGetNodes(oTableDate[item]._DT_RowIndex))[0].checked == true)
                                    itrCnt = itrCnt + 1;
                            }
                        }
                    }
                    if (diff == itrCnt)
                        $('#selectall')[0].checked = true;
                    else
                        $('#selectall')[0].checked = false;
                }
            },
            "bAutoWidth": false
        });

        var nLength = document.getElementById('datatable_ApprovalProf_length');
        var oCommonMethodForGridInit = new CommonMethodForGridInit("datatable_ApprovalProf", oModel, GridConfigUrl, GridDataUrl);
        $('select', nLength).unbind();
        $('select', nLength).bind('change.DT', oCommonMethodForGridInit.PageCountChangeEventHandler);

        $('#selectall').click(function () {
            var itr = 0;
            if (this.checked == true) {
                $('input', odtbasicTable.fnGetNodes()).each(function () {
                    var aPos = odtbasicTable.fnGetPosition(this.parentElement.parentElement);
                    var atData = odtbasicTable.fnGetData(aPos);
                    if (this.parentElement.parentElement._DT_RowIndex >= odtbasicTable.fnSettings()._iDisplayStart && this.parentElement.parentElement._DT_RowIndex < odtbasicTable.fnSettings()._iDisplayEnd &&
                        odtbasicTable.fnSettings().aiDisplay.length == odtbasicTable.fnSettings().aoData.length) {
                        if (this.parentElement.parentElement.tagName == "TR") {
                            $(this.parentElement.parentElement).addClass('row-selected');
                            if (selected.indexOf(atData[0]) == -1)
                                selected.push(atData[0]);
                            this.checked = true;
                            $('input', odtbasicTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                        }
                    }
                    else if (itr < odtbasicTable.fnSettings()._iDisplayEnd && odtbasicTable.fnSettings().aiDisplay.length != odtbasicTable.fnSettings().aoData.length &&
                        odtbasicTable.fnSettings().aiDisplay.indexOf(this.parentElement.parentElement._DT_RowIndex) != -1) {
                        if (this.parentElement.parentElement.tagName == "TR") {
                            $(this.parentElement.parentElement).addClass('row-selected');
                            if (selected.indexOf(atData[0]) == -1)
                                selected.push(atData[0]);
                            this.checked = true;
                            $('input', odtbasicTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                        }
                    }
                    itr += 1;
                });
                if (document.getElementById("DcApprovalPage_Master_Default_ObjectId").value != "" && document.getElementById("DcApprovalPage_Master_Default_ObjectId").value != null && document.getElementById("DcApprovalPage_Master_Default_ObjectId").value != undefined)
                    document.getElementById("DcApprovalPage_Master_Default_ObjectId").value = "";
            }
            else {
                $('input', odtbasicTable.fnGetNodes()).each(function () {
                    var aPos = odtbasicTable.fnGetPosition(this.parentElement.parentElement);
                    var atData = odtbasicTable.fnGetData(aPos);
                    if (this.parentElement.parentElement._DT_RowIndex >= odtbasicTable.fnSettings()._iDisplayStart && this.parentElement.parentElement._DT_RowIndex < odtbasicTable.fnSettings()._iDisplayEnd &&
                        odtbasicTable.fnSettings().aiDisplay.length == odtbasicTable.fnSettings().aoData.length) {
                        this.checked = false;
                        if (this.parentElement.parentElement.tagName == "TR") {
                            if ($(this.parentElement.parentElement).hasClass('row-selected')) {
                                $(this.parentElement.parentElement).removeClass('row-selected');
                                var index = selected.indexOf(atData[0]);
                                if (index != -1)
                                    selected.splice(index, 1);
                            }
                        }
                        $('input', odtbasicTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                    }
                    else if (itr < odtbasicTable.fnSettings()._iDisplayEnd && odtbasicTable.fnSettings().aiDisplay.length != odtbasicTable.fnSettings().aoData.length &&
                        odtbasicTable.fnSettings().aiDisplay.indexOf(this.parentElement.parentElement._DT_RowIndex) != -1) {
                        this.checked = false;
                        if (this.parentElement.parentElement.tagName == "TR") {
                            if ($(this.parentElement.parentElement).hasClass('row-selected')) {
                                $(this.parentElement.parentElement).removeClass('row-selected');
                                var index = selected.indexOf(atData[0]);
                                if (index != -1)
                                    selected.splice(index, 1);
                            }
                        }
                        $('input', odtbasicTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                    }
                    itr += 1;
                });
                if (document.getElementById("DcApprovalPage_Master_Default_ObjectId").value != "" && document.getElementById("DcApprovalPage_Master_Default_ObjectId").value != null && document.getElementById("DcApprovalPage_Master_Default_ObjectId").value != undefined)
                    document.getElementById("DcApprovalPage_Master_Default_ObjectId").value = "";
            }
        });
    }

    //--Monitor Profile Grid Initialize function.
    this.MonitorProfileGridInit = function (GridConfigUrl, GridDataUrl, oModel) {
        selected = [];

        var odtbasicTable = $('#datatable_ApprovalProf').dataTable({
            "sPaginationType": "full_numbers",
            "sDom": "<'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>lf>r<'dt-wrapper't><'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>",//'<'toolbar'>frtip'",
            "fnInitComplete": function (oSettings, json) {
                $('.ColVis_Button').addClass('btn btn-default btn-sm').html('Hide / Show <i class="icon-arrow-down"></i>');
                $(this).closest('#dt_table_tools_wrapper').find('.DTTT.btn-group').addClass('table_tools_group').children('a.btn').each(function () {
                    $(this).addClass('btn-sm btn-default');
                });
            },
            "iDisplayLength": 10,
            "aLengthMenu": [5, 10, 25, 50, 100, 500, 1000],
            "aoColumnDefs": [],//{ 'bVisible': false, 'aTargets': [0], "bAutoWidth": false }, { 'bVisible': false, 'aTargets': [2], "bAutoWidth": false }
            "fnDrawCallback": function (oSets, fnCallbackDraw) {
                var oTable = $('.full-width').DataTable();

                if (TotalDc != oSets.aoData.length) {
                    var datalength = oSets.aiDisplay.length;
                    //oSets.aiDisplay.remove(0, oTable.fnSettings().aiDisplay.length);

                    for (var itrCnt = datalength; itrCnt < TotalDc; itrCnt++) {
                        oSets.aiDisplay.push(itrCnt);
                    }
                }

                var Data = [];

                if (TotalDc != oSets.aoData.length) {
                    var datalength = oSets.aoData.length;
                    for (var itrCntj = 0; itrCntj < oSets.aoColumns.length; itrCntj++) {
                        Data.push("");
                    }

                    for (var itrCnt = datalength; itrCnt < TotalDc; itrCnt++) {
                        fnAddData_Modified(oTable, oSets, Data, false);
                        //oSets.aoData[itrCnt].nTr.innerHTML = "";
                    }
                }

                var iPageCount = oTable.dataTableExt.oPagination.iFullNumbersShowPages;
                var iPageCountHalf = Math.floor(iPageCount / 2);
                var iPages = Math.ceil(TotalDc / oSets._iDisplayLength);
                var iCurrentPage = Math.ceil(oSets._iDisplayStart / oSets._iDisplayLength) + 1;
                var sList = "";
                var iStartButton, iEndButton, i, iLen;
                var oClasses = oSets.oClasses;
                var anButtons, anStatic, nPaginateList, nNode;
                var an = oSets.aanFeatures.p;
                var oPaging = oSets.oInstance.fnPagingInfo();
                var oLang = oSets.oLanguage.oPaginate;
                var fnClickHandler = function (e) {
                    if (oSets.oApi._fnPageChange(oSets, e.data.action)) {
                        var CurrentPageNo = 0;
                        if (e.data.action == "previous")
                            CurrentPageNo = iCurrentPage - 1;
                        else if (e.data.action == "next")
                            CurrentPageNo = iCurrentPage + 1;
                        else if (e.data.action == "first")
                            CurrentPageNo = 1;
                        else if (e.data.action == "last")
                            CurrentPageNo = iPages;
                        var oGridControl = new GridControl();
                        var _DynamicPage = new DynamicPage(oModel);
                        var GridLoadParameters = [];
                        for (var item in oModel.ControlConfigDict) {
                            if (oModel.ControlConfigDict[item].ControlTypeName != "Label")
                                GridLoadParameters.push(oModel.ControlConfigDict[item].ClientID)
                        }
                        var parameterToLoadData = _DynamicPage.GetLoadParameterList(GridLoadParameters);
                        parameterToLoadData = JSON.stringify(parameterToLoadData);
                        parameterToLoadData = { request: parameterToLoadData, PageSize: oSets._iDisplayLength, CurrentPage: CurrentPageNo, SortColumnName: oSets.aoColumns[oSets.aaSorting[0][0]].nTh.id, SortType: oSets.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending" };
                        parameterToLoadData = JSON.stringify(parameterToLoadData);

                        var result = GetDataSource(GridDataUrl, parameterToLoadData);

                        var startCnt = oSets._iDisplayStart;
                        var RowContent = "";
                        var RowCont = "";

                        for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                            Data = [];
                            //if (oSets.aoData[startCnt + itrCnt].nTr.innerHTML == "") {
                            RowContent = "";
                            var j = 0;
                            for (var k = 0; k < MetaData.length; k++) {
                                RowCont = "";
                                if (MetaData[k].Visible != undefined) {
                                    if (MetaData[k].Visible == true) {
                                        if (MetaData[k].IsGroupColumn != true) {
                                            oSets.aoColumns[j].bShowColumns = true;
                                            if (MetaData[k].Visible && oSets.aoColumns[j].bVisible) {
                                                RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k], result[itrCnt]);
                                                //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                            }
                                            j = j + 1;
                                        }
                                        if (MetaData[k].IsGroupColumn) {
                                            if (MetaData[k].IsGroupColumn == true) {
                                                for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                                    oSets.aoColumns[j].bShowColumns = true;
                                                    if (MetaData[k].SubColumns[i].Visible && oSets.aoColumns[j].bVisible) {
                                                        RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k].SubColumns[i], result[itrCnt]);
                                                        //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                    }
                                                    j = j + 1;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        j = j + 1;
                                    }
                                }
                                oGridControl.GetDataClmn(RowCont, MetaData[k], result[itrCnt], Data);
                            }
                            if (oSets.aoData[startCnt + itrCnt] != undefined && oSets.aoData[startCnt + itrCnt] != null) {
                                oSets.aoData[startCnt + itrCnt].nTr = null;
                                oSets.aoData[startCnt + itrCnt]._aData = Data;
                            }
                        }
                        oTable.fnDraw(false);
                    }
                };

                /* Pages calculation */
                if (oSets._iDisplayLength === -1) {
                    iStartButton = 1;
                    iEndButton = 1;
                    iCurrentPage = 1;
                }
                else if (iPages < iPageCount) {
                    iStartButton = 1;
                    iEndButton = iPages;
                }
                else if (iCurrentPage <= iPageCountHalf) {
                    iStartButton = 1;
                    iEndButton = iPageCount;
                }
                else if (iCurrentPage >= (iPages - iPageCountHalf)) {
                    iStartButton = iPages - iPageCount + 1;
                    iEndButton = iPages;
                }
                else {
                    iStartButton = iCurrentPage - Math.ceil(iPageCount / 2) + 1;
                    iEndButton = iStartButton + iPageCount - 1;
                }

                /* Loop over each instance of the pager */
                for (i = 0, iLen = an.length ; i < iLen ; i++) {
                    nNode = an[i];
                    if (!nNode.hasChildNodes()) {
                        continue;
                    }

                    $('li', an[i]).remove();

                    $(nNode).append(
                        '<ul class = "pagination">' +
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageFirst + '"><a>' + oLang.sFirst + '</a></li>' +
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPagePrevious + '"><a>' + oLang.sPrevious + '</a></li>' +
                            //'<li><span></span><li>'+
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageNext + '"><a>' + oLang.sNext + '</a></li>' +
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageLast + '"><a>' + oLang.sLast + '</a></li>' +
                        '</ul>'
                    );
                    var els = $('a', nNode);
                    var nFirst = els[0],
                        nPrev = els[1],
                        nNext = els[2],
                        nLast = els[3];

                    oSets.oApi._fnBindAction(nFirst, { action: "first" }, fnClickHandler);
                    oSets.oApi._fnBindAction(nPrev, { action: "previous" }, fnClickHandler);
                    oSets.oApi._fnBindAction(nNext, { action: "next" }, fnClickHandler);
                    oSets.oApi._fnBindAction(nLast, { action: "last" }, fnClickHandler);

                    ///* Build the dynamic list */
                    for (var j = iStartButton ; j <= iEndButton ; j++) {
                        sClass = (j == oPaging.iPage + 1) ? 'class="active"' : '';
                        $('<li ' + sClass + '><a href="#">' + j + '</a></li>')
                            .insertBefore($('.next,.last', an[i])[0])
                            .bind('click', function (e) {
                                e.preventDefault();
                                oSets._iDisplayStart = (parseInt($('a', this).text(), 10) - 1) * oPaging.iLength;
                                var CurrentPageNo = $('a', this).text();
                                var oGridControl = new GridControl();
                                var _DynamicPage = new DynamicPage(oModel);
                                var GridLoadParameters = [];
                                for (var item in oModel.ControlConfigDict) {
                                    if (oModel.ControlConfigDict[item].ControlTypeName != "Label")
                                        GridLoadParameters.push(oModel.ControlConfigDict[item].ClientID)
                                }
                                var parameterToLoadData = _DynamicPage.GetLoadParameterList(GridLoadParameters);
                                parameterToLoadData = JSON.stringify(parameterToLoadData);
                                parameterToLoadData = { request: parameterToLoadData, PageSize: oSets._iDisplayLength, CurrentPage: CurrentPageNo, SortColumnName: oSets.aoColumns[oSets.aaSorting[0][0]].nTh.id, SortType: oSets.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending" };
                                parameterToLoadData = JSON.stringify(parameterToLoadData);

                                var result = GetDataSource(GridDataUrl, parameterToLoadData);

                                var startCnt = oSets._iDisplayStart;
                                var RowContent = "";
                                var RowCont = "";

                                for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                                    Data = [];
                                    //if (oSets.aoData[startCnt + itrCnt].nTr.innerHTML == "") {
                                    RowContent = "";
                                    var j = 0;
                                    for (var k = 0; k < MetaData.length; k++) {
                                        RowCont = "";
                                        if (MetaData[k].Visible != undefined) {
                                            if (MetaData[k].Visible == true) {
                                                if (MetaData[k].IsGroupColumn != true) {
                                                    oSets.aoColumns[j].bShowColumns = true;
                                                    if (MetaData[k].Visible && oSets.aoColumns[j].bVisible) {
                                                        RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k], result[itrCnt]);
                                                        //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                    }
                                                    j = j + 1;
                                                }
                                                if (MetaData[k].IsGroupColumn) {
                                                    if (MetaData[k].IsGroupColumn == true) {
                                                        for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                                            oSets.aoColumns[j].bShowColumns = true;
                                                            if (MetaData[k].SubColumns[i].Visible && oSets.aoColumns[j].bVisible) {
                                                                RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k].SubColumns[i], result[itrCnt]);
                                                                //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                            }
                                                            j = j + 1;
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                j = j + 1;
                                            }
                                        }
                                        oGridControl.GetDataClmn(RowCont, MetaData[k], result[itrCnt], Data);
                                    }
                                    if (oSets.aoData[startCnt + itrCnt] != undefined && oSets.aoData[startCnt + itrCnt] != null) {
                                        oSets.aoData[startCnt + itrCnt].nTr = null;
                                        oSets.aoData[startCnt + itrCnt]._aData = Data;
                                    }
                                }
                                oTable.fnDraw(false);
                            });
                    }

                    /* Update the permanent button's classes */
                    anButtons = nNode.getElementsByTagName('li');
                    anStatic = [
                        anButtons[0], anButtons[1],
                        anButtons[anButtons.length - 2], anButtons[anButtons.length - 1]
                    ];

                    $(anStatic).removeClass(oClasses.sPageButton + " " + oClasses.sPageButtonActive + " " + oClasses.sPageButtonStaticDisabled);
                    $([anStatic[0], anStatic[1]]).addClass(
                        (iCurrentPage == 1) ?
                            oClasses.sPageButtonStaticDisabled :
                            oClasses.sPageButton
                    );
                    $([anStatic[2], anStatic[3]]).addClass(
                        (iPages === 0 || iCurrentPage === iPages || oSets._iDisplayLength === -1) ?
                            oClasses.sPageButtonStaticDisabled :
                            oClasses.sPageButton
                    );
                }
            },
            "fnHeaderCallback": function (nHead, aData, iStart, iEnd, aiDisplay) {
                var oTable = $('.full-width').DataTable();
                var oSettings = oTable.fnSettings();
                if (oSettings.bColumnVisible) {
                    var j = 0, IsDefaultSort = 0;
                    for (var k = 0; k < MetaData.length; k++) {
                        if (MetaData[k].Visible != undefined) {
                            if (MetaData[k].Visible == true) {
                                if (MetaData[k].IsGroupColumn != true) {
                                    oSettings.aoColumns[j].bShowColumns = true;
                                    if (!MetaData[k].ColumnDefaultVisible)
                                        oTable.fnSetColumnVis(j, false);
                                    oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                    if (!MetaData[k].Sortable)
                                        oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                    j = j + 1;
                                }
                                if (MetaData[k].IsGroupColumn) {
                                    if (MetaData[k].IsGroupColumn == true) {
                                        for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                            if (MetaData[k].SubColumns[i].IsGroupColumn) {
                                                j = groupColumnSortingApply(MetaData[k].SubColumns[i].SubColumns, j, oTable, oSettings);
                                            }
                                            else {
                                                oSettings.aoColumns[j].bShowColumns = true;
                                                if (!MetaData[k].SubColumns[i].ColumnDefaultVisible)
                                                    oTable.fnSetColumnVis(j, false);
                                                oSettings.aoColumns[j].bSortable = MetaData[k].SubColumns[i].Sortable;
                                                if (!MetaData[k].SubColumns[i].Sortable)
                                                    oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                                j = j + 1;
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                oTable.fnSetColumnVis(j, false);
                                oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                oSettings.aoColumns[j].bShowColumns = false;
                                if (!MetaData[k].Sortable)
                                    oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                j = j + 1;
                            }
                        }
                    }
                }
                if (ColVis != undefined) {
                    ColVis.fnRebuild();
                }
            },
            "fnInfoCallback": function (oSets, iStart, iEnd, iMax, iTotal, sOut) {
                //iEnd = (iStart - 1) + oSets._iDisplayLength
                var TotalCount = 0;
                if (TotalDc != 0)
                    TotalCount = TotalDc;
                if (iTotal === 0) {
                    /* Empty record set */
                    sOut = oSets.oLanguage.sInfoEmpty;
                }
                else {
                    /* Normal record set */
                    sOut = oSets.oLanguage.sInfo;
                }

                if (iTotal != iMax) {
                    /* Record set after filtering */
                    sOut += ' ' + oSets.oLanguage.sInfoFiltered;
                    TotalCount = iTotal;
                }

                // Convert the macros
                sOut += oSets.oLanguage.sInfoPostFix;
                sOut = sOut.replace(/_START_/g, iStart).
                    replace(/_END_/g, iEnd).
                    replace(/_TOTAL_/g, TotalCount).
                    replace(/_MAX_/g, iMax);
                return sOut;
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                //This is not realy necessary
                $(nRow).unbind('click');
                $(nRow).bind('click', function () {
                    var aPos = odtbasicTable.fnGetPosition(this);
                    var atData = odtbasicTable.fnGetData(aPos);

                    selected = [];
                    odtbasicTable.$('tr.row-selected').removeClass('row-selected');
                    $('input', odtbasicTable.fnGetNodes()).each(function () {
                        this.checked = false;
                    });

                    $(this).addClass('row-selected');
                    if (selected.indexOf(atData[0]) == -1)
                        selected.push(atData[0]);
                    var checkBox = document.getElementById("Chk_" + atData[0]);
                    if (checkBox != undefined && checkBox != null) {
                        checkBox.checked = true;
                    }

                    var _DynamicPage = null;
                    var GridLoadParameters = [];
                    var model = null;
                    var lcontrolConfigDict = null;
                    if (oModel._HTMLPageConfigLst != undefined) {
                        for (var i = 0; i < oModel._HTMLPageConfigLst.length; i++) {
                            model = oModel._HTMLPageConfigLst[i];
                            if (lcontrolConfigDict != null) {
                                for (var item in model.ControlConfigDict) {
                                    lcontrolConfigDict[item] = model.ControlConfigDict[item];
                                }
                                model.ControlConfigDict = lcontrolConfigDict;
                            }
                            else {
                                lcontrolConfigDict = model.ControlConfigDict;
                            }
                        }
                    }
                    else {
                        model = oModel;
                    }
                    if (model != null) {
                        _DynamicPage = new DynamicPage(model);
                        if (model.ControlConfigDict != undefined) {
                            for (var item in model.ControlConfigDict) {
                                if (model.ControlConfigDict[item].ControlTypeName != "Label")
                                    GridLoadParameters.push(model.ControlConfigDict[item].ClientID)
                            }
                        }
                    }
                    if (GridLoadParameters.length > 0) {
                        var _ComboBox = new WiNAiMComboBox(model);
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[0]], atData[2]); //--OperationContext
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[5]], atData[4] == "false" ? 1 : 2); //--IsDcUser
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[6]], parseInt(atData[7]) > 0 ? 2 : (parseInt(atData[5]) > 0 ? 1 : 0)); //-- Role / User
                        /* Role */
                        controlConfig = model.ControlConfigDict[GridLoadParameters[7]];
                        _ComboBox.setData(controlConfig, atData[5]);
                        _ComboBox.onchange(controlConfig);
                        /* User */
                        controlConfig = model.ControlConfigDict[GridLoadParameters[8]];
                        _ComboBox.setData(controlConfig, atData[7]);

                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[9]], atData[9]); //--IsTeamWise
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[13]], atData[10] == "false" ? 1 : 2); //--IsDcDate
                        /* DCPlaceType */
                        controlConfig = model.ControlConfigDict[GridLoadParameters[10]];
                        _ComboBox.setData(controlConfig, atData[29]);
                        _ComboBox.onchange(controlConfig);
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[11]], atData[15]); //--Template
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[12]], atData[13]); //--Place
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[8]], atData[4] == true ? 2 : 1); //-- IsForDc
                        //-- _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[9]], atData[26]); IsForAction
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[15]], atData[22]); //--IsAnyValidPeriod
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[16]], (atData[27] + "," + atData[28])); //-- Validity Date
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[1]], atData[17]); //--IsUpperHier
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[2]], parseInt(atData[20]) > 0 ? 2 : (parseInt(atData[18]) > 0 ? 1 : 0)); //--Monitor Role / User
                        /* Monitor Role */
                        controlConfig = model.ControlConfigDict[GridLoadParameters[3]];
                        _ComboBox.setData(controlConfig, atData[18]);
                        _ComboBox.onchange(controlConfig);
                        /* Monitor User */
                        controlConfig = model.ControlConfigDict[GridLoadParameters[4]];
                        _ComboBox.setData(controlConfig, atData[20]);
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[14]], (atData[25] + "," + atData[26])); //--DcDate
                        //-- _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[3]], atData[9]);
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[17]], atData[0]); //--ObjectId
                    }
                });
            },
            "fnFooterCallback": function (nFoot, aData, iStart, iEnd, aiDisplay) {
                var oTable = $('.full-width').DataTable();
                var oTableDate = oTable.fnGetNodes();
                var oSettings = oTable.fnSettings();
                //iEnd = iStart + oSettings._iDisplayLength
                var itrCnt = 0;
                var diff = iEnd - iStart;
                if (diff != 0) {
                    for (var item in oTableDate) {
                        if (oTableDate[item]._DT_RowIndex >= iStart && oTableDate[item]._DT_RowIndex < iEnd) {
                            if ($('input', oTable.fnGetNodes(oTableDate[item]._DT_RowIndex)).length > 0) {
                                if ($('input', oTable.fnGetNodes(oTableDate[item]._DT_RowIndex))[0].checked == true)
                                    itrCnt = itrCnt + 1;
                            }
                        }
                    }
                    if (diff == itrCnt)
                        $('#selectall')[0].checked = true;
                    else
                        $('#selectall')[0].checked = false;
                }
            },
            "bAutoWidth": false
        });

        var nLength = document.getElementById('datatable_ApprovalProf_length');
        var oCommonMethodForGridInit = new CommonMethodForGridInit("datatable_ApprovalProf", oModel, GridConfigUrl, GridDataUrl);
        $('select', nLength).unbind();
        $('select', nLength).bind('change.DT', oCommonMethodForGridInit.PageCountChangeEventHandler);

        $('#selectall').click(function () {
            var itr = 0;
            if (this.checked == true) {
                $('input', odtbasicTable.fnGetNodes()).each(function () {
                    var aPos = odtbasicTable.fnGetPosition(this.parentElement.parentElement);
                    var atData = odtbasicTable.fnGetData(aPos);
                    if (this.parentElement.parentElement._DT_RowIndex >= odtbasicTable.fnSettings()._iDisplayStart && this.parentElement.parentElement._DT_RowIndex < odtbasicTable.fnSettings()._iDisplayEnd &&
                        odtbasicTable.fnSettings().aiDisplay.length == odtbasicTable.fnSettings().aoData.length) {
                        if (this.parentElement.parentElement.tagName == "TR") {
                            $(this.parentElement.parentElement).addClass('row-selected');
                            if (selected.indexOf(atData[0]) == -1)
                                selected.push(atData[0]);
                            this.checked = true;
                            $('input', odtbasicTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                        }
                    }
                    else if (itr < odtbasicTable.fnSettings()._iDisplayEnd && odtbasicTable.fnSettings().aiDisplay.length != odtbasicTable.fnSettings().aoData.length &&
                        odtbasicTable.fnSettings().aiDisplay.indexOf(this.parentElement.parentElement._DT_RowIndex) != -1) {
                        if (this.parentElement.parentElement.tagName == "TR") {
                            $(this.parentElement.parentElement).addClass('row-selected');
                            if (selected.indexOf(atData[0]) == -1)
                                selected.push(atData[0]);
                            this.checked = true;
                            $('input', odtbasicTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                        }
                    }
                    itr += 1;
                });
                if (document.getElementById("DcApprovalPage_Master_Default_ObjectId").value != "" && document.getElementById("DcApprovalPage_Master_Default_ObjectId").value != null && document.getElementById("DcApprovalPage_Master_Default_ObjectId").value != undefined)
                    document.getElementById("DcApprovalPage_Master_Default_ObjectId").value = "";
            }
            else {
                $('input', odtbasicTable.fnGetNodes()).each(function () {
                    var aPos = odtbasicTable.fnGetPosition(this.parentElement.parentElement);
                    var atData = odtbasicTable.fnGetData(aPos);
                    if (this.parentElement.parentElement._DT_RowIndex >= odtbasicTable.fnSettings()._iDisplayStart && this.parentElement.parentElement._DT_RowIndex < odtbasicTable.fnSettings()._iDisplayEnd &&
                        odtbasicTable.fnSettings().aiDisplay.length == odtbasicTable.fnSettings().aoData.length) {
                        this.checked = false;
                        if (this.parentElement.parentElement.tagName == "TR") {
                            if ($(this.parentElement.parentElement).hasClass('row-selected')) {
                                $(this.parentElement.parentElement).removeClass('row-selected');
                                var index = selected.indexOf(atData[0]);
                                if (index != -1)
                                    selected.splice(index, 1);
                            }
                        }
                        $('input', odtbasicTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                    }
                    else if (itr < odtbasicTable.fnSettings()._iDisplayEnd && odtbasicTable.fnSettings().aiDisplay.length != odtbasicTable.fnSettings().aoData.length &&
                        odtbasicTable.fnSettings().aiDisplay.indexOf(this.parentElement.parentElement._DT_RowIndex) != -1) {
                        this.checked = false;
                        if (this.parentElement.parentElement.tagName == "TR") {
                            if ($(this.parentElement.parentElement).hasClass('row-selected')) {
                                $(this.parentElement.parentElement).removeClass('row-selected');
                                var index = selected.indexOf(atData[0]);
                                if (index != -1)
                                    selected.splice(index, 1);
                            }
                        }
                        $('input', odtbasicTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                    }
                    itr += 1;
                });
                if (document.getElementById("DcApprovalPage_Master_Default_ObjectId").value != "" && document.getElementById("DcApprovalPage_Master_Default_ObjectId").value != null && document.getElementById("DcApprovalPage_Master_Default_ObjectId").value != undefined)
                    document.getElementById("DcApprovalPage_Master_Default_ObjectId").value = "";
            }
        });
    }

    //--DataCapture Profile Grid Initialize function.
    this.DataCaptureProfileGridInit = function (GridConfigUrl, GridDataUrl, oModel) {
        selected = [];

        var odtbasicTable = $('#datatable_ApprovalProf').dataTable({
            "sPaginationType": "full_numbers",
            "sDom": "<'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>lf>r<'dt-wrapper't><'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>",//'<'toolbar'>frtip'",
            "fnInitComplete": function (oSettings, json) {
                $('.ColVis_Button').addClass('btn btn-default btn-sm').html('Hide / Show <i class="icon-arrow-down"></i>');
                $(this).closest('#dt_table_tools_wrapper').find('.DTTT.btn-group').addClass('table_tools_group').children('a.btn').each(function () {
                    $(this).addClass('btn-sm btn-default');
                });
            },
            "iDisplayLength": 10,
            "aLengthMenu": [5, 10, 25, 50, 100, 500, 1000],
            "aoColumnDefs": [],//{ 'bVisible': false, 'aTargets': [0], "bAutoWidth": false }, { 'bVisible': false, 'aTargets': [2], "bAutoWidth": false }
            "fnDrawCallback": function (oSets, fnCallbackDraw) {
                var oTable = $('#datatable_ApprovalProf').DataTable();

                if (TotalDc != oSets.aoData.length) {
                    var datalength = oSets.aiDisplay.length;
                    //oSets.aiDisplay.remove(0, oTable.fnSettings().aiDisplay.length);

                    for (var itrCnt = datalength; itrCnt < TotalDc; itrCnt++) {
                        oSets.aiDisplay.push(itrCnt);
                    }
                }

                var Data = [];

                if (TotalDc != oSets.aoData.length) {
                    var datalength = oSets.aoData.length;
                    for (var itrCntj = 0; itrCntj < oSets.aoColumns.length; itrCntj++) {
                        Data.push("");
                    }

                    for (var itrCnt = datalength; itrCnt < TotalDc; itrCnt++) {
                        fnAddData_Modified(oTable, oSets, Data, false);
                        //oSets.aoData[itrCnt].nTr.innerHTML = "";
                    }
                }

                var iPageCount = oTable.dataTableExt.oPagination.iFullNumbersShowPages;
                var iPageCountHalf = Math.floor(iPageCount / 2);
                var iPages = Math.ceil(TotalDc / oSets._iDisplayLength);
                var iCurrentPage = Math.ceil(oSets._iDisplayStart / oSets._iDisplayLength) + 1;
                var sList = "";
                var iStartButton, iEndButton, i, iLen;
                var oClasses = oSets.oClasses;
                var anButtons, anStatic, nPaginateList, nNode;
                var an = oSets.aanFeatures.p;
                var oPaging = oSets.oInstance.fnPagingInfo();
                var oLang = oSets.oLanguage.oPaginate;
                var fnClickHandler = function (e) {
                    if (oSets.oApi._fnPageChange(oSets, e.data.action)) {
                        var CurrentPageNo = 0;
                        if (e.data.action == "previous")
                            CurrentPageNo = iCurrentPage - 1;
                        else if (e.data.action == "next")
                            CurrentPageNo = iCurrentPage + 1;
                        else if (e.data.action == "first")
                            CurrentPageNo = 1;
                        else if (e.data.action == "last")
                            CurrentPageNo = iPages;
                        var oGridControl = new GridControl();
                        var _DynamicPage = new DynamicPage(oModel);
                        var params = GetParameter(GridConfigUrl, oModel);
                        var PageParam = [];
                        var parameterToLoadData = null;
                        if (params.length > 0 && params.length > 1) {
                            PageParam = params[0];
                            parameterToLoadData = params[1];
                        }
                        parameterToLoadData = JSON.stringify(PageParam);
                        parameterToLoadData = { request: parameterToLoadData, PageSize: oSets._iDisplayLength, CurrentPage: CurrentPageNo, SortColumnName: oSets.aoColumns[oSets.aaSorting[0][0]].nTh.id, SortType: oSets.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending" };
                        parameterToLoadData = JSON.stringify(parameterToLoadData);

                        var result = GetDataSource(GridDataUrl, parameterToLoadData);

                        var startCnt = oSets._iDisplayStart;
                        var RowContent = "";
                        var RowCont = "";

                        for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                            Data = [];
                            //if (oSets.aoData[startCnt + itrCnt].nTr.innerHTML == "") {
                            RowContent = "";
                            var j = 0;
                            for (var k = 0; k < MetaData.length; k++) {
                                RowCont = "";
                                if (MetaData[k].Visible != undefined) {
                                    if (MetaData[k].Visible == true) {
                                        if (MetaData[k].IsGroupColumn != true) {
                                            oSets.aoColumns[j].bShowColumns = true;
                                            if (MetaData[k].Visible && oSets.aoColumns[j].bVisible) {
                                                RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k], result[itrCnt]);
                                                //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                            }
                                            j = j + 1;
                                        }
                                        if (MetaData[k].IsGroupColumn) {
                                            if (MetaData[k].IsGroupColumn == true) {
                                                for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                                    oSets.aoColumns[j].bShowColumns = true;
                                                    if (MetaData[k].SubColumns[i].Visible && oSets.aoColumns[j].bVisible) {
                                                        RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k].SubColumns[i], result[itrCnt]);
                                                        //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                    }
                                                    j = j + 1;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        j = j + 1;
                                    }
                                }
                                oGridControl.GetDataClmn(RowCont, MetaData[k], result[itrCnt], Data);
                            }
                            if (oSets.aoData[startCnt + itrCnt] != undefined && oSets.aoData[startCnt + itrCnt] != null) {
                                oSets.aoData[startCnt + itrCnt].nTr = null;
                                oSets.aoData[startCnt + itrCnt]._aData = Data;
                            }
                        }
                        oTable.fnDraw(false);
                    }
                };

                /* Pages calculation */
                if (oSets._iDisplayLength === -1) {
                    iStartButton = 1;
                    iEndButton = 1;
                    iCurrentPage = 1;
                }
                else if (iPages < iPageCount) {
                    iStartButton = 1;
                    iEndButton = iPages;
                }
                else if (iCurrentPage <= iPageCountHalf) {
                    iStartButton = 1;
                    iEndButton = iPageCount;
                }
                else if (iCurrentPage >= (iPages - iPageCountHalf)) {
                    iStartButton = iPages - iPageCount + 1;
                    iEndButton = iPages;
                }
                else {
                    iStartButton = iCurrentPage - Math.ceil(iPageCount / 2) + 1;
                    iEndButton = iStartButton + iPageCount - 1;
                }

                /* Loop over each instance of the pager */
                for (i = 0, iLen = an.length ; i < iLen ; i++) {
                    nNode = an[i];
                    if (!nNode.hasChildNodes()) {
                        continue;
                    }

                    $('li', an[i]).remove();

                    $(nNode).append(
                        '<ul class = "pagination">' +
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageFirst + '"><a>' + oLang.sFirst + '</a></li>' +
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPagePrevious + '"><a>' + oLang.sPrevious + '</a></li>' +
                            //'<li><span></span><li>'+
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageNext + '"><a>' + oLang.sNext + '</a></li>' +
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageLast + '"><a>' + oLang.sLast + '</a></li>' +
                        '</ul>'
                    );
                    var els = $('a', nNode);
                    var nFirst = els[0],
                        nPrev = els[1],
                        nNext = els[2],
                        nLast = els[3];

                    oSets.oApi._fnBindAction(nFirst, { action: "first" }, fnClickHandler);
                    oSets.oApi._fnBindAction(nPrev, { action: "previous" }, fnClickHandler);
                    oSets.oApi._fnBindAction(nNext, { action: "next" }, fnClickHandler);
                    oSets.oApi._fnBindAction(nLast, { action: "last" }, fnClickHandler);

                    ///* Build the dynamic list */
                    for (var j = iStartButton ; j <= iEndButton ; j++) {
                        sClass = (j == oPaging.iPage + 1) ? 'class="active"' : '';
                        $('<li ' + sClass + '><a href="#">' + j + '</a></li>')
                            .insertBefore($('.next,.last', an[i])[0])
                            .bind('click', function (e) {
                                e.preventDefault();
                                oSets._iDisplayStart = (parseInt($('a', this).text(), 10) - 1) * oPaging.iLength;
                                var CurrentPageNo = $('a', this).text();
                                var oGridControl = new GridControl();
                                var _DynamicPage = new DynamicPage(oModel);
                                var params = GetParameter(GridConfigUrl, oModel);
                                var PageParam = [];
                                var parameterToLoadData = null;
                                if (params.length > 0 && params.length > 1) {
                                    PageParam = params[0];
                                    parameterToLoadData = params[1];
                                }
                                parameterToLoadData = JSON.stringify(PageParam);
                                parameterToLoadData = { request: parameterToLoadData, PageSize: oSets._iDisplayLength, CurrentPage: CurrentPageNo, SortColumnName: oSets.aoColumns[oSets.aaSorting[0][0]].nTh.id, SortType: oSets.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending" };
                                parameterToLoadData = JSON.stringify(parameterToLoadData);

                                var result = GetDataSource(GridDataUrl, parameterToLoadData);

                                var startCnt = oSets._iDisplayStart;
                                var RowContent = "";
                                var RowCont = "";

                                for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                                    Data = [];
                                    //if (oSets.aoData[startCnt + itrCnt].nTr.innerHTML == "") {
                                    RowContent = "";
                                    var j = 0;
                                    for (var k = 0; k < MetaData.length; k++) {
                                        RowCont = "";
                                        if (MetaData[k].Visible != undefined) {
                                            if (MetaData[k].Visible == true) {
                                                if (MetaData[k].IsGroupColumn != true) {
                                                    oSets.aoColumns[j].bShowColumns = true;
                                                    if (MetaData[k].Visible && oSets.aoColumns[j].bVisible) {
                                                        RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k], result[itrCnt]);
                                                        //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                    }
                                                    j = j + 1;
                                                }
                                                if (MetaData[k].IsGroupColumn) {
                                                    if (MetaData[k].IsGroupColumn == true) {
                                                        for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                                            oSets.aoColumns[j].bShowColumns = true;
                                                            if (MetaData[k].SubColumns[i].Visible && oSets.aoColumns[j].bVisible) {
                                                                RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k].SubColumns[i], result[itrCnt]);
                                                                //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                            }
                                                            j = j + 1;
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                j = j + 1;
                                            }
                                        }
                                        oGridControl.GetDataClmn(RowCont, MetaData[k], result[itrCnt], Data);
                                    }
                                    if (oSets.aoData[startCnt + itrCnt] != undefined && oSets.aoData[startCnt + itrCnt] != null) {
                                        oSets.aoData[startCnt + itrCnt].nTr = null;
                                        oSets.aoData[startCnt + itrCnt]._aData = Data;
                                    }
                                }
                                oTable.fnDraw(false);
                            });
                    }

                    /* Update the permanent button's classes */
                    anButtons = nNode.getElementsByTagName('li');
                    anStatic = [
                        anButtons[0], anButtons[1],
                        anButtons[anButtons.length - 2], anButtons[anButtons.length - 1]
                    ];

                    $(anStatic).removeClass(oClasses.sPageButton + " " + oClasses.sPageButtonActive + " " + oClasses.sPageButtonStaticDisabled);
                    $([anStatic[0], anStatic[1]]).addClass(
                        (iCurrentPage == 1) ?
                            oClasses.sPageButtonStaticDisabled :
                            oClasses.sPageButton
                    );
                    $([anStatic[2], anStatic[3]]).addClass(
                        (iPages === 0 || iCurrentPage === iPages || oSets._iDisplayLength === -1) ?
                            oClasses.sPageButtonStaticDisabled :
                            oClasses.sPageButton
                    );
                }
            },
            "fnHeaderCallback": function (nHead, aData, iStart, iEnd, aiDisplay) {
                var oTable = $('#datatable_ApprovalProf').DataTable();
                var oSettings = oTable.fnSettings();
                if (oSettings.bColumnVisible) {
                    var j = 0, IsDefaultSort = 0;
                    for (var k = 0; k < MetaData.length; k++) {
                        if (MetaData[k].Visible != undefined) {
                            if (MetaData[k].Visible == true) {
                                if (MetaData[k].IsGroupColumn != true) {
                                    oSettings.aoColumns[j].bShowColumns = true;
                                    if (!MetaData[k].ColumnDefaultVisible)
                                        oTable.fnSetColumnVis(j, false);
                                    oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                    if (!MetaData[k].Sortable)
                                        oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                    j = j + 1;
                                }
                                if (MetaData[k].IsGroupColumn) {
                                    if (MetaData[k].IsGroupColumn == true) {
                                        for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                            if (MetaData[k].SubColumns[i].IsGroupColumn) {
                                                j = groupColumnSortingApply(MetaData[k].SubColumns[i].SubColumns, j, oTable, oSettings);
                                            }
                                            else {
                                                oSettings.aoColumns[j].bShowColumns = true;
                                                if (!MetaData[k].SubColumns[i].ColumnDefaultVisible)
                                                    oTable.fnSetColumnVis(j, false);
                                                oSettings.aoColumns[j].bSortable = MetaData[k].SubColumns[i].Sortable;
                                                if (!MetaData[k].SubColumns[i].Sortable)
                                                    oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                                j = j + 1;
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                oTable.fnSetColumnVis(j, false);
                                oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                oSettings.aoColumns[j].bShowColumns = false;
                                if (!MetaData[k].Sortable)
                                    oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                j = j + 1;
                            }
                        }
                    }
                }
                if (ColVis != undefined) {
                    ColVis.fnRebuild();
                }
            },
            "fnInfoCallback": function (oSets, iStart, iEnd, iMax, iTotal, sOut) {
                //iEnd = (iStart - 1) + oSets._iDisplayLength
                var TotalCount = 0;
                if (TotalDc != 0)
                    TotalCount = TotalDc;
                if (iTotal === 0) {
                    /* Empty record set */
                    sOut = oSets.oLanguage.sInfoEmpty;
                }
                else {
                    /* Normal record set */
                    sOut = oSets.oLanguage.sInfo;
                }

                if (iTotal != iMax) {
                    /* Record set after filtering */
                    sOut += ' ' + oSets.oLanguage.sInfoFiltered;
                    TotalCount = iTotal;
                }

                // Convert the macros
                sOut += oSets.oLanguage.sInfoPostFix;
                sOut = sOut.replace(/_START_/g, iStart).
                    replace(/_END_/g, iEnd).
                    replace(/_TOTAL_/g, TotalCount).
                    replace(/_MAX_/g, iMax);
                return sOut;
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                //This is not realy necessary
                $(nRow).unbind('click');
                $(nRow).bind('click', function () {
                    var aPos = odtbasicTable.fnGetPosition(this);
                    var atData = odtbasicTable.fnGetData(aPos);

                    selected = [];
                    odtbasicTable.$('tr.row-selected').removeClass('row-selected');
                    $('input', odtbasicTable.fnGetNodes()).each(function () {
                        this.checked = false;
                    });

                    $(this).addClass('row-selected');
                    if (selected.indexOf(atData[0]) == -1)
                        selected.push(atData[0]);
                    var checkBox = document.getElementById("Chk_" + atData[0]);
                    if (checkBox != undefined && checkBox != null) {
                        checkBox.checked = true;
                    }

                    var _DynamicPage = null;
                    var GridLoadParameters = [];
                    var model = ModelUpdate;
                    if (model != null) {
                        _DynamicPage = new DynamicPage(model);
                        if (model.ControlConfigDict != undefined) {
                            for (var item in model.ControlConfigDict) {
                                if (model.ControlConfigDict[item].ControlTypeName != "Label")
                                    GridLoadParameters.push(model.ControlConfigDict[item].ClientID)
                            }
                        }
                    }
                    if (GridLoadParameters.length > 0) {
                        var _ComboBox = new WiNAiMComboBox(model);
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[0]], atData[2]);
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[1]], parseInt(atData[6]) > 0 ? 2 : (parseInt(atData[4]) > 0 ? 1 : 0));
                        /* Role */
                        controlConfig = model.ControlConfigDict[GridLoadParameters[2]];
                        _ComboBox.setData(controlConfig, atData[4]);
                        _ComboBox.onchange(controlConfig);
                        /* User */
                        controlConfig = model.ControlConfigDict[GridLoadParameters[3]];
                        _ComboBox.setData(controlConfig, atData[6]);
                        /* Dimension */
                        controlConfig = model.ControlConfigDict[GridLoadParameters[4]];
                        _ComboBox.setData(controlConfig, atData[12]);
                        _ComboBox.onchange(controlConfig);
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[5]], atData[10]);
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[6]], atData[8]);
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[3]], atData[9]);
                        _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[7]], atData[0]);
                    }
                });
            },
            "fnFooterCallback": function (nFoot, aData, iStart, iEnd, aiDisplay) {
                var oTable = $('.full-width').DataTable();
                var oTableDate = oTable.fnGetNodes();
                var oSettings = oTable.fnSettings();
                //iEnd = iStart + oSettings._iDisplayLength
                var itrCnt = 0;
                var diff = iEnd - iStart;
                if (diff != 0) {
                    for (var item in oTableDate) {
                        if (oTableDate[item]._DT_RowIndex >= iStart && oTableDate[item]._DT_RowIndex < iEnd) {
                            if ($('input', oTable.fnGetNodes(oTableDate[item]._DT_RowIndex)).length > 0) {
                                if ($('input', oTable.fnGetNodes(oTableDate[item]._DT_RowIndex))[0].checked == true)
                                    itrCnt = itrCnt + 1;
                            }
                        }
                    }
                    if (diff == itrCnt)
                        $('#selectall')[0].checked = true;
                    else
                        $('#selectall')[0].checked = false;
                }
            },
            "bAutoWidth": false
        });

        var nLength = document.getElementById('datatable_ApprovalProf_length');
        var oCommonMethodForGridInit = new CommonMethodForGridInit("datatable_ApprovalProf", oModel, GridConfigUrl, GridDataUrl);
        $('select', nLength).unbind();
        $('select', nLength).bind('change.DT', oCommonMethodForGridInit.PageCountChangeEventHandler);

        $('#selectall').click(function () {
            var itr = 0;
            if (this.checked == true) {
                $('input', odtbasicTable.fnGetNodes()).each(function () {
                    var aPos = odtbasicTable.fnGetPosition(this.parentElement.parentElement);
                    var atData = odtbasicTable.fnGetData(aPos);
                    if (this.parentElement.parentElement._DT_RowIndex >= odtbasicTable.fnSettings()._iDisplayStart && this.parentElement.parentElement._DT_RowIndex < odtbasicTable.fnSettings()._iDisplayEnd &&
                        odtbasicTable.fnSettings().aiDisplay.length == odtbasicTable.fnSettings().aoData.length) {
                        if (this.parentElement.parentElement.tagName == "TR") {
                            $(this.parentElement.parentElement).addClass('row-selected');
                            if (selected.indexOf(atData[0]) == -1)
                                selected.push(atData[0]);
                            this.checked = true;
                            $('input', odtbasicTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                        }
                    }
                    else if (itr < odtbasicTable.fnSettings()._iDisplayEnd && odtbasicTable.fnSettings().aiDisplay.length != odtbasicTable.fnSettings().aoData.length &&
                        odtbasicTable.fnSettings().aiDisplay.indexOf(this.parentElement.parentElement._DT_RowIndex) != -1) {
                        if (this.parentElement.parentElement.tagName == "TR") {
                            $(this.parentElement.parentElement).addClass('row-selected');
                            if (selected.indexOf(atData[0]) == -1)
                                selected.push(atData[0]);
                            this.checked = true;
                            $('input', odtbasicTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                        }
                    }
                    itr += 1;
                });
                if (document.getElementById("ObjectId").value != "" && document.getElementById("ObjectId").value != null && document.getElementById("ObjectId").value != undefined)
                    document.getElementById("ObjectId").value = "";
            }
            else {
                $('input', odtbasicTable.fnGetNodes()).each(function () {
                    var aPos = odtbasicTable.fnGetPosition(this.parentElement.parentElement);
                    var atData = odtbasicTable.fnGetData(aPos);
                    if (this.parentElement.parentElement._DT_RowIndex >= odtbasicTable.fnSettings()._iDisplayStart && this.parentElement.parentElement._DT_RowIndex < odtbasicTable.fnSettings()._iDisplayEnd &&
                        odtbasicTable.fnSettings().aiDisplay.length == odtbasicTable.fnSettings().aoData.length) {
                        this.checked = false;
                        if (this.parentElement.parentElement.tagName == "TR") {
                            if ($(this.parentElement.parentElement).hasClass('row-selected')) {
                                $(this.parentElement.parentElement).removeClass('row-selected');
                                var index = selected.indexOf(atData[0]);
                                if (index != -1)
                                    selected.splice(index, 1);
                            }
                        }
                        $('input', odtbasicTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                    }
                    else if (itr < odtbasicTable.fnSettings()._iDisplayEnd && odtbasicTable.fnSettings().aiDisplay.length != odtbasicTable.fnSettings().aoData.length &&
                        odtbasicTable.fnSettings().aiDisplay.indexOf(this.parentElement.parentElement._DT_RowIndex) != -1) {
                        this.checked = false;
                        if (this.parentElement.parentElement.tagName == "TR") {
                            if ($(this.parentElement.parentElement).hasClass('row-selected')) {
                                $(this.parentElement.parentElement).removeClass('row-selected');
                                var index = selected.indexOf(atData[0]);
                                if (index != -1)
                                    selected.splice(index, 1);
                            }
                        }
                        $('input', odtbasicTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                    }
                    itr += 1;
                });
                if (document.getElementById("ObjectId").value != "" && document.getElementById("ObjectId").value != null && document.getElementById("ObjectId").value != undefined)
                    document.getElementById("ObjectId").value = "";
            }
        });
    }

    //--Sample Planning Grid Initialize function.
    this.SamplePlanningGridInit = function (GridConfigUrl, GridDataUrl, parameter) {
        selected = [];

        var odtbasicTable = $('#datatable_ApprovalProf').dataTable({
            "sPaginationType": "full_numbers",
            "sDom": "<'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>l>r<'dt-wrapper't><'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>",//'<'toolbar'>frtip'",
            "fnInitComplete": function (oSettings, json) {
                $('.ColVis_Button').addClass('btn btn-default btn-sm').html('Hide / Show <i class="icon-arrow-down"></i>');
                $(this).closest('#dt_table_tools_wrapper').find('.DTTT.btn-group').addClass('table_tools_group').children('a.btn').each(function () {
                    $(this).addClass('btn-sm btn-default');
                });
            },
            "iDisplayLength": 10,
            //"fnHeaderCallback": function (nHead, aData, iStart, iEnd, aiDisplay) {
            //    var oTable = $('.full-width').DataTable();
            //    var oSettings = oTable.fnSettings();
            //    var j = 0;
            //    for (var k = 0; k < MetaData.length; k++) {
            //        if (MetaData[k].Visible != undefined) {
            //            if (MetaData[k].Visible == true) {
            //                if (MetaData[k].IsGroupColumn != true) {
            //                    oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
            //                    if (!MetaData[k].Sortable)
            //                        oSettings.aoColumns[j].nTh.className = "sorting_disabled";
            //                    j = j + 1;
            //                }
            //                if (MetaData[k].IsGroupColumn) {
            //                    if (MetaData[k].IsGroupColumn == true) {
            //                        for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
            //                            oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
            //                            if (!MetaData[k].Sortable)
            //                                oSettings.aoColumns[j].nTh.className = "sorting_disabled";
            //                            j = j + 1;
            //                        }
            //                    }
            //                }
            //            }
            //            else {
            //                oTable.fnSetColumnVis(j, false);
            //                oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
            //                if (!MetaData[k].Sortable)
            //                    oSettings.aoColumns[j].nTh.className = "sorting_disabled";
            //                j = j + 1;
            //            }
            //        }
            //    }
            //},
            "aaSorting" : [],
            "aoColumnDefs": [],//{ 'bVisible': false, 'aTargets': [0], "bAutoWidth": false }, { 'bVisible': false, 'aTargets': [2], "bAutoWidth": false }
            "fnDrawCallback": function (oSets, fnCallbackDraw) {
                var oTable = $('#datatable_ApprovalProf').DataTable();

                if (TotalDc != oSets.aoData.length) {
                    var datalength = oSets.aiDisplay.length;
                    //oSets.aiDisplay.remove(0, oTable.fnSettings().aiDisplay.length);

                    for (var itrCnt = datalength; itrCnt < TotalDc; itrCnt++) {
                        oSets.aiDisplay.push(itrCnt);
                    }
                }

                var Data = [];

                if (TotalDc != oSets.aoData.length) {
                    var datalength = oSets.aoData.length;
                    for (var itrCntj = 0; itrCntj < oSets.aoColumns.length; itrCntj++) {
                        Data.push("");
                    }

                    for (var itrCnt = datalength; itrCnt < TotalDc; itrCnt++) {
                        fnAddData_Modified(oTable, oSets, Data, false);
                        //oSets.aoData[itrCnt].nTr.innerHTML = "";
                    }
                }

                var iPageCount = oTable.dataTableExt.oPagination.iFullNumbersShowPages;
                var iPageCountHalf = Math.floor(iPageCount / 2);
                var iPages = Math.ceil(TotalDc / oSets._iDisplayLength);
                var iCurrentPage = Math.ceil(oSets._iDisplayStart / oSets._iDisplayLength) + 1;
                var sList = "";
                var iStartButton, iEndButton, i, iLen;
                var oClasses = oSets.oClasses;
                var anButtons, anStatic, nPaginateList, nNode;
                var an = oSets.aanFeatures.p;
                var oPaging = oSets.oInstance.fnPagingInfo();
                var oLang = oSets.oLanguage.oPaginate;
                var fnClickHandler = function (e) {
                    if (oSets.oApi._fnPageChange(oSets, e.data.action)) {
                        var CurrentPageNo = 0;
                        if (e.data.action == "previous")
                            CurrentPageNo = iCurrentPage - 1;
                        else if (e.data.action == "next")
                            CurrentPageNo = iCurrentPage + 1;
                        else if (e.data.action == "first")
                            CurrentPageNo = 1;
                        else if (e.data.action == "last")
                            CurrentPageNo = iPages;
                        var oGridControl = new GridControl();
                        var parameterToLoadData = {};
                        var PageParam = {};
                        if (parameter.length > 0) {
                            if (parameter[1] != undefined)
                                parameterToLoadData = parameter[1];
                            if (parameter[0] != undefined)
                                PageParam = parameter[0];
                        }
                        parameterToLoadData = JSON.stringify(PageParam);
                        parameterToLoadData = { request: parameterToLoadData, PageSize: oSets._iDisplayLength, CurrentPage: CurrentPageNo, SortColumnName: "", SortType: "" };
                        parameterToLoadData = JSON.stringify(parameterToLoadData);

                        var result = GetDataSource(GridDataUrl, parameterToLoadData);

                        var startCnt = oSets._iDisplayStart;
                        var RowContent = "";
                        var RowCont = "";

                        for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                            Data = [];
                            //if (oSets.aoData[startCnt + itrCnt].nTr.innerHTML == "") {
                            RowContent = "";
                            var j = 0;
                            for (var k = 0; k < MetaData.length; k++) {
                                RowCont = "";
                                if (MetaData[k].Visible != undefined) {
                                    if (MetaData[k].Visible == true) {
                                        if (MetaData[k].IsGroupColumn != true) {
                                            oSets.aoColumns[j].bShowColumns = true;
                                            if (MetaData[k].Visible && oSets.aoColumns[j].bVisible) {
                                                RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k], result[itrCnt]);
                                                //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                            }
                                            j = j + 1;
                                        }
                                        if (MetaData[k].IsGroupColumn) {
                                            if (MetaData[k].IsGroupColumn == true) {
                                                for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                                    oSets.aoColumns[j].bShowColumns = true;
                                                    if (MetaData[k].SubColumns[i].Visible && oSets.aoColumns[j].bVisible) {
                                                        RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k].SubColumns[i], result[itrCnt]);
                                                        //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                    }
                                                    j = j + 1;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        j = j + 1;
                                    }
                                }
                                oGridControl.GetDataClmn(RowCont, MetaData[k], result[itrCnt], Data);
                            }
                            if (oSets.aoData[startCnt + itrCnt] != undefined && oSets.aoData[startCnt + itrCnt] != null) {
                                oSets.aoData[startCnt + itrCnt].nTr = null;
                                oSets.aoData[startCnt + itrCnt]._aData = Data;
                            }
                        }
                        oTable.fnDraw(false);
                    }
                };

                /* Pages calculation */
                if (oSets._iDisplayLength === -1) {
                    iStartButton = 1;
                    iEndButton = 1;
                    iCurrentPage = 1;
                }
                else if (iPages < iPageCount) {
                    iStartButton = 1;
                    iEndButton = iPages;
                }
                else if (iCurrentPage <= iPageCountHalf) {
                    iStartButton = 1;
                    iEndButton = iPageCount;
                }
                else if (iCurrentPage >= (iPages - iPageCountHalf)) {
                    iStartButton = iPages - iPageCount + 1;
                    iEndButton = iPages;
                }
                else {
                    iStartButton = iCurrentPage - Math.ceil(iPageCount / 2) + 1;
                    iEndButton = iStartButton + iPageCount - 1;
                }

                /* Loop over each instance of the pager */
                for (i = 0, iLen = an.length ; i < iLen ; i++) {
                    nNode = an[i];
                    if (!nNode.hasChildNodes()) {
                        continue;
                    }

                    $('li', an[i]).remove();

                    $(nNode).append(
                        '<ul class = "pagination">' +
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageFirst + '"><a>' + oLang.sFirst + '</a></li>' +
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPagePrevious + '"><a>' + oLang.sPrevious + '</a></li>' +
                            //'<li><span></span><li>'+
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageNext + '"><a>' + oLang.sNext + '</a></li>' +
                            '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageLast + '"><a>' + oLang.sLast + '</a></li>' +
                        '</ul>'
                    );
                    var els = $('a', nNode);
                    var nFirst = els[0],
                        nPrev = els[1],
                        nNext = els[2],
                        nLast = els[3];

                    oSets.oApi._fnBindAction(nFirst, { action: "first" }, fnClickHandler);
                    oSets.oApi._fnBindAction(nPrev, { action: "previous" }, fnClickHandler);
                    oSets.oApi._fnBindAction(nNext, { action: "next" }, fnClickHandler);
                    oSets.oApi._fnBindAction(nLast, { action: "last" }, fnClickHandler);

                    ///* Build the dynamic list */
                    for (var j = iStartButton ; j <= iEndButton ; j++) {
                        sClass = (j == oPaging.iPage + 1) ? 'class="active"' : '';
                        $('<li ' + sClass + '><a href="#">' + j + '</a></li>')
                            .insertBefore($('.next,.last', an[i])[0])
                            .bind('click', function (e) {
                                e.preventDefault();
                                oSets._iDisplayStart = (parseInt($('a', this).text(), 10) - 1) * oPaging.iLength;
                                var CurrentPageNo = $('a', this).text();
                                var oGridControl = new GridControl();
                                var parameterToLoadData = {};
                                var PageParam = {};
                                if (parameter.length > 0) {
                                    if (parameter[1] != undefined)
                                        parameterToLoadData = parameter[1];
                                    if (parameter[0] != undefined)
                                        PageParam = parameter[0];
                                }
                                parameterToLoadData = JSON.stringify(PageParam);
                                parameterToLoadData = { request: parameterToLoadData, PageSize: oSets._iDisplayLength, CurrentPage: CurrentPageNo, SortColumnName: "", SortType: "" };
                                parameterToLoadData = JSON.stringify(parameterToLoadData);

                                var result = GetDataSource(GridDataUrl, parameterToLoadData);

                                var startCnt = oSets._iDisplayStart;
                                var RowContent = "";
                                var RowCont = "";

                                for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                                    Data = [];
                                    //if (oSets.aoData[startCnt + itrCnt].nTr.innerHTML == "") {
                                    RowContent = "";
                                    var j = 0;
                                    for (var k = 0; k < MetaData.length; k++) {
                                        RowCont = "";
                                        if (MetaData[k].Visible != undefined) {
                                            if (MetaData[k].Visible == true) {
                                                if (MetaData[k].IsGroupColumn != true) {
                                                    oSets.aoColumns[j].bShowColumns = true;
                                                    if (MetaData[k].Visible && oSets.aoColumns[j].bVisible) {
                                                        RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k], result[itrCnt]);
                                                        //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                    }
                                                    j = j + 1;
                                                }
                                                if (MetaData[k].IsGroupColumn) {
                                                    if (MetaData[k].IsGroupColumn == true) {
                                                        for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                                            oSets.aoColumns[j].bShowColumns = true;
                                                            if (MetaData[k].SubColumns[i].Visible && oSets.aoColumns[j].bVisible) {
                                                                RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k].SubColumns[i], result[itrCnt]);
                                                                //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                            }
                                                            j = j + 1;
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                j = j + 1;
                                            }
                                        }
                                        oGridControl.GetDataClmn(RowCont, MetaData[k], result[itrCnt], Data);
                                    }
                                    if (oSets.aoData[startCnt + itrCnt] != undefined && oSets.aoData[startCnt + itrCnt] != null) {
                                        oSets.aoData[startCnt + itrCnt].nTr = null;
                                        oSets.aoData[startCnt + itrCnt]._aData = Data;
                                    }
                                }
                                oTable.fnDraw(false);
                            });
                    }

                    /* Update the permanent button's classes */
                    anButtons = nNode.getElementsByTagName('li');
                    anStatic = [
                        anButtons[0], anButtons[1],
                        anButtons[anButtons.length - 2], anButtons[anButtons.length - 1]
                    ];

                    $(anStatic).removeClass(oClasses.sPageButton + " " + oClasses.sPageButtonActive + " " + oClasses.sPageButtonStaticDisabled);
                    $([anStatic[0], anStatic[1]]).addClass(
                        (iCurrentPage == 1) ?
                            oClasses.sPageButtonStaticDisabled :
                            oClasses.sPageButton
                    );
                    $([anStatic[2], anStatic[3]]).addClass(
                        (iPages === 0 || iCurrentPage === iPages || oSets._iDisplayLength === -1) ?
                            oClasses.sPageButtonStaticDisabled :
                            oClasses.sPageButton
                    );
                }
            },
            "fnHeaderCallback": function (nHead, aData, iStart, iEnd, aiDisplay) {
                var oTable = $('#datatable_ApprovalProf').DataTable();
                var oSettings = oTable.fnSettings();
                if (oSettings.bColumnVisible) {
                    var j = 0, IsDefaultSort = 0;
                    for (var k = 0; k < MetaData.length; k++) {
                        if (MetaData[k].Visible != undefined) {
                            if (MetaData[k].Visible == true) {
                                if (MetaData[k].IsGroupColumn != true) {
                                    oSettings.aoColumns[j].bShowColumns = true;
                                    if (!MetaData[k].ColumnDefaultVisible)
                                        oTable.fnSetColumnVis(j, false);
                                    oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                    if (!MetaData[k].Sortable)
                                        oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                    j = j + 1;
                                }
                                if (MetaData[k].IsGroupColumn) {
                                    if (MetaData[k].IsGroupColumn == true) {
                                        for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                            if (MetaData[k].SubColumns[i].IsGroupColumn) {
                                                j = groupColumnSortingApply(MetaData[k].SubColumns[i].SubColumns, j, oTable, oSettings);
                                            }
                                            else {
                                                oSettings.aoColumns[j].bShowColumns = true;
                                                if (!MetaData[k].SubColumns[i].ColumnDefaultVisible)
                                                    oTable.fnSetColumnVis(j, false);
                                                oSettings.aoColumns[j].bSortable = MetaData[k].SubColumns[i].Sortable;
                                                if (!MetaData[k].SubColumns[i].Sortable)
                                                    oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                                j = j + 1;
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                oTable.fnSetColumnVis(j, false);
                                oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                oSettings.aoColumns[j].bShowColumns = false;
                                if (!MetaData[k].Sortable)
                                    oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                j = j + 1;
                            }
                        }
                    }
                }
                if (ColVis != undefined) {
                    ColVis.fnRebuild();
                }
            },
            "fnInfoCallback": function (oSets, iStart, iEnd, iMax, iTotal, sOut) {
                //iEnd = (iStart - 1) + oSets._iDisplayLength
                var TotalCount = 0;
                if (TotalDc != 0)
                    TotalCount = TotalDc;
                if (iTotal === 0) {
                    /* Empty record set */
                    sOut = oSets.oLanguage.sInfoEmpty;
                }
                else {
                    /* Normal record set */
                    sOut = oSets.oLanguage.sInfo;
                }

                if (iTotal != iMax) {
                    /* Record set after filtering */
                    sOut += ' ' + oSets.oLanguage.sInfoFiltered;
                    TotalCount = iTotal;
                }

                // Convert the macros
                sOut += oSets.oLanguage.sInfoPostFix;
                sOut = sOut.replace(/_START_/g, iStart).
                    replace(/_END_/g, iEnd).
                    replace(/_TOTAL_/g, TotalCount).
                    replace(/_MAX_/g, iMax);
                return sOut;
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                //This is not realy necessary
                $(nRow).unbind('click');
                $(nRow).bind('click', function () {
                    var aPos = odtbasicTable.fnGetPosition(this);
                    var atData = odtbasicTable.fnGetData(aPos);

                    selected = [];
                    odtbasicTable.$('tr.row-selected').removeClass('row-selected');
                    $('input', odtbasicTable.fnGetNodes()).each(function () {
                        this.checked = false;
                    });

                    $(this).addClass('row-selected');
                    if (selected.indexOf(atData[21]) == -1)
                        selected.push(atData[21]);
                    var checkBox = document.getElementById("Chk_" + atData[21]);
                    if (checkBox != undefined && checkBox != null) {
                        checkBox.checked = true;
                    }

                    var ObjectId = document.getElementById("ObjectId");
                    if (ObjectId != undefined && ObjectId != null)
                        ObjectId.value = atData[0];

                    var AnalysisObjectId = document.getElementById("AnalysisObjectId");
                    if (AnalysisObjectId != undefined && AnalysisObjectId != null)
                        AnalysisObjectId.value = atData[21];

                    var HandOverObjectId = document.getElementById("HandOverObjectId");
                    if (HandOverObjectId != undefined && HandOverObjectId != null)
                        HandOverObjectId.value = atData[22];

                    var ddlSampleType = document.getElementById("ddlSampleType");
                    if (ddlSampleType != undefined && ddlSampleType != null) {
                        for (var i = 0; i < ddlSampleType.options.length; i++) {
                            if (ddlSampleType.options[i].value == atData[1]) {
                                ddlSampleType.options[i].selected = true;
                                WherePartLoadDataWithControl(atData[1].toString(), false);
                            }
                            else
                                ddlSampleType.options[i].selected = false;
                        }
                        if ($("#ddlSampleType").data().select2 != undefined) {
                            $("#ddlSampleType").data().select2.updateSelection();
                            $("#ddlSampleType").data().select2.initSelection();
                        }
                    }

                    var ddlOperationContext = document.getElementById("ddlOperationContext");
                    if (ddlOperationContext != undefined && ddlOperationContext != null) {
                        for (var i = 0; i < ddlOperationContext.options.length; i++) {
                            if (ddlOperationContext.options[i].value == atData[6])
                                ddlOperationContext.options[i].selected = true;
                            else
                                ddlOperationContext.options[i].selected = false;
                        }
                        if ($("#ddlOperationContext").data().select2 != undefined) {
                            $("#ddlOperationContext").data().select2.updateSelection();
                            $("#ddlOperationContext").data().select2.initSelection();
                        }
                    }

                    var TxtSamplingCount = document.getElementById("TxtSamplingCount");
                    if (TxtSamplingCount != undefined && TxtSamplingCount != null)
                        TxtSamplingCount.value = atData[5];

                    var TxtPlaceId = document.getElementById("PlaceId");
                    if (TxtPlaceId != undefined && TxtPlaceId != null)
                        TxtPlaceId.value = atData[3];

                    var TxtCustomePlaceName = document.getElementById("TxtCustomePlaceName");
                    if (TxtCustomePlaceName != undefined && TxtCustomePlaceName != null)
                        TxtCustomePlaceName.value = atData[4];

                    var radiovalue = parseInt(atData[8]) > 0 ? 2 : (parseInt(atData[7]) > 0 ? 1 : 0)

                    var Chk_RoleOrUser = document.getElementsByName("group_Chk_RoleOrUser");
                    if (Chk_RoleOrUser != undefined && Chk_RoleOrUser != null && Chk_RoleOrUser.length > 0) {
                        if (radiovalue != undefined && radiovalue != null && radiovalue > 0) {
                            for (var i = 1; i <= Chk_RoleOrUser.length; i++) {
                                if (i == radiovalue || Chk_RoleOrUser.item(i - 1).value == radiovalue)
                                    Chk_RoleOrUser.item(i - 1).checked = true;
                                else
                                    Chk_RoleOrUser.item(i - 1).checked = false;
                                if (radiovalue == "1" && Chk_RoleOrUser.item(i - 1).checked) {
                                    var ddlUser = document.getElementById("ddlUser");
                                    if (ddlUser != null && ddlUser != undefined)
                                        $(ddlUser.parentNode).addClass("hide");
                                }
                                else if (radiovalue == "2" && Chk_RoleOrUser.item(i - 1).checked) {
                                    var ddlUser = document.getElementById("ddlUser");
                                    if (ddlUser != null && ddlUser != undefined)
                                        $(ddlUser.parentNode).removeClass("hide");
                                }
                            }
                        }
                        else {
                            Chk_RoleOrUser[0].checked = true;
                        }
                    }

                    var ddlRole = document.getElementById("ddlRole");
                    if (ddlRole != undefined && ddlRole != null) {
                        for (var i = 0; i < ddlRole.options.length; i++) {
                            if (ddlRole.options[i].value == atData[7]) {
                                ddlRole.options[i].selected = true;
                                UserDataLoad();
                            }
                            else
                                ddlRole.options[i].selected = false;
                        }
                        if ($("#ddlRole").data().select2 != undefined) {
                            $("#ddlRole").data().select2.updateSelection();
                            $("#ddlRole").data().select2.initSelection();
                        }
                    }

                    var ddlUser = document.getElementById("ddlUser");
                    if (ddlUser != undefined && ddlUser != null) {
                        for (var i = 0; i < ddlUser.options.length; i++) {
                            if (ddlUser.options[i].value == atData[8])
                                ddlUser.options[i].selected = true;
                            else
                                ddlUser.options[i].selected = false;
                        }
                        if ($("#ddlUser").data().select2 != undefined) {
                            $("#ddlUser").data().select2.updateSelection();
                            $("#ddlUser").data().select2.initSelection();
                        }
                    }

                    radiovalue = parseInt(atData[20]) > 0 ? 2 : (parseInt(atData[19]) > 0 ? 1 : 0)

                    var Chk_RoleOrUser_Analysis = document.getElementsByName("group_Chk_RoleOrUser_Analysis");
                    if (Chk_RoleOrUser_Analysis != undefined && Chk_RoleOrUser_Analysis != null && Chk_RoleOrUser_Analysis.length > 0) {
                        if (radiovalue != undefined && radiovalue != null && radiovalue > 0) {
                            for (var i = 1; i <= Chk_RoleOrUser_Analysis.length; i++) {
                                if (i == radiovalue || Chk_RoleOrUser_Analysis.item(i - 1).value == radiovalue)
                                    Chk_RoleOrUser_Analysis.item(i - 1).checked = true;
                                else
                                    Chk_RoleOrUser_Analysis.item(i - 1).checked = false;
                                if (radiovalue == "1" && Chk_RoleOrUser_Analysis.item(i - 1).checked) {
                                    var ddlUser = document.getElementById("ddlAnalyzedUser");
                                    if (ddlUser != null && ddlUser != undefined)
                                        $(ddlUser.parentNode).addClass("hide");
                                }
                                else if (radiovalue == "2" && Chk_RoleOrUser_Analysis.item(i - 1).checked) {
                                    var ddlUser = document.getElementById("ddlAnalyzedUser");
                                    if (ddlUser != null && ddlUser != undefined)
                                        $(ddlUser.parentNode).removeClass("hide");
                                }
                            }
                        }
                        else {
                            Chk_RoleOrUser_Analysis[0].checked = true;
                        }
                    }

                    var ddlAnalyzedRole = document.getElementById("ddlAnalyzedRole");
                    if (ddlAnalyzedRole != undefined && ddlAnalyzedRole != null) {
                        for (var i = 0; i < ddlAnalyzedRole.options.length; i++) {
                            if (ddlAnalyzedRole.options[i].value == atData[19]) {
                                ddlAnalyzedRole.options[i].selected = true;
                                AnalyzedUserDataLoad();
                            }
                            else
                                ddlAnalyzedRole.options[i].selected = false;
                        }
                        if ($("#ddlAnalyzedRole").data().select2 != undefined) {
                            $("#ddlAnalyzedRole").data().select2.updateSelection();
                            $("#ddlAnalyzedRole").data().select2.initSelection();
                        }
                    }

                    var ddlAnalyzedUser = document.getElementById("ddlAnalyzedUser");
                    if (ddlAnalyzedUser != undefined && ddlAnalyzedUser != null) {
                        for (var i = 0; i < ddlAnalyzedUser.options.length; i++) {
                            if (ddlAnalyzedUser.options[i].value == atData[20])
                                ddlAnalyzedUser.options[i].selected = true;
                            else
                                ddlAnalyzedUser.options[i].selected = false;
                        }
                        if ($("#ddlAnalyzedUser").data().select2 != undefined) {
                            $("#ddlAnalyzedUser").data().select2.updateSelection();
                            $("#ddlAnalyzedUser").data().select2.initSelection();
                        }
                    }

                    var ddlShift = document.getElementById("ddlShift");
                    if (ddlShift != undefined && ddlShift != null) {
                        for (var i = 0; i < ddlShift.options.length; i++) {
                            if (ddlShift.options[i].value == atData[23])
                                ddlShift.options[i].selected = true;
                            else
                                ddlShift.options[i].selected = false;
                        }
                        if ($("#ddlShift").data().select2 != undefined) {
                            $("#ddlShift").data().select2.updateSelection();
                            $("#ddlShift").data().select2.initSelection();
                        }
                    }

                    var datDateRange = document.getElementById("datDateRange");
                    var Value = atData[13] + "," + atData[14];
                    if (datDateRange != null) {
                        if (Value.split(",").length > 1) {
                            if ($("#datDateRange").data().daterangepicker != undefined) {
                                if (Value.indexOf('/Date(') != -1) {
                                    if (Value.split(",")[0].toString() != "" && Value.split(",")[1].toString()) {
                                        var startdate = moment(JSON.parseWithDate(JSON.stringify(Value.split(",")[0])));
                                        var enddate = moment(JSON.parseWithDate(JSON.stringify(Value.split(",")[1])));
                                        datDateRange.getElementsByTagName("span")[0].innerHTML = startdate.format('MMMM D, YYYY') + " - " + enddate.format('MMMM D, YYYY');

                                        $("#datDateRange").data().daterangepicker.setStartDate(new Date(startdate.format('MMMM D, YYYY')));
                                        $("#datDateRange").data().daterangepicker.setEndDate(new Date(enddate.format('MMMM D, YYYY')));
                                    }
                                }
                                else {
                                    if (Value.split(",")[0].toString() != "" && Value.split(",")[1].toString()) {
                                        datDateRange.getElementsByTagName("span")[0].innerHTML = moment(Value.split(",")[0], 'D-MM-YYYY H:mm:ss').format('MMMM D, YYYY') + " - " + moment(Value.split(",")[1], 'D-MM-YYYY H:mm:ss').format('MMMM D, YYYY');

                                        $("#datDateRange").data().daterangepicker.setStartDate(new Date(moment(Value.split(",")[0], 'D-MM-YYYY H:mm:ss').format('MMMM D, YYYY')));
                                        $("#datDateRange").data().daterangepicker.setEndDate(new Date(moment(Value.split(",")[1], 'D-MM-YYYY H:mm:ss').format('MMMM D, YYYY')));
                                    }
                                }
                                //IntializeDateRangePicker(ControlConfig.ClientID, 0, false);
                            }
                        }
                        else if (Value.split("-").length > 1) {
                            datDateRange.getElementsByTagName("span")[0].innerHTML = Value;
                            if ($("#datDateRange").data().daterangepicker != undefined) {
                                $("#datDateRange").data().daterangepicker.setStartDate(new Date(Value.split("-")[0]));
                                $("#datDateRange").data().daterangepicker.setEndDate(new Date(Value.split("-")[1]));
                            }
                        }
                    }
                });
            },
            "fnFooterCallback": function (nFoot, aData, iStart, iEnd, aiDisplay) {
                var oTable = $('.full-width').DataTable();
                var oTableDate = oTable.fnGetNodes();
                var oSettings = oTable.fnSettings();
                //iEnd = iStart + oSettings._iDisplayLength
                var itrCnt = 0;
                var diff = iEnd - iStart;
                //if (diff != 0) {
                //    for (var item in oTableDate) {
                //        if (oTableDate[item]._DT_RowIndex >= iStart && oTableDate[item]._DT_RowIndex < iEnd) {
                //            if ($('input', oTable.fnGetNodes(oTableDate[item]._DT_RowIndex)).length > 0) {
                //                if ($('input', oTable.fnGetNodes(oTableDate[item]._DT_RowIndex))[0].checked == true)
                //                    itrCnt = itrCnt + 1;
                //            }
                //        }
                //    }
                //    if (diff == itrCnt)
                //        $('#selectall')[0].checked = true;
                //    else
                //        $('#selectall')[0].checked = false;
                //}
            },
            "bAutoWidth": false
        });

        var lControlId = "datatable_ApprovalProf";
        var nLength = document.getElementById('datatable_ApprovalProf_length');
        $('select', nLength).unbind();
        $('select', nLength).bind('change.DT', function () {
            var target = LoadingImage();
            var oTable = $('#' + lControlId).DataTable();
            var iVal = $(this).val();

            var oSettings = oTable.fnSettings();

            /* Update all other length options for the new display */
            var n = oSettings.aanFeatures.l;
            for (i = 0, iLen = n.length ; i < iLen ; i++) {
                if (n[i] != this.parentNode) {
                    $('select', n[i]).val(iVal);
                }
            }

            /* Redraw the table */
            oSettings._iDisplayLength = parseInt(iVal, 10);
            oTable._fnCalculateEnd(oSettings);

            /* If we have space to show extra rows (backing up from the end point - then do so */
            if (oSettings.fnDisplayEnd() == oSettings.fnRecordsDisplay()) {
                oSettings._iDisplayStart = oSettings.fnDisplayEnd() - oSettings._iDisplayLength;
                if (oSettings._iDisplayStart < 0) {
                    oSettings._iDisplayStart = 0;
                }
            }

            if (oSettings._iDisplayLength == -1) {
                oSettings._iDisplayStart = 0;
            }
            var CurrentPageNo = 1;
            var oGridControl = new GridControl();
            var parameterToLoadData = {};
            var PageParam = {};
            if (parameter.length > 0) {
                if (parameter[1] != undefined)
                    parameterToLoadData = parameter[1];
                if (parameter[0] != undefined)
                    PageParam = parameter[0];
            }
            if (GridConfigUrl != '' && GridConfigUrl != null && GridConfigUrl != undefined) {
                var GridConfig = null;
                if (typeof (GridConfigUrl) == 'string') {
                    GridConfig = GetGridConfig(GridConfigUrl, parameterToLoadData);
                    GridConfig = GridConfig.ColumnConfigList;
                    MetaData = [];
                    CreateMetaDataColumn(GridConfig, false);
                }
                else {
                    MetaData = [];
                    if (oModel.ControlGroupConfigLst[0].ControlConfigDict["MasterGrid"] != undefined)
                        GridConfig = oModel.ControlGroupConfigLst[0].ControlConfigDict["MasterGrid"].ColumnConfigList;
                    CreateMetaDataColumn(GridConfig, false);
                }
            }
            parameterToLoadData = JSON.stringify(PageParam);
            parameterToLoadData = { request: parameterToLoadData, PageSize: oSettings._iDisplayLength, CurrentPage: CurrentPageNo, SortColumnName: "", SortType: "" };
            parameterToLoadData = JSON.stringify(parameterToLoadData);
            var result = GetDataSource(GridDataUrl, parameterToLoadData);
            GridResultData = result;

            var startCnt = oSettings._iDisplayStart;
            var RowContent = "";
            var RowCont = "";
            oSettings.aiDisplay = [];

            if (TotalDc != oSettings.aiDisplay.length) {
                var datalength = oSettings.aiDisplay.length;
                //oSets.aiDisplay.remove(0, oTable.fnSettings().aiDisplay.length);

                for (var itrCnt = datalength; itrCnt < TotalDc; itrCnt++) {
                    oSettings.aiDisplay.push(itrCnt);
                }
            }

            for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                Data = [];
                //if (oSettings.aoData[startCnt + itrCnt].nTr.innerHTML == "") {
                RowContent = "";
                var j = 0;
                for (var k = 0; k < MetaData.length; k++) {
                    RowCont = "";
                    if (MetaData[k].Visible != undefined) {
                        if (MetaData[k].Visible == true) {
                            if (MetaData[k].IsGroupColumn != true) {
                                oSettings.aoColumns[j].bShowColumns = true;
                                if (MetaData[k].Visible && oSettings.aoColumns[j].bVisible) {
                                    RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k], result[itrCnt]);
                                    //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                }
                                j = j + 1;
                            }
                            if (MetaData[k].IsGroupColumn) {
                                if (MetaData[k].IsGroupColumn == true) {
                                    for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                        oSettings.aoColumns[j].bShowColumns = true;
                                        if (MetaData[k].SubColumns[i].Visible && oSettings.aoColumns[j].bVisible) {
                                            RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k].SubColumns[i], result[itrCnt]);
                                            //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                        }
                                        j = j + 1;
                                    }
                                }
                            }
                        }
                        else {
                            j = j + 1;
                        }
                    }
                    oGridControl.GetDataClmn(RowCont, MetaData[k], result[itrCnt], Data);
                }
                if (oSettings.aoData[startCnt + itrCnt] != null && oSettings.aoData[startCnt + itrCnt] != undefined) {
                    oSettings.aoData[startCnt + itrCnt].nTr = null;
                    oSettings.aoData[startCnt + itrCnt]._aData = Data;
                }
                //}
            }

            oTable._fnDraw(false);
            RemoveLoadingImage(target);
        });

        $('#selectall').click(function () {
            var itr = 0;
            if (this.checked == true) {
                $('input', odtbasicTable.fnGetNodes()).each(function () {
                    var aPos = odtbasicTable.fnGetPosition(this.parentElement.parentElement);
                    var atData = odtbasicTable.fnGetData(aPos);
                    if (itr < odtbasicTable.fnSettings()._iDisplayEnd && odtbasicTable.fnSettings().aiDisplay.length == odtbasicTable.fnSettings().aoData.length) {
                        if (this.parentElement.parentElement.tagName == "TR") {
                            $(this.parentElement.parentElement).addClass('row-selected');
                            if (selected.indexOf(atData[0]) == -1)
                                selected.push(atData[0]);
                            this.checked = true;
                            $('input', odtbasicTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                        }
                    }
                    else if (itr < odtbasicTable.fnSettings()._iDisplayEnd && odtbasicTable.fnSettings().aiDisplay.length != odtbasicTable.fnSettings().aoData.length &&
                        odtbasicTable.fnSettings().aiDisplay.indexOf(this.parentElement.parentElement._DT_RowIndex) != -1) {
                        if (this.parentElement.parentElement.tagName == "TR") {
                            $(this.parentElement.parentElement).addClass('row-selected');
                            if (selected.indexOf(atData[0]) == -1)
                                selected.push(atData[0]);
                            this.checked = true;
                            $('input', odtbasicTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                        }
                    }
                    itr += 1;
                });
                if (document.getElementById("ObjectId").value != "" && document.getElementById("ObjectId").value != null && document.getElementById("ObjectId").value != undefined)
                    document.getElementById("ObjectId").value = "";
            }
            else {
                $('input', odtbasicTable.fnGetNodes()).each(function () {
                    var aPos = odtbasicTable.fnGetPosition(this.parentElement.parentElement);
                    var atData = odtbasicTable.fnGetData(aPos);
                    if (itr < odtbasicTable.fnSettings()._iDisplayEnd && odtbasicTable.fnSettings().aiDisplay.length == odtbasicTable.fnSettings().aoData.length) {
                        this.checked = false;
                        if (this.parentElement.parentElement.tagName == "TR") {
                            if ($(this.parentElement.parentElement).hasClass('row-selected')) {
                                $(this.parentElement.parentElement).removeClass('row-selected');
                                var index = selected.indexOf(atData[0]);
                                if (index != -1)
                                    selected.splice(index, 1);
                            }
                        }
                        $('input', odtbasicTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                    }
                    else if (itr < odtbasicTable.fnSettings()._iDisplayEnd && odtbasicTable.fnSettings().aiDisplay.length != odtbasicTable.fnSettings().aoData.length &&
                        odtbasicTable.fnSettings().aiDisplay.indexOf(this.parentElement.parentElement._DT_RowIndex) != -1) {
                        this.checked = false;
                        if (this.parentElement.parentElement.tagName == "TR") {
                            if ($(this.parentElement.parentElement).hasClass('row-selected')) {
                                $(this.parentElement.parentElement).removeClass('row-selected');
                                var index = selected.indexOf(atData[0]);
                                if (index != -1)
                                    selected.splice(index, 1);
                            }
                        }
                        $('input', odtbasicTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                    }
                    itr += 1;
                });
                if (document.getElementById("ObjectId").value != "" && document.getElementById("ObjectId").value != null && document.getElementById("ObjectId").value != undefined)
                    document.getElementById("ObjectId").value = "";
            }
        });
    }

    //--Role Grid Initialize function.
    this.OrgHierRoleGridInit = function (oModel, ControlId) {
        var odtbasicTable = $('#' + ControlId).dataTable({
            "sPaginationType": "full_numbers",
            "sDom": "R<'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>Clf>r<'dt-wrapper't><'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>",//'<'toolbar'>frtip'",
            "fnInitComplete": function (oSettings, json) {
                $('.ColVis_Button').addClass('btn btn-default btn-sm').html('Hide / Show <i class="icon-arrow-down"></i>');
                $(this).closest('#dt_table_tools_wrapper').find('.DTTT.btn-group').addClass('table_tools_group').children('a.btn').each(function () {
                    $(this).addClass('btn-sm btn-default');
                });
            },
            "fnHeaderCallback": function (nHead, aData, iStart, iEnd, aiDisplay) {
                var oTable = $('.full-width').DataTable();
                var oSettings = oTable.fnSettings();
                var j = 0;
                for (var k = 0; k < MetaData.length; k++) {
                    if (MetaData[k].Visible != undefined) {
                        if (MetaData[k].Visible == true) {
                            if (MetaData[k].IsGroupColumn != true) {
                                oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                if (!MetaData[k].Sortable)
                                    oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                j = j + 1;
                            }
                            if (MetaData[k].IsGroupColumn) {
                                if (MetaData[k].IsGroupColumn == true) {
                                    for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                        oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                        if (!MetaData[k].Sortable)
                                            oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                        j = j + 1;
                                    }
                                }
                            }
                        }
                        else {
                            oTable.fnSetColumnVis(j, false);
                            oSettings.aoColumns[j].bShowColumns = false;
                            oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                            if (!MetaData[k].Sortable)
                                oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                            j = j + 1;
                        }
                    }
                }
                if (ColVis != undefined)
                    ColVis.fnRebuild();
            },
            "iDisplayLength": 5,
            "aoColumnDefs": [],
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                //This is not realy necessary
                $(nRow).unbind('click');
                $(nRow).bind('click', function () {
                    var aPos = odtbasicTable.fnGetPosition(this);
                    var oTableSettings = odtbasicTable.fnSettings();
                    var atData = odtbasicTable.fnGetData(aPos);

                    $(this).removeClass('row-selected');
                    odtbasicTable.$('tr.row-selected').removeClass('row-selected');
                    $(this).addClass('row-selected');

                    var _DynamicPage = null;
                    var GridLoadParameters = [];
                    var model = null;
                    var lcontrolConfigDict = null;
                    if (ModelUpdate != undefined && ModelUpdate != null)
                        model = ModelUpdate;
                    else {
                        model = oModel;
                        if (model.ControlGroupConfigLst.length > 0) {
                            for (var groupItem in model.ControlGroupConfigLst) {
                                var lControlGroupConfigLst = model.ControlGroupConfigLst[groupItem].ControlGroupConfigLst;
                                var lControlConfigDict = model.ControlGroupConfigLst[groupItem].ControlConfigDict;
                                if (typeof (model.ControlGroupConfigLst[groupItem]) != 'function' && lControlGroupConfigLst.length > 0) {
                                    CollectControlsFromGroup(lControlGroupConfigLst);
                                }
                                if (lControlConfigDict != undefined && lControlConfigDict != null) {
                                    if (this.lcontrolDict != null) {
                                        for (var item in lControlConfigDict) {
                                            this.lcontrolDict[item] = lControlConfigDict[item];
                                        }
                                        lControlConfigDict = this.lcontrolDict;
                                    }
                                    else {
                                        this.lcontrolDict = lControlConfigDict;
                                    }
                                }
                            }
                            model.ControlGroupConfigLst.remove(1, model.ControlGroupConfigLst.length);
                            model.ControlGroupConfigLst[0].ControlConfigDict = this.lcontrolDict;
                            model.ControlGroupConfigLst[0].ControlGroupConfigLst = [];
                            ModelUpdate = model;
                        }
                    }
                    if (model != null) {
                        _DynamicPage = new DynamicPage(model);
                        if (model.ControlGroupConfigLst != undefined && model.ControlGroupConfigLst != null && model.ControlGroupConfigLst.length > 0) {
                            for (var item in model.ControlGroupConfigLst[0].ControlConfigDict) {
                                if (model.ControlGroupConfigLst[0].ControlConfigDict[item].ControlTypeName != "Label")
                                    GridLoadParameters.push(model.ControlGroupConfigLst[0].ControlConfigDict[item].ClientID)
                            }
                        }
                    }
                    if (GridLoadParameters.length > 0) {
                        for (var i = 0; i < GridLoadParameters.length; i++) {
                            var controlConfig = model.ControlGroupConfigLst[0].ControlConfigDict[GridLoadParameters[i]];
                            if (controlConfig != undefined && controlConfig != null) {
                                for (var j = 0; j < oTableSettings.aoColumns.length; j++) {
                                    if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "ComboBox" && controlConfig.ComboType == 1) {
                                        var _ComboBox = new WiNAiMComboBox(model);
                                        _ComboBox.setData(controlConfig, atData[j].split('|'));
                                        _ComboBox.onchange(controlConfig);
                                        break;
                                    }

                                    else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "ComboBox") {
                                        var _ComboBox = new WiNAiMComboBox(model);
                                        _ComboBox.setData(controlConfig, atData[j - 1]);
                                        _ComboBox.onchange(controlConfig);
                                        break;
                                    }
                                    else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "TextBox") {
                                        _DynamicPage.SetData(controlConfig, atData[j]);
                                        break;
                                    }
                                    else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "Hidden") {
                                        _DynamicPage.SetData(controlConfig, atData[j]);
                                        break;
                                    }
                                }
                            }
                        }

                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[0]], atData[2]); //--Organization Id
                        if (document.getElementById(GridLoadParameters[0]) != undefined && document.getElementById(GridLoadParameters[0]) != null)
                            document.getElementById(GridLoadParameters[0]).setAttribute("disabled", "");
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[1]], atData[4]); //--Operational Context Id
                        if (document.getElementById(GridLoadParameters[1]) != undefined && document.getElementById(GridLoadParameters[1]) != null)
                            document.getElementById(GridLoadParameters[1]).setAttribute("disabled", "");
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[2]], atData[6]); //--Role Name
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[3]], atData[7]); //--Role Desc
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[4]], atData[8]); //--Supervisor Role Id
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[5]], atData[0]); //--Role Id
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[3]], atData[9]);
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[6]], atData[1]); //--Role Node Id
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[7]], atData[10]);
                    }
                    var _oValidationFrameWork = new ValidationFrameWork(ModelUpdate);
                    _oValidationFrameWork.removeValidate();
                });
            },
            "bAutoWidth": false
        });
    }

    //--User Grid Initialize function.
    this.OrgHierUserGridInit = function (oModel, ControlId) {
        var odtbasicTable = $('#' + ControlId).dataTable({
            "sPaginationType": "full_numbers",
            "sDom": "R<'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>Clf>r<'dt-wrapper't><'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>",//'<'toolbar'>frtip'",
            "fnInitComplete": function (oSettings, json) {
                $('.ColVis_Button').addClass('btn btn-default btn-sm').html('Hide / Show <i class="icon-arrow-down"></i>');
                $(this).closest('#dt_table_tools_wrapper').find('.DTTT.btn-group').addClass('table_tools_group').children('a.btn').each(function () {
                    $(this).addClass('btn-sm btn-default');
                });
            },
            "fnHeaderCallback": function (nHead, aData, iStart, iEnd, aiDisplay) {
                var oTable = $('.full-width').DataTable();
                var oSettings = oTable.fnSettings();
                var j = 0;
                for (var k = 0; k < MetaData.length; k++) {
                    if (MetaData[k].Visible != undefined) {
                        if (MetaData[k].Visible == true) {
                            if (MetaData[k].IsGroupColumn != true) {
                                oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                if (!MetaData[k].Sortable)
                                    oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                j = j + 1;
                            }
                            if (MetaData[k].IsGroupColumn) {
                                if (MetaData[k].IsGroupColumn == true) {
                                    for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                        oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                        if (!MetaData[k].Sortable)
                                            oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                        j = j + 1;
                                    }
                                }
                            }
                        }
                        else {
                            oTable.fnSetColumnVis(j, false);
                            oSettings.aoColumns[j].bShowColumns = false;
                            oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                            if (!MetaData[k].Sortable)
                                oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                            j = j + 1;
                        }
                    }
                }
                if (ColVis != undefined)
                    ColVis.fnRebuild();
            },
            "iDisplayLength": 5,
            "aoColumnDefs": [],
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                //This is not realy necessary
                $(nRow).unbind('click');
                $(nRow).bind('click', function () {
                    var aPos = odtbasicTable.fnGetPosition(this);
                    var atData = odtbasicTable.fnGetData(aPos);
                    var oTableSettings = odtbasicTable.fnSettings();

                    $(this).removeClass('row-selected');
                    odtbasicTable.$('tr.row-selected').removeClass('row-selected');
                    $(this).addClass('row-selected');

                    var _DynamicPage = null;
                    var GridLoadParameters = [];
                    var model = null;
                    var lcontrolConfigDict = null;
                    if (ModelUpdate != undefined && ModelUpdate != null)
                        model = ModelUpdate;
                    else {
                        model = oModel;
                        if (model.ControlGroupConfigLst.length > 0) {
                            for (var groupItem in model.ControlGroupConfigLst) {
                                var lControlGroupConfigLst = model.ControlGroupConfigLst[groupItem].ControlGroupConfigLst;
                                var lControlConfigDict = model.ControlGroupConfigLst[groupItem].ControlConfigDict;
                                if (typeof (model.ControlGroupConfigLst[groupItem]) != 'function' && lControlGroupConfigLst.length > 0) {
                                    CollectControlsFromGroup(lControlGroupConfigLst);
                                }
                                if (lControlConfigDict != undefined && lControlConfigDict != null) {
                                    if (this.lcontrolDict != null) {
                                        for (var item in lControlConfigDict) {
                                            this.lcontrolDict[item] = lControlConfigDict[item];
                                        }
                                        lControlConfigDict = this.lcontrolDict;
                                    }
                                    else {
                                        this.lcontrolDict = lControlConfigDict;
                                    }
                                }
                            }
                            model.ControlGroupConfigLst.remove(1, model.ControlGroupConfigLst.length);
                            model.ControlGroupConfigLst[0].ControlConfigDict = this.lcontrolDict;
                            model.ControlGroupConfigLst[0].ControlGroupConfigLst = [];
                            ModelUpdate = model;
                        }
                    }
                    if (model != null) {
                        _DynamicPage = new DynamicPage(model);
                        if (model.ControlGroupConfigLst != undefined && model.ControlGroupConfigLst != null && model.ControlGroupConfigLst.length > 0) {
                            for (var item in model.ControlGroupConfigLst[0].ControlConfigDict) {
                                if (model.ControlGroupConfigLst[0].ControlConfigDict[item].ControlTypeName != "Label")
                                    GridLoadParameters.push(model.ControlGroupConfigLst[0].ControlConfigDict[item].ClientID)
                            }
                        }
                    }
                    if (GridLoadParameters.length > 0) {
                        for (var i = 0; i < GridLoadParameters.length; i++) {
                            var controlConfig = model.ControlGroupConfigLst[0].ControlConfigDict[GridLoadParameters[i]];
                            if (controlConfig != undefined && controlConfig != null) {
                                for (var j = 0; j < oTableSettings.aoColumns.length; j++) {
                                    if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "ComboBox") {
                                        var _ComboBox = new WiNAiMComboBox(model);
                                        _ComboBox.setData(controlConfig, atData[j - 1]);
                                        _ComboBox.onchange(controlConfig);
                                        break;
                                    }
                                    else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "TextBox") {
                                        _DynamicPage.SetData(controlConfig, atData[j]);
                                        break;
                                    }
                                    else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "Hidden") {
                                        _DynamicPage.SetData(controlConfig, atData[j]);
                                        break;
                                    }
                                }
                            }
                        }
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[0]], atData[2]); //--Organization Id
                        if (document.getElementById(GridLoadParameters[0]) != undefined && document.getElementById(GridLoadParameters[0]) != null)
                            document.getElementById(GridLoadParameters[0]).setAttribute("disabled", "");
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[1]], atData[4]); //--Operational Context Id
                        if (document.getElementById(GridLoadParameters[1]) != undefined && document.getElementById(GridLoadParameters[1]) != null)
                            document.getElementById(GridLoadParameters[1]).setAttribute("disabled", "");
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[14]], atData[0]); //--User Id
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[15]], atData[1]); //--User Node Id
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[2]], atData[6]); //--Name
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[3]], atData[8]); //--Name
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[4]], atData[9]); //--Middle Name
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[5]], atData[10]); //--Last Name
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[6]], atData[11]); //--Short Name
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[8]], atData[12]); //--User Name
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[9]], atData[13]); //--Password
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[10]], atData[16]); //--Role
                        if (document.getElementById(GridLoadParameters[10]) != undefined && document.getElementById(GridLoadParameters[10]) != null)
                            document.getElementById(GridLoadParameters[10]).setAttribute("disabled", "");
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[11]], atData[18]); //--Reporting User
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[3]], atData[9]);
                        //_DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[10]], atData[1]); //--User Name
                    }
                });
            },
            "bAutoWidth": false
        });
    }

    //--Dashboard Approval Grid Initialize function.
    this.NCDetailsGridInit = function (controlId) {
        var odtbasicTable = $('#' + controlId).dataTable({
            "sPaginationType": "full_numbers",
            "sDom": "R<'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>Cl>r<'dt-wrapper't><'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>",//'<'toolbar'>frtip'",
            "fnInitComplete": function (oSettings, json) {
                $('.ColVis_Button').addClass('btn btn-default btn-sm').html('Hide / Show <i class="icon-arrow-down"></i>');
                $(this).closest('#dt_table_tools_wrapper').find('.DTTT.btn-group').addClass('table_tools_group').children('a.btn').each(function () {
                    $(this).addClass('btn-sm btn-default');
                });
            },
            "iDisplayLength": 10,
            "fnHeaderCallback": function (nHead, aData, iStart, iEnd, aiDisplay) {
                var oTable = $('#' + controlId).DataTable();
                var oSettings = oTable.fnSettings();
                if (oSettings.bColumnVisible) {
                    var j = 0;
                    for (var k = 0; k < MetaData.length; k++) {
                        if (MetaData[k].Visible != undefined) {
                            if (MetaData[k].Visible == true) {
                                if (MetaData[k].IsGroupColumn != true) {
                                    oSettings.aoColumns[j].bShowColumns = true;
                                    if (!MetaData[k].ColumnDefaultVisible)
                                        oTable.fnSetColumnVis(j, false);
                                    oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                    if (!MetaData[k].Sortable)
                                        oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                    j = j + 1;
                                }
                                if (MetaData[k].IsGroupColumn) {
                                    if (MetaData[k].IsGroupColumn == true) {
                                        for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                            oSettings.aoColumns[j].bShowColumns = true;
                                            if (!MetaData[k].SubColumns[i].ColumnDefaultVisible)
                                                oTable.fnSetColumnVis(j, false);
                                            oSettings.aoColumns[j].bSortable = MetaData[k].SubColumns[i].Sortable;
                                            if (!MetaData[k].SubColumns[i].Sortable)
                                                oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                            j = j + 1;
                                        }
                                    }
                                }
                            }
                            else {
                                oTable.fnSetColumnVis(j, false);
                                oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                oSettings.aoColumns[j].bShowColumns = false;
                                if (!MetaData[k].Sortable)
                                    oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                j = j + 1;
                            }
                        }
                    }
                }
                if (ColVis != undefined)
                    ColVis.fnRebuild();
            },
            "bAutoWidth": false
        });
    }

    //--Dashboard Approval Grid Initialize function.
    this.NCRDetailsGridInit = function (controlId) {
        var odtbasicTable = $('#' + controlId).dataTable({
            "sPaginationType": "full_numbers",
            "sDom": "R<'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>Cl>r<'dt-wrapper't><'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>",//'<'toolbar'>frtip'",
            "fnInitComplete": function (oSettings, json) {
                $('.ColVis_Button').addClass('btn btn-default btn-sm').html('Hide / Show <i class="icon-arrow-down"></i>');
                $(this).closest('#dt_table_tools_wrapper').find('.DTTT.btn-group').addClass('table_tools_group').children('a.btn').each(function () {
                    $(this).addClass('btn-sm btn-default');
                });
            },
            "iDisplayLength": 10,
            "fnHeaderCallback": function (nHead, aData, iStart, iEnd, aiDisplay) {
                var oTable = $('#' + controlId).DataTable();
                var oSettings = oTable.fnSettings();
                if (oSettings.bColumnVisible) {
                    var j = 0;
                    for (var k = 0; k < MetaData.length; k++) {
                        if (MetaData[k].Visible != undefined) {
                            if (MetaData[k].Visible == true) {
                                if (MetaData[k].IsGroupColumn != true) {
                                    oSettings.aoColumns[j].bShowColumns = true;
                                    if (!MetaData[k].ColumnDefaultVisible)
                                        oTable.fnSetColumnVis(j, false);
                                    oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                    if (!MetaData[k].Sortable)
                                        oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                    j = j + 1;
                                }
                                if (MetaData[k].IsGroupColumn) {
                                    if (MetaData[k].IsGroupColumn == true) {
                                        for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                            oSettings.aoColumns[j].bShowColumns = true;
                                            if (!MetaData[k].SubColumns[i].ColumnDefaultVisible)
                                                oTable.fnSetColumnVis(j, false);
                                            oSettings.aoColumns[j].bSortable = MetaData[k].SubColumns[i].Sortable;
                                            if (!MetaData[k].SubColumns[i].Sortable)
                                                oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                            j = j + 1;
                                        }
                                    }
                                }
                            }
                            else {
                                oTable.fnSetColumnVis(j, false);
                                oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                oSettings.aoColumns[j].bShowColumns = false;
                                if (!MetaData[k].Sortable)
                                    oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                j = j + 1;
                            }
                        }
                    }
                }
                if (ColVis != undefined)
                    ColVis.fnRebuild();
            },
            "bAutoWidth": false
        });
    }

    var fnAddData_Modified = function (oTable, oSettings, aDataSupplied) {
        var oCol;

        var oRow = {
            /**
             * TR element for the row
             *  @type node
             *  @default null
             */
            "nTr": null,

            /**
             * Data object from the original data source for the row. This is either
             * an array if using the traditional form of DataTables, or an object if
             * using mData options. The exact type will depend on the passed in
             * data from the data source, or will be an array if using DOM a data 
             * source.
             *  @type array|object
             *  @default []
             */
            "_aData": [],

            /**
             * Sorting data cache - this array is ostensibly the same length as the
             * number of columns (although each index is generated only as it is 
             * needed), and holds the data that is used for sorting each column in the
             * row. We do this cache generation at the start of the sort in order that
             * the formatting of the sort data need be done only once for each cell
             * per sort. This array should not be read from or written to by anything
             * other than the master sorting methods.
             *  @type array
             *  @default []
             *  @private
             */
            "_aSortData": [],

            /**
             * Array of TD elements that are cached for hidden rows, so they can be
             * reinserted into the table if a column is made visible again (or to act
             * as a store if a column is made hidden). Only hidden columns have a 
             * reference in the array. For non-hidden columns the value is either
             * undefined or null.
             *  @type array nodes
             *  @default []
             *  @private
             */
            "_anHidden": [],

            /**
             * Cache of the class name that DataTables has applied to the row, so we
             * can quickly look at this variable rather than needing to do a DOM check
             * on className for the nTr property.
             *  @type string
             *  @default <i>Empty string</i>
             *  @private
             */
            "_sRowStripe": ""
        };

        /* Take an independent copy of the data source so we can bash it about as we wish */
        var aDataIn = ($.isArray(aDataSupplied)) ?
            aDataSupplied.slice() :
            $.extend(true, {}, aDataSupplied);

        /* Create the object for storing information about this new row */
        var iRow = oSettings.aoData.length;
        var oData = $.extend(true, {}, oRow);
        oData._aData = aDataIn;
        oSettings.aoData.push(oData);

        /* Create the cells */
        var nTd, sThisType;
        //for (var i = 0, iLen = oSettings.aoColumns.length ; i < iLen ; i++) {
        //    oCol = oSettings.aoColumns[i];

        //    /* Use rendered data for filtering / sorting */
        //    if (typeof oCol.fnRender === 'function' && oCol.bUseRendered && oCol.mData !== null) {
        //        oTable._fnSetCellData(oSettings, iRow, i, oTable._fnRender(oSettings, iRow, i));
        //    }
        //    else {
        //        oTable._fnSetCellData(oSettings, iRow, i, oTable._fnGetCellData(oSettings, iRow, i));
        //    }

        //    /* See if we should auto-detect the column type */
        //    if (oCol._bAutoType && oCol.sType != 'string') {
        //        /* Attempt to auto detect the type - same as _fnGatherData() */
        //        var sVarType = oTable._fnGetCellData(oSettings, iRow, i, 'type');
        //        if (sVarType !== null && sVarType !== '') {
        //            sThisType = _fnDetectType(sVarType);
        //            if (oCol.sType === null) {
        //                oCol.sType = sThisType;
        //            }
        //            else if (oCol.sType != sThisType && oCol.sType != "html") {
        //                /* String is always the 'fallback' option */
        //                oCol.sType = 'string';
        //            }
        //        }
        //    }
        //}

        /* Add to the display array */
        oSettings.aiDisplayMaster.push(iRow);

        /* Create the DOM information */
        if (!oSettings.oFeatures.bDeferRender) {
            //CreateTr(oTable, oSettings, iRow);
        }

        return oSettings.aoData[iRow];
    }

    var CreateTr = function (oTable, oSettings, iRow) {
        var oData = oSettings.aoData[iRow];
        var nTd;
        oData.nTr = document.createElement('tr');

        /* Use a private property on the node to allow reserve mapping from the node
         * to the aoData array for fast look up
         */
        oData.nTr._DT_RowIndex = iRow;

        /* Special parameters can be given by the data source to be used on the row */
        if (oData._aData.DT_RowId) {
            oData.nTr.id = oData._aData.DT_RowId;
        }

        if (oData._aData.DT_RowClass) {
            oData.nTr.className = oData._aData.DT_RowClass;
        }

        /* Process each column */
        for (var i = 0, iLen = oSettings.aoColumns.length ; i < iLen ; i++) {
            var oCol = oSettings.aoColumns[i];
            nTd = document.createElement(oCol.sCellType);

            /* Render if needed - if bUseRendered is true then we already have the rendered
             * value in the data source - so can just use that
             */
            nTd.id = oSettings.aoColumns[i].sTitle;

            /* Add user defined class */
            if (oCol.sClass !== null) {
                nTd.className = oCol.sClass;
            }

            if (oCol.bVisible) {
                oData.nTr.appendChild(nTd);
                oData._anHidden[i] = null;
            }
            else {
                oData._anHidden[i] = nTd;
            }
        }
    }

    var NCDetails = function (button, Url, parameterToLoadData) {
        if (button.innerText != 0) {
            RemoveMessage();
            $("#myNCModal").modal("show");
            var controlId = 'datatable_NCDetail';
            var gridConfigUrl = GetParentFolderOfApplication() + '/DCApproval/GetGridConfig';
            var gridDataUrl = Url;
            MetaData = [];
            if ($("#" + controlId).length > 0 && $("#" + controlId)[0].tHead != null) {
                var oTable = $('#' + controlId).DataTable();
                oTable.fnClearTable(true);
                var oTableSetting = $('#' + controlId).DataTable().fnSettings();
                LoadDcGridData(gridConfigUrl, gridDataUrl, JSON.stringify(["NCDetails", button.id.split('_')[1]]), controlId, "");
                oTable.fnDestroy(false);
            }
            else
                LoadGridData(gridConfigUrl, gridDataUrl, JSON.stringify(["NCDetails", button.id.split('_')[1]]), controlId, "");
            var oGridTableInitialize = new GridTableInitialize();
            oGridTableInitialize.NCDetailsGridInit(controlId);
            $('<div style="width: 100%; overflow: auto"></div>').append($('#' + controlId)).insertAfter($('#' + controlId + '_wrapper div').first());
        }
        else
            ShowMessage("NC details not available.", 2);
    }
}

function AdvGridTableInitFramework() {
    this.ControlId = null;
    this.sPaginationType = null;
    this.processing = null;
    this.bServerSide = null;
    this.sDom = null;
    this.fnInitComplete = null;
    this.aoColumnDefs = null;
    this.sScrollXInner = null;
    this.fnRowCallback = null;
    this.fnDrawCallback = null;
    this.fnHeaderCallback = null;
    this.fnFooterCallback = null;
    this.fnInfoCallback = null;
    this.bStateSave = null;
    this.bAutoWidth = null;
    this.aaSorting = null;
    this.bScrollAutoCss = null;
    this.iDisplayLength = null;
    this.onEventHandler = null;
    this.aLengthMenu = null;
    var myInstance = this;
    this.GridTableInitialize = function () {
        var odtbasicTable = $('#' + this.ControlId);
        if (this.onEventHandler != null)
            odtbasicTable.on(this.onEventHandler['eventName'], this.onEventHandler['value']);
        odtbasicTable.dataTable(dataTableFormation());
        $('<div style="width: 100%; overflow: auto"></div>').append($('#' + this.ControlId)).insertAfter($('#' + this.ControlId + '_wrapper div').first());
    }

    var dataTableFormation = function () {
        var result = {};
        if (myInstance.sPaginationType != null)
            result["sPaginationType"] = myInstance["sPaginationType"];
        if (myInstance.processing != null)
            result["processing"] = myInstance.processing;
        if (myInstance.bServerSide != null)
            result["bServerSide"] = myInstance.bServerSide;
        if (myInstance.sDom != null)
            result["sDom"] = myInstance.sDom;
        if (myInstance.fnInitComplete != null)
            result["fnInitComplete"] = myInstance.fnInitComplete;
        if (myInstance.aoColumnDefs != null)
            result["aoColumnDefs"] = myInstance.aoColumnDefs;
        if (myInstance.sScrollXInner != null)
            result["sScrollXInner"] = myInstance.sScrollXInner;
        if (myInstance.fnRowCallback != null)
            result["fnRowCallback"] = myInstance.fnRowCallback;
        if (myInstance.fnDrawCallback != null)
            result["fnDrawCallback"] = myInstance.fnDrawCallback;
        if (myInstance.fnHeaderCallback != null)
            result["fnHeaderCallback"] = myInstance.fnHeaderCallback;
        if (myInstance.fnFooterCallback != null)
            result["fnFooterCallback"] = myInstance.fnFooterCallback;
        if (myInstance.fnInfoCallback != null)
            result["fnInfoCallback"] = myInstance.fnInfoCallback;
        if (myInstance.bAutoWidth != null)
            result["bAutoWidth"] = myInstance.bAutoWidth;
        if (myInstance.aaSorting != null)
            result["aaSorting"] = myInstance.aaSorting;
        if (myInstance.bScrollAutoCss != null)
            result["bScrollAutoCss"] = myInstance.bScrollAutoCss;
        if (myInstance.iDisplayLength != null)
            result["iDisplayLength"] = myInstance.iDisplayLength;
        if (myInstance.aLengthMenu != null)
            result["aLengthMenu"] = myInstance.aLengthMenu;
        return result;
    }
}

function OneViewDataTableComponent()
{
    var GetFactoryObject = function (InitializeKey) {
        var newFactoryObject = null;
        if (window[InitializeKey] != undefined && window[InitializeKey] != null)
            newFactoryObject = new window[InitializeKey]();
        else
            ShowMessage("Error: OneViewDataTableComponent.Initialize 'InitializeKey undefined'", 4);
        return newFactoryObject;
    }

    this.Initialize = function (InitializeKey) {
        var oneViewGridObject = GetFactoryObject(InitializeKey);
        if (oneViewGridObject != undefined && oneViewGridObject != null)
            oneViewGridObject.execute();
    }
}

function OnlineDataCapture() {
    var lControlId = null;
    this.execute = function () {
        selected = [];
        var _AdvGridTableInitialize = new AdvGridTableInitFramework();
        _AdvGridTableInitialize.sPaginationType = "full_numbers";
        _AdvGridTableInitialize.sDom = "R<'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>Clf>r<'dt-wrapper't><'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>";
        _AdvGridTableInitialize.fnInitComplete = InitComplete;
        _AdvGridTableInitialize.iDisplayLength = 10;
        _AdvGridTableInitialize.ControlId = "datatable_ApprovalProf";
        lControlId = _AdvGridTableInitialize.ControlId;
        _AdvGridTableInitialize.fnHeaderCallback = HeaderCallback;
        _AdvGridTableInitialize.fnRowCallback = RowCallBack;
        _AdvGridTableInitialize.bAutoWidth = false;
        _AdvGridTableInitialize.GridTableInitialize();
    }

    var InitComplete = function (oSettings, json) {
        $('.ColVis_Button').addClass('btn btn-default btn-sm').html('Hide / Show <i class="icon-arrow-down"></i>');
        $(this).closest('#dt_table_tools_wrapper').find('.DTTT.btn-group').addClass('table_tools_group').children('a.btn').each(function () {
            $(this).addClass('btn-sm btn-default');
        });
    }

    var HeaderCallback = function (nHead, aData, iStart, iEnd, aiDisplay) {
        var oTable = $('#' + lControlId).DataTable();
        var oSettings = oTable.fnSettings();
        if (oSettings.bColumnVisible) {
            var j = 0, IsDefaultSort = 0;
            for (var k = 0; k < MetaData.length; k++) {
                if (MetaData[k].Visible != undefined) {
                    if (MetaData[k].Visible == true) {
                        if (MetaData[k].IsGroupColumn != true) {
                            oSettings.aoColumns[j].bShowColumns = true;
                            if (!MetaData[k].ColumnDefaultVisible)
                                oTable.fnSetColumnVis(j, false);
                            oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                            if (!MetaData[k].Sortable)
                                oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                            if (IsDefaultSort == 0 && MetaData[k].Sortable) {
                                oSettings.aoColumns[j].nTh.className = "sorting_asc";
                                IsDefaultSort = 1;
                            }
                            j = j + 1;
                        }
                        if (MetaData[k].IsGroupColumn) {
                            if (MetaData[k].IsGroupColumn == true) {
                                for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                    oSettings.aoColumns[j].bShowColumns = true;
                                    if (!MetaData[k].SubColumns[i].ColumnDefaultVisible)
                                        oTable.fnSetColumnVis(j, false);
                                    oSettings.aoColumns[j].bSortable = MetaData[k].SubColumns[i].Sortable;
                                    if (!MetaData[k].SubColumns[i].Sortable)
                                        oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                    j = j + 1;
                                }
                            }
                        }
                    }
                    else {
                        oTable.fnSetColumnVis(j, false);
                        oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                        oSettings.aoColumns[j].bShowColumns = false;
                        if (!MetaData[k].Sortable)
                            oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                        j = j + 1;
                    }
                }
            }
        }
        if (ColVis != undefined)
            ColVis.fnRebuild();
    }

    var RowCallBack = function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
        //This is not realy necessary
        $(nRow).unbind('click');
        $(nRow).bind('click', function () {
            var odtbasicTable = $('#' + lControlId).DataTable();
            var aPos = odtbasicTable.fnGetPosition(this);
            var oTableSettings = odtbasicTable.fnSettings();
            var atData = odtbasicTable.fnGetData(aPos);

            $(this).removeClass('row-selected');
            selected = [];
            odtbasicTable.$('tr.row-selected').removeClass('row-selected');
            $(this).addClass('row-selected');
            if (selected.indexOf(atData[0]) == -1)
                selected.push(atData[0]);

            var _DynamicPage = null;
            var GridLoadParameters = [];
            var model = null;
            var lcontrolConfigDict = null;
            if (ModelUpdate != undefined && ModelUpdate != null)
                model = ModelUpdate;
            else {
                for (var i = 0; i < oModel._HTMLPageConfigLst.length; i++) {
                    model = oModel._HTMLPageConfigLst[i];
                    if (lcontrolConfigDict != null) {
                        for (var item in model.ControlConfigDict) {
                            lcontrolConfigDict[item] = model.ControlConfigDict[item];
                        }
                        model.ControlConfigDict = lcontrolConfigDict;
                    }
                    else {
                        lcontrolConfigDict = model.ControlConfigDict;
                    }
                }
            }
            if (model != null) {
                _DynamicPage = new DynamicPage(model);
                if (model.ControlConfigDict != undefined) {
                    for (var item in model.ControlConfigDict) {
                        if (model.ControlConfigDict[item].ControlTypeName != "Label")
                            GridLoadParameters.push(model.ControlConfigDict[item].ClientID)
                    }
                }
            }
            if (GridLoadParameters.length > 0) {
                for (var i = 0; i < GridLoadParameters.length; i++) {
                    var controlConfig = model.ControlConfigDict[GridLoadParameters[i]];
                    if (controlConfig != undefined && controlConfig != null) {
                        for (var j = 0; j < oTableSettings.aoColumns.length; j++) {
                            if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "ComboBox") {
                                _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[i]], atData[j - 1]);
                                break;
                            }
                            else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "TextBox") {
                                _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[i]], atData[j]);
                                break;
                            }
                            else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "Hidden") {
                                _DynamicPage.SetData(model.ControlConfigDict[GridLoadParameters[i]], atData[j]);
                                break;
                            }
                        }
                    }
                }
            }
            var _oValidationFrameWork = new ValidationFrameWork(ModelUpdate);
            _oValidationFrameWork.removeValidate();
        });
    }
}

//--Approval Grid Initialize function.
function ApprovalGridTableInitialize()
{
    var lControlId = null;
    var oModel = null;
    var GridConfigUrl = null;
    var GridDataUrl = null;
    this.execute = function () {
        IsheaderLoaded = false;
        selected = [];
        var _AdvGridTableInitialize = new AdvGridTableInitFramework();
        GridConfigUrl = GetParentFolderOfApplication() + "/DCApproval/GetGridConfig";
        GridDataUrl = GetParentFolderOfApplication() + "/DCApproval/GetAllDcForApproval";
        oModel = ModelUpdate;
        _AdvGridTableInitialize.sPaginationType = "full_numbers";
        _AdvGridTableInitialize.processing = true;
        _AdvGridTableInitialize.bServerSide = false;
        _AdvGridTableInitialize.sDom = "R<'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>Cl>r<'dt-wrapper't><'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>";
        _AdvGridTableInitialize.fnInitComplete = InitComplete;
        _AdvGridTableInitialize.iDisplayLength = 10;
        _AdvGridTableInitialize.sScrollXInner = "110%";
        _AdvGridTableInitialize.ControlId = "datatable_col_reorder";
        _AdvGridTableInitialize.aLengthMenu = [5, 10, 25, 50, 100, 500];
        lControlId = _AdvGridTableInitialize.ControlId;

        var oCommonMethodForGridInit = new CommonMethodForGridInit(lControlId, oModel, GridConfigUrl, GridDataUrl);
        //_AdvGridTableInitialize.fnHeaderCallback = oCommonMethodForGridInit.HeaderCallback;
        _AdvGridTableInitialize.fnRowCallback = RowCallBack;
        _AdvGridTableInitialize.fnDrawCallback = oCommonMethodForGridInit.DrawCallback;
        _AdvGridTableInitialize.fnFooterCallback = oCommonMethodForGridInit.FooterCallback;
        _AdvGridTableInitialize.fnInfoCallback = oCommonMethodForGridInit.InfoCallback;

        _AdvGridTableInitialize.bStateSave = false;
        _AdvGridTableInitialize.bAutoWidth = false;
        _AdvGridTableInitialize.bScrollAutoCss = true;
        _AdvGridTableInitialize.aaSorting = [[2, 'asc']];
        _AdvGridTableInitialize.onEventHandler = { eventName: 'click.DT', value: oCommonMethodForGridInit.onGridHeaderClick };
        _AdvGridTableInitialize.GridTableInitialize();

        oCommonMethodForGridInit.HeaderCallback();

        var nLength = document.getElementById('datatable_col_reorder_length');

        $('select', nLength).unbind();
        $('select', nLength).bind('change.DT', oCommonMethodForGridInit.PageCountChangeEventHandler);

        $('#selectall').click(function () {
            var oTable = $('#' + lControlId).DataTable();
            if (this.checked == true) {
                $('input', oTable.fnGetNodes()).each(function () {
                    var aPos = oTable.fnGetPosition(this.parentElement.parentElement);
                    var atData = oTable.fnGetData(aPos);
                    if (this.parentElement.parentElement._DT_RowIndex >= oTable.fnSettings()._iDisplayStart && this.parentElement.parentElement._DT_RowIndex < oTable.fnSettings()._iDisplayEnd) {
                        if (this.parentElement.parentElement.tagName == "TR") {
                            if (this.parentElement.parentElement.cells["ApprovalStatus"]) {
                                if (this.parentElement.parentElement.cells["ApprovalStatus"].innerHTML == "Pending") {
                                    $(this.parentElement.parentElement).addClass('row-selected');
                                    if (selected.indexOf(atData[0]) == -1)
                                        selected.push(atData[0]);
                                    this.checked = true;
                                    $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                                }
                                else if (this.parentElement.parentElement.cells["ApprovalStatus"].innerHTML != "Pending") {
                                    this.checked = false;
                                    $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                                    this.checked = false;
                                }
                            }
                            if (this.parentElement.parentElement.cells["UserApproved"]) {
                                if (this.parentElement.parentElement.cells["UserApproved"].innerHTML == "Pending") {
                                    $(this.parentElement.parentElement).addClass('row-selected');
                                    if (selected.indexOf(atData[0]) == -1)
                                        selected.push(atData[0]);
                                    this.checked = true;
                                    $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                                }
                                else if (this.parentElement.parentElement.cells["UserApproved"].innerHTML == "Pending") {
                                    this.checked = false;
                                    $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                                    this.checked = false;
                                }
                            }
                            if (this.parentElement.parentElement.cells["Status"]) {
                                if (this.parentElement.parentElement.cells["Status"].innerHTML == "Pending") {
                                    $(this.parentElement.parentElement).addClass('row-selected');
                                    if (selected.indexOf(atData[0]) == -1)
                                        selected.push(atData[0]);
                                    this.checked = true;
                                    $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                                }
                                else if (this.parentElement.parentElement.cells["Status"].innerHTML == "Pending") {
                                    this.checked = false;
                                    $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                                    this.checked = false;
                                }
                            }
                            $(this.parentElement.parentElement).addClass('row-selected');
                            if (selected.indexOf(atData[0]) == -1)
                                selected.push(atData[0]);
                            this.checked = true;
                            $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                        }
                    }
                });
            }
            else {
                $('input', oTable.fnGetNodes()).each(function () {
                    var aPos = oTable.fnGetPosition(this.parentElement.parentElement);
                    var atData = oTable.fnGetData(aPos);
                    if (this.parentElement.parentElement._DT_RowIndex >= oTable.fnSettings()._iDisplayStart && this.parentElement.parentElement._DT_RowIndex < oTable.fnSettings()._iDisplayEnd) {
                        this.checked = false;
                        if (this.parentElement.parentElement.tagName == "TR") {
                            if ($(this.parentElement.parentElement).hasClass('row-selected')) {
                                $(this.parentElement.parentElement).removeClass('row-selected');
                                var index = selected.indexOf(atData[0]);
                                if (index != -1)
                                    selected.splice(index, 1);
                            }
                        }
                        $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                    }
                });
            }
        });

        $('#show-tabs').click(function () {
            oCommonMethodForGridInit.ShowAllRecordsButtonClick(this);
        });

        var oTable = $('#' + lControlId).DataTable();
        $('#' + lControlId + ' tbody').unbind('click');
        $('#' + lControlId + ' tbody').on('click', 'a.details-control', function () {
            if ($(this).hasClass('action')) {
                var tr = $(this).closest('tr');
                if (!tr.hasClass('shown')) {
                    $('tr').removeClass('shown');
                    oTable.find('tr.more-info').remove();
                    tr.addClass('shown');
                    tr.after('<tr class="more-info"><td colspan="20"></td></tr>');
                    if ($("tr").hasClass("more-info")) {
                        $('tr.more-info td').append(oCommonMethodForGridInit.AddActionItemForApproval(this));
                    }
                }
                else {
                    $('tr').removeClass('shown');
                    oTable.find('tr.more-info').remove();
                }
            }
            else if ($(this).hasClass('emailcolumn')) {
                $("#myEmailSendModal").modal("show");
                oCommonMethodForGridInit.ShowNotificationDetails(this);
            }
        });
    }

    var InitComplete = function (oSettings, json) {
        $('.ColVis_Button').addClass('btn btn-default btn-sm').html('Hide / Show <i class="icon-arrow-down"></i>');
        $("div.select-all").html('<span class="onoffswitch-title">Select All Records</span><span class="onoffswitch"><input type="checkbox" name="onoffswitch" class="onoffswitch-checkbox" id="show-tabs"><label class="onoffswitch-label" for="show-tabs"><span class="onoffswitch-inner" data-swchon-text="Yes" data-swchoff-text="NO"></span><span class="onoffswitch-switch"></span></label></span>');
        $(this).closest('#dt_table_tools_wrapper').find('.DTTT.btn-group').addClass('table_tools_group').children('a.btn').each(function () {
            $(this).addClass('btn-sm btn-default');
        });
        this.css("visibility", "visible");
    }

    var RowCallBack = function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
        $(nRow).unbind('click');
        $(nRow).bind('click', RowClick);
        $(nRow).find('a').unbind('click');
        $(nRow).find('a').bind('click', MoreInfobuttonClick);
    }

    var RowClick = function () {
        var flag = window.localStorage.getItem("rowButtonClick");
        if (flag == undefined || flag == null || flag == 0) {
            var oTable = $('#' + lControlId).DataTable();
            var aPos = oTable.fnGetPosition(this);
            var atData = oTable.fnGetData(aPos);
            $('input', oTable.fnGetNodes()).each(function () {
                this.checked = false;
            });
            if ($(this).hasClass('row-selected')) {
                $(this).removeClass('row-selected');
                var index = selected.indexOf(atData[0]);
                if (index != -1)
                    selected.splice(index, 1);
                if ($("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]) != null)
                    $("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]).checked = false;
            }
            else {
                //table.$('tr.DTTT_selected.odd').removeClass('odd');
                if (this.cells["ApprovalStatus"]) {
                    if (this.cells["ApprovalStatus"].innerHTML == "Pending") {
                        if ($("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]) != null) {
                            $(this).addClass('row-selected');
                            if (selected.indexOf(atData[0]) == -1)
                                selected.push(atData[0]);
                            $("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]).checked = true;
                        }
                    }
                    else if (this.cells["ApprovalStatus"].innerHTML != "Pending") {
                        $(this).removeClass('row-selected');
                        if ($("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]) != null) {
                            $("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]).checked = false;
                        }
                    }
                }
                if (this.cells["Status"]) {
                    if (this.cells["Status"].innerHTML == "Pending") {
                        if ($("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]) != null) {
                            $(this).addClass('row-selected');
                            if (selected.indexOf(atData[0]) == -1)
                                selected.push(atData[0]);
                            $("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]).checked = true;
                        }
                    }
                    else if (this.cells["Status"].innerHTML != "Pending") {
                        $(this).removeClass('row-selected');
                        if ($("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]) != null) {
                            $("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]).checked = false;
                        }
                    }
                }
                if (this.cells["UserApproved"]) {
                    if (this.cells["UserApproved"].innerHTML == "Pending") {
                        if ($("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]) != null) {
                            $(this).addClass('row-selected');
                            if (selected.indexOf(atData[0]) == -1)
                                selected.push(atData[0]);
                            $("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]).checked = true;
                        }
                    }
                    else if (this.cells["UserApproved"].innerHTML != "Pending") {
                        $(this).removeClass('row-selected');
                        if ($("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]) != null) {
                            $("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]).checked = false;
                        }
                    }
                }
                $(this).addClass('row-selected');
                if (selected.indexOf(atData[0]) == -1)
                    selected.push(atData[0]);
                $("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]).checked = true;
            }
        }
        else
            window.localStorage.setItem("rowButtonClick", 0);
    }

    var MoreInfobuttonClick = function () {
        window.localStorage.setItem("rowButtonClick", 1);
    }
}

var IsheaderLoaded = false;
//--Shift Report Grid Initialize function.
function ShiftReportGridTableInitialize() {
    var lControlId = null;
    var oModel = null;
    var GridConfigUrl = null;
    var GridDataUrl = null;
    this.execute = function () {
        IsheaderLoaded = false;
        selected = [];
        ForUpdateId = [];
        var _AdvGridTableInitialize = new AdvGridTableInitFramework();
        GridConfigUrl = GetParentFolderOfApplication() + "/DCApproval/GetGridConfig";
        GridDataUrl = GetParentFolderOfApplication() + "/DCApproval/GetDCForShiftReport";
        oModel = ModelUpdate;
        _AdvGridTableInitialize.sPaginationType = "full_numbers";
        _AdvGridTableInitialize.processing = true;
        _AdvGridTableInitialize.bServerSide = false;
        _AdvGridTableInitialize.sDom = "R<'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>Cl>r<'dt-wrapper't><'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>";
        _AdvGridTableInitialize.fnInitComplete = InitComplete;
        _AdvGridTableInitialize.iDisplayLength = 10;
        _AdvGridTableInitialize.sScrollXInner = "110%";
        _AdvGridTableInitialize.ControlId = "datatable_col_reorder";
        lControlId = _AdvGridTableInitialize.ControlId;

        var oCommonMethodForGridInit = new CommonMethodForGridInit(lControlId, oModel, GridConfigUrl, GridDataUrl);
        //_AdvGridTableInitialize.fnHeaderCallback = oCommonMethodForGridInit.HeaderCallback;
        _AdvGridTableInitialize.fnRowCallback = RowCallBack;
        _AdvGridTableInitialize.fnDrawCallback = oCommonMethodForGridInit.DrawCallback;
        _AdvGridTableInitialize.fnFooterCallback = oCommonMethodForGridInit.FooterCallback;
        _AdvGridTableInitialize.fnInfoCallback = oCommonMethodForGridInit.InfoCallback;

        _AdvGridTableInitialize.bStateSave = false;
        _AdvGridTableInitialize.bAutoWidth = false;
        _AdvGridTableInitialize.bScrollAutoCss = true;
        _AdvGridTableInitialize.aaSorting = [[2, 'asc']];
        _AdvGridTableInitialize.onEventHandler = { eventName: 'click.DT', value: oCommonMethodForGridInit.onGridHeaderClick };
        _AdvGridTableInitialize.GridTableInitialize();

        oCommonMethodForGridInit.HeaderCallback();

        var nLength = document.getElementById('datatable_col_reorder_length');

        $('select', nLength).unbind();
        $('select', nLength).bind('change.DT', oCommonMethodForGridInit.PageCountChangeEventHandler);

        $('#selectall').click(function () {
            var oTable = $('#' + lControlId).DataTable();
            if (this.checked == true) {
                $('input', oTable.fnGetNodes()).each(function () {
                    var aPos = oTable.fnGetPosition(this.parentElement.parentElement);
                    var atData = oTable.fnGetData(aPos);
                    if (this.parentElement.parentElement._DT_RowIndex >= oTable.fnSettings()._iDisplayStart && this.parentElement.parentElement._DT_RowIndex < oTable.fnSettings()._iDisplayEnd) {
                        if (this.parentElement.parentElement.tagName == "TR") {
                            if (this.parentElement.parentElement.cells["ApprovalStatus"]) {
                                if (this.parentElement.parentElement.cells["ApprovalStatus"].innerHTML == "Pending") {
                                    $(this.parentElement.parentElement).addClass('row-selected');
                                    if (selected.indexOf(atData[0]) == -1)
                                        selected.push(atData[0]);
                                    this.checked = true;
                                    $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                                }
                                else if (this.parentElement.parentElement.cells["ApprovalStatus"].innerHTML != "Pending") {
                                    this.checked = false;
                                    $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                                    this.checked = false;
                                }
                            }
                            if (this.parentElement.parentElement.cells["UserApproved"]) {
                                if (this.parentElement.parentElement.cells["UserApproved"].innerHTML == "Pending") {
                                    $(this.parentElement.parentElement).addClass('row-selected');
                                    if (selected.indexOf(atData[0]) == -1)
                                        selected.push(atData[0]);
                                    this.checked = true;
                                    $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                                }
                                else if (this.parentElement.parentElement.cells["UserApproved"].innerHTML == "Pending") {
                                    this.checked = false;
                                    $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                                    this.checked = false;
                                }
                            }
                            if (this.parentElement.parentElement.cells["Status"]) {
                                if (this.parentElement.parentElement.cells["Status"].innerHTML == "Pending") {
                                    $(this.parentElement.parentElement).addClass('row-selected');
                                    if (selected.indexOf(atData[0]) == -1)
                                        selected.push(atData[0]);
                                    this.checked = true;
                                    $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                                }
                                else if (this.parentElement.parentElement.cells["Status"].innerHTML == "Pending") {
                                    this.checked = false;
                                    $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                                    this.checked = false;
                                }
                            }
                            $(this.parentElement.parentElement).addClass('row-selected');
                            if (selected.indexOf(atData[0]) == -1)
                                selected.push(atData[0]);
                            this.checked = true;
                            $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                        }
                    }
                });
            }
            else {
                $('input', oTable.fnGetNodes()).each(function () {
                    var aPos = oTable.fnGetPosition(this.parentElement.parentElement);
                    var atData = oTable.fnGetData(aPos);
                    if (this.parentElement.parentElement._DT_RowIndex >= oTable.fnSettings()._iDisplayStart && this.parentElement.parentElement._DT_RowIndex < oTable.fnSettings()._iDisplayEnd) {
                        this.checked = false;
                        if (this.parentElement.parentElement.tagName == "TR") {
                            if ($(this.parentElement.parentElement).hasClass('row-selected')) {
                                $(this.parentElement.parentElement).removeClass('row-selected');
                                var index = selected.indexOf(atData[0]);
                                if (index != -1)
                                    selected.splice(index, 1);
                            }
                        }
                        $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                    }
                });
            }
        });

        $('#show-tabs').click(function () {
            $this = $(this);
            var oTable = $('#' + lControlId).DataTable();
            if ($this.prop('checked')) {
                $('input', oTable.fnGetNodes()).each(function () {
                    var aPos = oTable.fnGetPosition(this.parentElement.parentElement);
                    var atData = oTable.fnGetData(aPos);
                    if (this.parentElement.parentElement.tagName == "TR") {
                        if (this.parentElement.parentElement.cells["ApprovalStatus"]) {
                            if (this.parentElement.parentElement.cells["ApprovalStatus"].innerHTML == "Pending") {
                                $(this.parentElement.parentElement).addClass('row-selected');
                                if (selected.indexOf(atData[0]) == -1)
                                    selected.push(atData[0]);
                                this.checked = true;
                                $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                            }
                            else if (this.parentElement.parentElement.cells["ApprovalStatus"].innerHTML != "Pending") {
                                this.checked = false;
                                $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                            }
                        }
                        if (this.parentElement.parentElement.cells["UserApproved"]) {
                            if (this.parentElement.parentElement.cells["UserApproved"].innerHTML == "Pending") {
                                $(this.parentElement.parentElement).addClass('row-selected');
                                if (selected.indexOf(atData[0]) == -1)
                                    selected.push(atData[0]);
                                this.checked = true;
                                $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                            }
                            else if (this.parentElement.parentElement.cells["UserApproved"].innerHTML == "Pending") {
                                this.checked = false;
                                $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                            }
                        }
                        $(this.parentElement.parentElement).addClass('row-selected');
                        if (selected.indexOf(atData[0]) == -1)
                            selected.push(atData[0]);
                        this.checked = true;
                        $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                    }
                });
                $('#selectall')[0].checked = true;
            } else {
                $('input', oTable.fnGetNodes()).each(function () {
                    var aPos = oTable.fnGetPosition(this.parentElement.parentElement);
                    var atData = oTable.fnGetData(aPos);
                    this.checked = false;
                    if (this.parentElement.parentElement.tagName == "TR") {
                        if ($(this.parentElement.parentElement).hasClass('row-selected')) {
                            $(this.parentElement.parentElement).removeClass('row-selected');
                            var index = selected.indexOf(atData[0]);
                            if (index != -1)
                                selected.splice(index, 1);
                        }
                    }
                    $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                });
                $('#selectall')[0].checked = false;
            }
        });

        var oTable = $('#' + lControlId).DataTable();
        $('#' + lControlId + ' tbody').on('click', 'a.details-control', function () {
            $("#myEmailSendModal").modal("show");
            oCommonMethodForGridInit.ShowNotificationDetails(this);
        });
    }

    var InitComplete = function (oSettings, json) {
        $('.ColVis_Button').addClass('btn btn-default btn-sm').html('Hide / Show <i class="icon-arrow-down"></i>');
        $("div.select-all").html('<span class="onoffswitch-title">Select All Records</span><span class="onoffswitch"><input type="checkbox" name="onoffswitch" class="onoffswitch-checkbox" id="show-tabs"><label class="onoffswitch-label" for="show-tabs"><span class="onoffswitch-inner" data-swchon-text="Yes" data-swchoff-text="NO"></span><span class="onoffswitch-switch"></span></label></span>');
        $(this).closest('#dt_table_tools_wrapper').find('.DTTT.btn-group').addClass('table_tools_group').children('a.btn').each(function () {
            $(this).addClass('btn-sm btn-default');
        });
        this.css("visibility", "visible");
    }

    var RowCallBack = function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
        $(nRow).unbind('click');
        $(nRow).bind('click', RowClick);
        $(nRow).find('a').unbind('click');
        $(nRow).find('a').bind('click', MoreInfobuttonClick);
    }

    var RowClick = function () {
        var flag = window.localStorage.getItem("rowButtonClick");
        if (flag == undefined || flag == null || flag == 0) {
            var oTable = $('#' + lControlId).DataTable();
            var oTableSettings = oTable.fnSettings();
            var aPos = oTable.fnGetPosition(this);
            var atData = oTable.fnGetData(aPos);
            $('input', oTable.fnGetNodes()).each(function () {
                this.checked = false;
            });
            RemoveMessage();

            ListViewModel = {};
            selected = [];
            ForUpdateId = [];
            $(this).removeClass('row-selected');
            oTable.$('tr.row-selected').removeClass('row-selected');
            if ($(this).hasClass('row-selected')) {
                $(this).removeClass('row-selected');
                var index = selected.indexOf(atData[0]);
                if (index != -1)
                    selected.splice(index, 1);
                var ForUpdateIdIndex = ForUpdateId.indexOf(atData[0]);
                if (ForUpdateIdIndex != -1)
                    ForUpdateId.splice(ForUpdateIdIndex, 1);
                if ($("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]) != null)
                    $("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]).checked = false;
            }
            else {
                if (ForUpdateId.indexOf(atData[0]) == -1)
                    ForUpdateId.push(atData[0]);
                //table.$('tr.DTTT_selected.odd').removeClass('odd');
                if (this.cells["ApprovalStatus"]) {
                    if (this.cells["ApprovalStatus"].innerHTML == "Pending") {
                        $(this).addClass('row-selected');
                        if (selected.indexOf(atData[0]) == -1)
                            selected.push(atData[0]);
                        DataPopulateAfterClick(atData);
                    }
                    else if (this.cells["ApprovalStatus"].innerHTML != "Pending") {
                        $(this).removeClass('row-selected');
                        ShowMessage("IN-WN-SRE-004 :: The Selected Record Already Approved.", 2);
                        
                    }
                }
                if (this.cells["Status"]) {
                    if (this.cells["Status"].innerHTML == "Pending") {
                        $(this).addClass('row-selected');
                        if (selected.indexOf(atData[0]) == -1)
                            selected.push(atData[0]);
                        if ($("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]) != null) {
                            $("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]).checked = true;
                        }
                        DataPopulateAfterClick(atData);
                    }
                    else if (this.cells["Status"].innerHTML != "Pending") {
                        $(this).removeClass('row-selected');
                        if ($("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]) != null) {
                            $("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]).checked = false;
                        }
                        ShowMessage("IN-WN-SRE-004 :: The Selected Record Already Approved.", 2);
                    }
                }
                if (this.cells["UserApproved"]) {
                    if (this.cells["UserApproved"].innerHTML == "Pending") {
                        $(this).addClass('row-selected');
                        if (selected.indexOf(atData[0]) == -1)
                            selected.push(atData[0]);
                        if ($("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]) != null) {
                            $("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]).checked = true;
                        }
                        DataPopulateAfterClick(atData);
                    }
                    else if (this.cells["UserApproved"].innerHTML != "Pending") {
                        $(this).removeClass('row-selected');
                        if ($("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]) != null) {
                            $("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]).checked = false;
                        }
                        ShowMessage("IN-WN-SRE-004 :: The Selected Record Already Approved.", 2);
                    }
                }
                $(this).addClass('row-selected');
                if (selected.indexOf(atData[0]) == -1)
                    selected.push(atData[0]);
                if ($("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]) != null) {
                    $("Chk_" + atData[0]).context.getElementById("Chk_" + atData[0]).checked = true;
                }
                DataPopulateAfterClick(atData);
            }
        }
        else
            window.localStorage.setItem("rowButtonClick", 0);
    }

    var MoreInfobuttonClick = function () {
        window.localStorage.setItem("rowButtonClick", 1);
    }

    var DataPopulateAfterClick = function (atData)
    {
        var oTable = $('#' + lControlId).DataTable();
        var oTableSettings = oTable.fnSettings();
        var GridLoadParameters = [];
        var _DynamicPage = new DynamicPage(ModelUpdate);
        if (ModelUpdate.ControlConfigDict != undefined) {
            for (var item in ModelUpdate.ControlConfigDict) {
                if (ModelUpdate.ControlConfigDict[item].ControlTypeName != "Label")
                    GridLoadParameters.push(ModelUpdate.ControlConfigDict[item].ClientID)
            }
        }
        else if (ModelUpdate.ControlConfigDict == undefined) {
            GridLoadParameters = getGridLoadParameters(ModelUpdate.ControlGroupConfigLst);
        }
        if (GridLoadParameters.length > 0) {
            for (var i = 0; i < GridLoadParameters.length; i++) {
                var controlConfig = ModelUpdate.ControlGroupConfigLst[0].ControlConfigDict[GridLoadParameters[i]];
                if (controlConfig != undefined && controlConfig != null) {
                    for (var j = 0; j < oTableSettings.aoColumns.length; j++) {
                        if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "ComboBox" && controlConfig.ComboType == 1) {
                            var _ComboBox = new WiNAiMComboBox(ModelUpdate);
                            _ComboBox.setData(controlConfig, atData[j].split('|'));
                            _ComboBox.onchange(controlConfig);
                            break;
                        }
                        else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "ComboBox") {
                            var _ComboBox = new WiNAiMComboBox(ModelUpdate);
                            _ComboBox.setData(controlConfig, atData[j]);
                            _ComboBox.onchange(controlConfig);
                            break;
                        }
                        else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "RadioButton" && controlConfig.RadioButtonType == 1) {
                            if (controlConfig.ControlID == "CorrectiveAction") {
                                var values = '';
                                for (var itr = 0; itr < GridResultData.length; itr++) {
                                    if (atData[0] == GridResultData[itr].DataCaptureId) {
                                        if (GridResultData[itr].DCNCDTO != null) {
                                            for (var jtr = 0; jtr < GridResultData[itr].DCNCDTO.length; jtr++) {
                                                if (GridResultData[itr].DCNCDTO[jtr].ActionDTO != null && GridResultData[itr].DCNCDTO[jtr].ActionDTO != undefined) {
                                                    var ActionDetailLst = GridResultData[itr].DCNCDTO[jtr].ActionDTO.ActionDetailsLst;
                                                    if (ActionDetailLst != null) {
                                                        for (var ktr = 0; ktr < ActionDetailLst.length; ktr++) {
                                                            if (ActionDetailLst[ktr].CustomAction != null && ActionDetailLst[ktr].CustomAction != undefined &&
                                                                ActionDetailLst[ktr].CustomAction != "") {
                                                                if (values == '')
                                                                    values = ActionDetailLst[ktr].CustomAction + "$sp$0$sp$" + ActionDetailLst[ktr].ServerId;
                                                                else
                                                                    values = values + "|" + ActionDetailLst[ktr].CustomAction + "$sp$0$sp$" + ActionDetailLst[ktr].ServerId;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        break;
                                    }
                                }
                                _DynamicPage.SetData(controlConfig, values);
                            }
                            else
                                _DynamicPage.SetData(controlConfig, atData[j]);
                            break;
                        }
                        else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "RadioButton" && controlConfig.RadioButtonType == 0) {
                            _DynamicPage.SetData(controlConfig, atData[j]);
                            break;
                        }
                        else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "TextBox") {
                            _DynamicPage.SetData(controlConfig, atData[j]);
                            break;
                        }
                        else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "Hidden") {
                            _DynamicPage.SetData(controlConfig, atData[j]);
                            break;
                        }
                        else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "DatePicker") {
                            _DynamicPage.SetData(controlConfig, atData[j] + ',' + atData[j]);
                            break;
                        }
                        else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "ImageControl") {
                            _DynamicPage.SetData(controlConfig, atData[j]);
                            break;
                        }
                    }
                }
            }
        }
        var collapseOne = document.getElementById('collapseOne');
        var acollapseOne = document.getElementById('acollapseOne');
        var collapseTwo = document.getElementById('collapseTwo');
        var acollapseTwo = document.getElementById('acollapseTwo');
        if (collapseOne != undefined && collapseOne != null && acollapseOne != undefined && acollapseOne != null) {
            collapseOne.classList.add("in");
            collapseOne.style.height = '';
            acollapseOne.classList.remove("collapsed");
        }
        if (collapseTwo != undefined && collapseTwo != null && acollapseTwo != undefined && acollapseTwo != null) {
            collapseTwo.classList.remove("in");
            collapseOne.style.height = '';
            acollapseTwo.classList.add("collapsed");
        }
    }
}

function MoreInfoButtonClickEventReportPage(button, lControlId) {
    MoreInfoButtonClickEvent(button, lControlId, "NCCountbuttonClickReportPage", "ReportPageNCRFormButtonClick");
}

function MoreInfoButtonClickEventApprovalPage(button, lControlId) {
    MoreInfoButtonClickEvent(button, lControlId, "NCCountbuttonClickApprovalPage", "NCRFormButtonClick");
}

function MoreInfoButtonClickEvent(button, lControlId, NCButtonClickEvent, NCRButtonClickEvent) {
    var currentRow = button.getAttribute('currentRow');
    try {
        currentRow = JSON.parse(currentRow);
    }
    catch (ex) {
        currentRow = null;
    }
    if (currentRow != null && currentRow != undefined && (currentRow.IsNCRAvailable || currentRow.NCCount > 0)) {
        var div = document.createElement('div');
        div.setAttribute("class", "text-center ClassMore");
        if (currentRow.NCCount > 0) {
            var NCaTag = document.createElement('a');
            var span = document.createElement('span');
            NCaTag.setAttribute("id", ("btn_" + currentRow.DataCaptureId));
            NCaTag.setAttribute("href", "javascript:void(0);");
            NCaTag.setAttribute("class", "btn btn-default");
            NCaTag.setAttribute("onclick", (NCButtonClickEvent + "('" + NCaTag.id + "', '" + lControlId + "')"));
            NCaTag.innerHTML = "Action ";
            span.setAttribute("class", "badge bg-color-red txt-color-white");
            span.innerHTML = currentRow.NCCount;
            NCaTag.appendChild(span);
            div.appendChild(NCaTag);
        }
        if (currentRow.IsNCRAvailable != undefined && currentRow.IsNCRAvailable) {
            var NCraTag = document.createElement('a');
            NCraTag.setAttribute("id", ("btn1_" + currentRow.DataCaptureId));
            NCraTag.setAttribute("href", "javascript:void(0);");
            NCraTag.setAttribute("class", "btn btn-default");
            NCraTag.setAttribute("onclick", (NCRButtonClickEvent + "('" + NCraTag.id + "')"));
            NCraTag.innerHTML = "NCR Form";
            div.appendChild(NCraTag);
        }
        divOutterHtml = div.outerHTML;
        button.setAttribute("rel", "popover");
        button.setAttribute("data-placement", "top");
        button.setAttribute("data-original-title", "More Info");
        button.setAttribute("data-content", divOutterHtml);
        button.setAttribute("data-original-title", "More Info");
        button.setAttribute("data-html", "true");
        $("[rel=popover]").popover();
    }
}

function NCCountbuttonClick(button, lControlId) {
    window.localStorage.setItem("rowButtonClick", 1);
    if (document.getElementById(button) != undefined && document.getElementById(button) != null) {
        var _CommonMethodForGridInit = new CommonMethodForGridInit(lControlId);
        _CommonMethodForGridInit.NCDetails(document.getElementById(button), (GetParentFolderOfApplication() + '/DCApproval/GetNCDetails/' + ModelUpdate.Page));
    }
}

function NCCountbuttonClickApprovalPage(button, lControlId) {
    window.localStorage.setItem("rowButtonClick", 1);
    var NCButton = document.getElementById(button);
    if (NCButton != undefined && NCButton != null) {
        var _CommonMethodForGridInit = new CommonMethodForGridInit_Modified(lControlId);
        _CommonMethodForGridInit.NCDetailsApproval(NCButton);
    }
}

function NCCountbuttonClickReportPage(button, lControlId) {
    window.localStorage.setItem("rowButtonClick", 1);
    var NCButton = document.getElementById(button);
    if (NCButton != undefined && NCButton != null) {
        var _CommonMethodForGridInit = new CommonMethodForGridInit_Modified(lControlId);
        _CommonMethodForGridInit.NCDetails(NCButton);
    }
}

function NCRFormButtonClick(button) {
    window.localStorage.setItem("rowButtonClick", 1);
    var formmodel = $(".formmodel");
    if (formmodel.length > 0) {
        for (var itr = 0; itr < formmodel.length; itr++) {
            $('input', formmodel[itr].childNodes).each(function () {
                if (this.id.indexOf("txt_") > -1) {
                    this.value = null;
                }
            });
        }
    }
    var DCId = button.split('_');
    if (DCId.length > 1) {
        var params = GetGridLoadParameters("", ModelUpdate);
        var parameter = { request: JSON.stringify(params[0]), DCId: DCId[1] };
        var result = GetDataSource(GetParentFolderOfApplication() + "/DCApproval/GetNCRDataCaptureByDCId/" + 1, JSON.stringify(parameter));
        for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
            for (var item in result[itrCnt]) {
                var control = document.getElementById("txt_" + item);
                if (control != undefined && control != null) {
                    if (control.type == 'image') {
                        control.src = "data:image/png;base64," + result[itrCnt][item];
                        if (result[itrCnt][item] != '' && result[itrCnt][item] != null)
                            control.style.width = '50%';
                        else
                            control.style.width = '';
                    }
                    else {
                        control.value = result[itrCnt][item];
                    }
                }
            }
        }
        var TemplateId = document.getElementById(ModelUpdate.PageID + "_ddlTempName");
        if (TemplateId != undefined && TemplateId != null) {
            TemplateId = parseInt(TemplateId.value);
            if (TemplateId == 140 || TemplateId == 282 || TemplateId == 116 || TemplateId == 128 || TemplateId == 8272 || TemplateId == 12208)
                $("#myNCRModal").modal("show");
            else if (TemplateId == 2 || TemplateId == 3 || TemplateId == 88 || TemplateId == 325 || TemplateId == 342 || TemplateId == 8314)
                $("#myNCRModal1").modal("show");
            else
                $("#myNCRModal2").modal("show");
        }
    }
}

function ReportPageNCRFormButtonClick(button) {
    window.localStorage.setItem("rowButtonClick", 1);
    var formmodel = $(".formmodel");
    if (formmodel.length > 0) {
        for (var itr = 0; itr < formmodel.length; itr++) {
            $('input', formmodel[itr].childNodes).each(function () {
                if (this.id.indexOf("txt_") > -1) {
                    this.value = null;
                }
            });
        }
    }
    var DCId = button.split('_');
    if (DCId.length > 1) {
        var params = GetGridLoadParameters("", ModelUpdate);
        var parameter = { request: JSON.stringify(params[0]), DCId: DCId[1] };
        var result = GetDataSource(GetParentFolderOfApplication() + "/DCApproval/GetNCRDataCaptureByDCId/" + 0, JSON.stringify(parameter));
        for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
            for (var item in result[itrCnt]) {
                var control = document.getElementById("txt_" + item);
                if (control != undefined && control != null) {
                    if (control.type == 'image') {
                        control.src = "data:image/png;base64," + result[itrCnt][item];
                        if (result[itrCnt][item] != '' && result[itrCnt][item] != null)
                            control.style.width = '50%';
                        else
                            control.style.width = '';
                    }
                    else {
                        control.value = result[itrCnt][item];
                    }
                }
            }
        }
        var TemplateId = document.getElementById(ModelUpdate.PageID + "_ddlTempName");
        if (TemplateId != undefined && TemplateId != null) {
            TemplateId = parseInt(TemplateId.value);
            if (TemplateId == 140 || TemplateId == 282 || TemplateId == 116 || TemplateId == 128 || TemplateId == 8272 || TemplateId == 12208)
                $("#myNCRModal").modal("show");
            else if (TemplateId == 2 || TemplateId == 3 || TemplateId == 88 || TemplateId == 325 || TemplateId == 342 || TemplateId == 8314)
                $("#myNCRModal1").modal("show");
            else
                $("#myNCRModal2").modal("show");
        }
    }
}

//--Report Grid Initialize function.
function DCReportGridInit()
{
    var lControlId = null;
    var oModel = null;
    var GridConfigUrl = null;
    var GridDataUrl = null;
    this.execute = function () {
        selected = [];
        //-- Initialize Our Data Table Grid Framework.
        var _AdvGridTableInitialize = new AdvGridTableInitFramework();
        GridConfigUrl = GetParentFolderOfApplication() + "/Report/GetGridConfig";
        GridDataUrl = GetParentFolderOfApplication() + "/Report/GetAllDcForMonitoring";
        oModel = ModelUpdate;
        _AdvGridTableInitialize.sPaginationType = "full_numbers";
        _AdvGridTableInitialize.sDom = "R<'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>Cl>r<'dt-wrapper't><'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>";
        _AdvGridTableInitialize.fnInitComplete = InitComplete;
        _AdvGridTableInitialize.iDisplayLength = 10;
        _AdvGridTableInitialize.aLengthMenu = [5, 10, 25, 50, 100, 500];
        _AdvGridTableInitialize.sScrollXInner = "110%";
        _AdvGridTableInitialize.ControlId = "datatable_tabletools";
        lControlId = _AdvGridTableInitialize.ControlId;

        //-- Initialize Common Method class.
        var oCommonMethodForGridInit = new CommonMethodForGridInit(lControlId, oModel, GridConfigUrl, GridDataUrl);
        _AdvGridTableInitialize.fnHeaderCallback = oCommonMethodForGridInit.HeaderCallback;
        _AdvGridTableInitialize.fnRowCallback = RowCallBack;
        _AdvGridTableInitialize.fnDrawCallback = oCommonMethodForGridInit.DrawCallback;
        _AdvGridTableInitialize.fnInfoCallback = oCommonMethodForGridInit.InfoCallback;

        _AdvGridTableInitialize.bStateSave = false;
        _AdvGridTableInitialize.bAutoWidth = false;
        _AdvGridTableInitialize.bScrollAutoCss = true;
        _AdvGridTableInitialize.aaSorting = [[1, 'asc']];
        _AdvGridTableInitialize.onEventHandler = { eventName: 'click.DT', value: oCommonMethodForGridInit.onGridHeaderClick };
        _AdvGridTableInitialize.GridTableInitialize();

        var nLength = document.getElementById('datatable_tabletools_length');

        $('select', nLength).unbind();
        $('select', nLength).bind('change.DT', oCommonMethodForGridInit.PageCountChangeEventHandler);

        var oTable = $('#' + lControlId).DataTable();
        $('#' + lControlId + ' tbody').unbind('click');
        $('#' + lControlId + ' tbody').on('click', 'a.details-control', function () {
            var tr = $(this).closest('tr');
            if (!tr.hasClass('shown')) {
                $('tr').removeClass('shown');
                oTable.find('tr.more-info').remove();
                tr.addClass('shown');
                tr.after('<tr class="more-info"><td colspan="20"></td></tr>');
                if ($("tr").hasClass("more-info")) {
                    $('tr.more-info td').append(oCommonMethodForGridInit.AddActionItem(this));
                }
            }
            else {
                $('tr').removeClass('shown');
                oTable.find('tr.more-info').remove();
            }
        });
    }

    var InitComplete = function (oSettings, json) {
        $('.ColVis_Button').addClass('btn btn-default btn-sm').html('Hide / Show <i class="icon-arrow-down"></i>');
        $(this).closest('#dt_table_tools_wrapper').find('.DTTT.btn-group').addClass('table_tools_group').children('a.btn').each(function () {
            $(this).addClass('btn-sm btn-default');
        });
        this.css("visibility", "visible");
    }

    var RowCallBack = function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
        $(nRow).unbind('click');
        $(nRow).bind('click', RowClick);
        $(nRow).find("a").unbind('click');
        $(nRow).find("a").bind('click', MoreInfobuttonClick);
    }

    var RowClick = function () {
        var flag = window.localStorage.getItem("rowButtonClick");
        if (flag == undefined || flag == null || flag == 0) {
            var oTable = $('#' + lControlId).DataTable();
            var aPos = oTable.fnGetPosition(this);
            var atData = oTable.fnGetData(aPos);
            if ($(this).hasClass('row-selected')) {
                $(this).removeClass('row-selected');
                var index = selected.indexOf(atData[0]);
                if (index != -1)
                    selected.splice(index, 1);
            }
            else {
                $(this).addClass('row-selected');
                if (selected.indexOf(atData[0]) == -1)
                    selected.push(atData[0]);
            }
        }
        else
            window.localStorage.setItem("rowButtonClick", 0);
    }

    var MoreInfobuttonClick = function () {
        window.localStorage.setItem("rowButtonClick", 1);
    }
}

//--Operation Log Grid Initialize function.
function OperationLogGridInit() {
    var lControlId = null;
    var oModel = null;
    var GridConfigUrl = null;
    var GridDataUrl = null;
    this.execute = function () {
        IsheaderLoaded = false;
        selected = [];
        //-- Initialize Our Data Table Grid Framework.
        var _AdvGridTableInitialize = new AdvGridTableInitFramework();
        GridConfigUrl = GetParentFolderOfApplication() + "/Report/GetGridConfigForOperationLog";
        GridDataUrl = GetParentFolderOfApplication() + "/Report/GetAllOperationLog";
        oModel = ModelUpdate;
        _AdvGridTableInitialize.sPaginationType = "full_numbers";
        _AdvGridTableInitialize.sDom = "R<'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>l>r<'dt-wrapper't><'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>";
        _AdvGridTableInitialize.fnInitComplete = InitComplete;
        _AdvGridTableInitialize.iDisplayLength = 10;
        _AdvGridTableInitialize.sScrollXInner = "110%";
        _AdvGridTableInitialize.ControlId = "datatable_OperLog";
        lControlId = _AdvGridTableInitialize.ControlId;

        //-- Initialize Common Method class.
        var oCommonMethodForGridInit = new CommonMethodForGridInit(lControlId, oModel, GridConfigUrl, GridDataUrl);
        _AdvGridTableInitialize.fnHeaderCallback = oCommonMethodForGridInit.HeaderCallback;
        _AdvGridTableInitialize.fnDrawCallback = oCommonMethodForGridInit.DrawCallback;
        _AdvGridTableInitialize.fnInfoCallback = oCommonMethodForGridInit.InfoCallback;

        _AdvGridTableInitialize.bStateSave = false;
        _AdvGridTableInitialize.bAutoWidth = false;
        _AdvGridTableInitialize.bScrollAutoCss = true;
        _AdvGridTableInitialize.aaSorting = [[0, 'asc']];
        _AdvGridTableInitialize.onEventHandler = { eventName: 'click.DT', value: oCommonMethodForGridInit.onGridHeaderClick };
        _AdvGridTableInitialize.GridTableInitialize();

        var nLength = document.getElementById('datatable_OperLog_length');

        $('select', nLength).unbind();
        $('select', nLength).bind('change.DT', oCommonMethodForGridInit.PageCountChangeEventHandler);
    }

    var InitComplete = function (oSettings, json) {
        //$('.ColVis_Button').addClass('btn btn-default btn-sm').html('Hide / Show <i class="icon-arrow-down"></i>');
        $(this).closest('#dt_table_tools_wrapper').find('.DTTT.btn-group').addClass('table_tools_group').children('a.btn').each(function () {
            $(this).addClass('btn-sm btn-default');
        });
        this.css("visibility", "visible");
    }
}

//--Drill Down Grid Initialize function.
function CustomeAttributeGroupDrillDownGridInit() {
    this.lControlId = null;
    var oModel = null;
    this.GridConfigUrl = null;
    this.GridDataUrl = null;
    var myInstance = this;
    this.execute = function () {
        selected = [];
        //-- Initialize Our Data Table Grid Framework.
        var _AdvGridTableInitialize = new AdvGridTableInitFramework();
        GridConfigUrl = myInstance.GridConfigUrl;
        GridDataUrl = myInstance.GridDataUrl;
        _AdvGridTableInitialize.sPaginationType = "full_numbers";
        _AdvGridTableInitialize.sDom = "<'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>lf>r<'dt-wrapper't><'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>";
        _AdvGridTableInitialize.fnInitComplete = InitComplete;
        _AdvGridTableInitialize.iDisplayLength = 5;
        _AdvGridTableInitialize.sScrollXInner = "110%";
        _AdvGridTableInitialize.ControlId = myInstance.lControlId;

        //-- Initialize Common Method class.
        var oCommonMethodForGridInit = new CommonMethodForGridInit(myInstance.lControlId, oModel, GridConfigUrl, GridDataUrl);
        _AdvGridTableInitialize.fnHeaderCallback = oCommonMethodForGridInit.HeaderCallback;
        //_AdvGridTableInitialize.fnDrawCallback = oCommonMethodForGridInit.DrawCallback;
        //_AdvGridTableInitialize.fnInfoCallback = oCommonMethodForGridInit.InfoCallback;

        _AdvGridTableInitialize.bStateSave = false;
        _AdvGridTableInitialize.bAutoWidth = false;
        _AdvGridTableInitialize.bScrollAutoCss = true;
        _AdvGridTableInitialize.aaSorting = [[0, 'asc']];
        //_AdvGridTableInitialize.onEventHandler = { eventName: 'click.DT', value: oCommonMethodForGridInit.onGridHeaderClick };
        _AdvGridTableInitialize.GridTableInitialize();

        //var nLength = document.getElementById(myInstance.lControlId + '_length');

        //$('select', nLength).unbind();
        //$('select', nLength).bind('change.DT', oCommonMethodForGridInit.PageCountChangeEventHandler);
    }

    var InitComplete = function (oSettings, json) {
        //$('.ColVis_Button').addClass('btn btn-default btn-sm').html('Hide / Show <i class="icon-arrow-down"></i>');
        $(this).closest('#dt_table_tools_wrapper').find('.DTTT.btn-group').addClass('table_tools_group').children('a.btn').each(function () {
            $(this).addClass('btn-sm btn-default');
        });
        this.css("visibility", "visible");
    }
}

//--Default Grid Initialize function.
function DefaultGridInit() {
    this.lControlId = null;
    this.oModel = null;
    this.GridConfigUrl = null;
    this.GridDataUrl = null;
    this.RowClickEvent = null;
    this.DataSourceConfig = null;
    this.sDom = "<'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>lf>r<'dt-wrapper't><'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>";
    var myInstance = this;
    this.execute = function () {
        IsheaderLoaded = false;
        selected = [];
        //-- Initialize Our Data Table Grid Framework.
        var _AdvGridTableInitialize = new AdvGridTableInitFramework();
        GridConfigUrl = myInstance.GridConfigUrl;
        GridDataUrl = myInstance.GridDataUrl;
        _AdvGridTableInitialize.sPaginationType = "full_numbers";
        _AdvGridTableInitialize.sDom = myInstance.sDom;
        //"<'dt-row dt-bottom-row'<'row'<'col-sm-6'i>>lf>r<'dt-wrapper't><'dt-row dt-bottom-row'<'row'<'col-sm-6'i>>"
        _AdvGridTableInitialize.fnInitComplete = InitComplete;
        if(myInstance.DataSourceConfig != undefined && myInstance.DataSourceConfig != null && myInstance.DataSourceConfig.PageSize > 0)
            _AdvGridTableInitialize.iDisplayLength = myInstance.DataSourceConfig.PageSize;
        else
        _AdvGridTableInitialize.iDisplayLength = 5;
        _AdvGridTableInitialize.sScrollXInner = "110%";
        _AdvGridTableInitialize.ControlId = myInstance.lControlId;
        _AdvGridTableInitialize.fnRowCallback = RowCallBack;

        //-- Initialize Common Method class.
        var oCommonMethodForGridInit = new CommonMethodForGridInit(myInstance.lControlId, myInstance.oModel, GridConfigUrl, GridDataUrl);
        //_AdvGridTableInitialize.fnHeaderCallback = oCommonMethodForGridInit.HeaderCallback;

        _AdvGridTableInitialize.bStateSave = false;
        _AdvGridTableInitialize.bAutoWidth = false;
        _AdvGridTableInitialize.bScrollAutoCss = true;
        _AdvGridTableInitialize.aaSorting = [[0, 'asc']];
        _AdvGridTableInitialize.GridTableInitialize();

        oCommonMethodForGridInit.HeaderCallback();
    }

    var RowCallBack = function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
        $(nRow).unbind('click');
        $(nRow).bind('click', RowClick);
    }

    var RowClick = function () {
        if (myInstance.RowClickEvent != undefined && myInstance.RowClickEvent != null) {
            for (var item in myInstance.RowClickEvent) {
                if (typeof (myInstance.RowClickEvent[item]) != 'function') {
                    var jobEvent = new window[myInstance.RowClickEvent[item]]();
                    if (jobEvent != undefined && jobEvent != null) {
                        jobEvent.DataSourceConfig = myInstance.DataSourceConfig;
                        jobEvent.ControlId = myInstance.lControlId;
                        jobEvent.execute(this);
                    }
                }
            }
        }
    }

    var InitComplete = function (oSettings, json) {
        $('.ColVis_Button').addClass('btn btn-default btn-sm').html('Hide / Show <i class="icon-arrow-down"></i>');
        $(this).closest('#dt_table_tools_wrapper').find('.DTTT.btn-group').addClass('table_tools_group').children('a.btn').each(function () {
            $(this).addClass('btn-sm btn-default');
        });
        this.css("visibility", "visible");
    }
}

function DashBoardPendingApprovalGridRowClickEvents() {
    var myInstance = this;
    this.ControlId = '';
    this.DataSourceConfig = null;
    this.execute = function (row) {
        param = { request: "" };
        window.localStorage.setItem("CurrentMenuId", "li_Approve");

        var odtbasicTable = $("#" + myInstance.ControlId).DataTable();
        var aPos = odtbasicTable.fnGetPosition(row);
        var atData = odtbasicTable.fnGetData(aPos);

        var UserId = atData[3];
        var TemplateId = atData[4];
        var PlaceId = atData[5];
        var TemplateGroupId = atData[7];
        var PlaceDimension = 0;
        var paramToLoad = GetLoadParam(myInstance.DataSourceConfig);
        var ddl_PlaceDimension = paramToLoad["PlaceDimension"];
        if (ddl_PlaceDimension != undefined && ddl_PlaceDimension != null)
            PlaceDimension = ddl_PlaceDimension;

        var url = "/DCApproval/ApprovalPageNew/1";
        var daterangeText = paramToLoad["Date"];
        if (daterangeText == undefined || daterangeText == null)
            daterangeText = '';
        window.location.href = GetParentFolderOfApplication() + url + "?TemplateId=" + TemplateId + "&PlaceId=" + PlaceId + "&Date=" +
            daterangeText + "&User=" + UserId + "&Approve=" + 0 + "&PlaceDimension=" + PlaceDimension + "&TemplateGroupId=" + TemplateGroupId;
    }

    var GetLoadParam = function () {
        var parameterToLoadData = {};
        if (myInstance.DataSourceConfig != undefined && myInstance.DataSourceConfig != null) {
            if (myInstance.DataSourceConfig.LoadParms != undefined && myInstance.DataSourceConfig.LoadParms != null) {
                for (var param in myInstance.DataSourceConfig.LoadParms) {
                    var paramValue = '';
                    try {
                        paramValue = eval(myInstance.DataSourceConfig.LoadParms[param]);
                    }
                    catch (ex) {
                        console.log('param not correct');
                    }
                    if (paramValue != undefined)
                        parameterToLoadData[param] = paramValue;
                }
            }
            try {
                parameterToLoadData["Ids"] = JSON.stringify(selected);
            }
            catch (ex) {
                console.log('selected variable undefined');
            }
        }
        return parameterToLoadData;
    }
}

function CleaningPendingApprovalGridRowClickEvents() {
    var myInstance = this;
    this.ControlId = '';
    this.DataSourceConfig = null;
    this.execute = function (row) {
        param = { request: "" };
        window.localStorage.setItem("CurrentMenuId", "li_Approve");

        var odtbasicTable = $("#" + myInstance.ControlId).DataTable();
        var aPos = odtbasicTable.fnGetPosition(row);
        var atData = odtbasicTable.fnGetData(aPos);

        var UserId = atData[3];
        var TemplateId = atData[4];
        var PlaceId = atData[5];
        var TemplateGroupId = atData[10];
        var Unit = atData[7];
        var Section = atData[8];
        var Location = atData[9];
        var PlaceDimension = 0;
        var paramToLoad = GetLoadParam(myInstance.DataSourceConfig);
        var ddl_PlaceDimension = paramToLoad["PlaceDimension"];
        if (ddl_PlaceDimension != undefined && ddl_PlaceDimension != null)
            PlaceDimension = ddl_PlaceDimension;

        var url = "/DCApproval/ApprovalPageNew/2";
        var daterangeText = paramToLoad["Date"];
        if (daterangeText == undefined || daterangeText == null)
            daterangeText = '';
        window.location.href = GetParentFolderOfApplication() + url + "?TemplateId=" + TemplateId + "&PlaceId=" + PlaceId + "&Date=" +
            daterangeText + "&User=" + UserId + "&Approve=" + 0 + "&PlaceDimension=" + PlaceDimension + "&TemplateGroupId=" + TemplateGroupId +
            "&Unit=" + Unit + "&Section=" + Section + "&Location=" + Location;
    }

    var GetLoadParam = function () {
        var parameterToLoadData = {};
        if (myInstance.DataSourceConfig != undefined && myInstance.DataSourceConfig != null) {
            if (myInstance.DataSourceConfig.LoadParms != undefined && myInstance.DataSourceConfig.LoadParms != null) {
                for (var param in myInstance.DataSourceConfig.LoadParms) {
                    var paramValue = '';
                    try {
                        paramValue = eval(myInstance.DataSourceConfig.LoadParms[param]);
                    }
                    catch (ex) {
                        console.log('param not correct');
                    }
                    if (paramValue != undefined)
                        parameterToLoadData[param] = paramValue;
                }
            }
            try {
                parameterToLoadData["Ids"] = JSON.stringify(selected);
            }
            catch (ex) {
                console.log('selected variable undefined');
            }
        }
        return parameterToLoadData;
    }
}

function DefaultGridRowClickEvent() {
    var myInstance = this;
    this.ControlId = '';
    this.DataSourceConfig = null;
    this.execute = function () {
        var currObj = this;
        var rowIndex = currObj.getAttribute("rowIndex");
        var IdColumn = currObj.childNodes['0'];
        var Id = null;
        if (IdColumn != null && $(IdColumn).hasClass("hide") && IdColumn.textContent != '') {
            try {
                Id = parseInt(IdColumn.textContent);
            }
            catch (ex) {
                Id = null;
                console.error(ex);
            }
        }
        if (Id != null) {
            if ($(currObj).hasClass('row-selected')) {
                $(currObj).removeClass('row-selected');
                var index = selected.indexOf(Id);
                if (index != -1)
                    selected.splice(index, 1);
                if ($("Chk_" + Id).context.getElementById("Chk_" + Id) != null)
                    $("Chk_" + Id).context.getElementById("Chk_" + Id).checked = false;
            }
            else {
                $(currObj).addClass('row-selected');
                if (selected.indexOf(Id) == -1 && Id != undefined && Id != null && Id != '')
                    selected.push(Id);
                if ($("Chk_" + Id) != undefined && $("Chk_" + Id) != null && $("Chk_" + Id).context.getElementById("Chk_" + Id) != null)
                    $("Chk_" + Id).context.getElementById("Chk_" + Id).checked = true;
            }
        }
        event.preventDefault();
    }
}

function DefaultPaginatedReportGridInit() {
    this.lControlId = null;
    this.oModel = null;
    this.GridConfigUrl = null;
    this.GridDataUrl = null;
    this.GridDisplayFormatConfig = null;
    this.ParameterToLoadGrid = null;
    this.RowClickEvent = null;
    this.sDom = "R<'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>Cl>r<'dt-wrapper't><'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>";
    var myInstance = this;
    this.execute = function () {
        IsheaderLoaded = false;
        selected = [];
        //-- Initialize Our Data Table Grid Framework.
        var _AdvGridTableInitialize = new AdvGridTableInitFramework();
        GridConfigUrl = myInstance.GridConfigUrl;
        GridDataUrl = myInstance.GridDataUrl;
        _AdvGridTableInitialize.sPaginationType = "full_numbers";
        _AdvGridTableInitialize.sDom = myInstance.sDom;
        _AdvGridTableInitialize.fnInitComplete = InitComplete;
        _AdvGridTableInitialize.iDisplayLength = (myInstance.GridDisplayFormatConfig.DataSourceConfig == null || myInstance.GridDisplayFormatConfig.DataSourceConfig == undefined ? 10 : myInstance.GridDisplayFormatConfig.DataSourceConfig.PageSize);
        if (_AdvGridTableInitialize.iDisplayLength == null || _AdvGridTableInitialize.iDisplayLength == undefined)
            _AdvGridTableInitialize.iDisplayLength = 10;
        _AdvGridTableInitialize.aLengthMenu = [5, 10, 25, 50, 100, 500];
        _AdvGridTableInitialize.sScrollXInner = "110%";
        _AdvGridTableInitialize.ControlId = myInstance.lControlId;

        //-- Initialize Common Method class.
        var oCommonMethodForGridInit = new CommonMethodForGridInit_Modified(myInstance.lControlId, myInstance.GridDisplayFormatConfig);
        oCommonMethodForGridInit.TotalDc = TotalDc;
        oCommonMethodForGridInit.ParameterToLoadGrid = myInstance.ParameterToLoadGrid;
        //_AdvGridTableInitialize.fnHeaderCallback = oCommonMethodForGridInit.HeaderCallback;
        _AdvGridTableInitialize.fnRowCallback = RowCallBack;
        _AdvGridTableInitialize.fnDrawCallback = oCommonMethodForGridInit.DrawCallback;
        _AdvGridTableInitialize.fnInfoCallback = oCommonMethodForGridInit.InfoCallback;

        _AdvGridTableInitialize.bStateSave = false;
        _AdvGridTableInitialize.bAutoWidth = false;
        _AdvGridTableInitialize.bScrollAutoCss = true;
        _AdvGridTableInitialize.aaSorting = [];
        _AdvGridTableInitialize.onEventHandler = { eventName: 'click.DT', value: oCommonMethodForGridInit.onGridHeaderClick };
        _AdvGridTableInitialize.GridTableInitialize();

        oCommonMethodForGridInit.HeaderCallback();

        var nLength = document.getElementById(myInstance.lControlId + '_length');

        $('select', nLength).unbind();
        $('select', nLength).bind('change.DT', oCommonMethodForGridInit.PageCountChangeEventHandler);

        $('#selectall').click(function () {
            var oTable = $('#' + myInstance.lControlId).DataTable();
            if (this.checked == true) {
                $('input', oTable.fnGetNodes()).each(function () {
                    var aPos = oTable.fnGetPosition(this.parentElement.parentElement);
                    var atData = oTable.fnGetData(aPos);
                    if (this.parentElement.parentElement._DT_RowIndex >= oTable.fnSettings()._iDisplayStart && this.parentElement.parentElement._DT_RowIndex < oTable.fnSettings()._iDisplayEnd) {
                        if (this.parentElement.parentElement.tagName == "TR") {
                            if (this.parentElement.parentElement.cells["ApprovalStatus"]) {
                                if (this.parentElement.parentElement.cells["ApprovalStatus"].innerHTML == "Pending") {
                                    $(this.parentElement.parentElement).addClass('row-selected');
                                    if (selected.indexOf(atData[0]) == -1)
                                        selected.push(atData[0]);
                                    this.checked = true;
                                    $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                                }
                                else if (this.parentElement.parentElement.cells["ApprovalStatus"].innerHTML != "Pending") {
                                    this.checked = false;
                                    $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                                    this.checked = false;
                                }
                            }
                            if (this.parentElement.parentElement.cells["UserApproved"]) {
                                if (this.parentElement.parentElement.cells["UserApproved"].innerHTML == "Pending") {
                                    $(this.parentElement.parentElement).addClass('row-selected');
                                    if (selected.indexOf(atData[0]) == -1)
                                        selected.push(atData[0]);
                                    this.checked = true;
                                    $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                                }
                                else if (this.parentElement.parentElement.cells["UserApproved"].innerHTML == "Pending") {
                                    this.checked = false;
                                    $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                                    this.checked = false;
                                }
                            }
                            if (this.parentElement.parentElement.cells["Status"]) {
                                if (this.parentElement.parentElement.cells["Status"].innerHTML == "Pending") {
                                    $(this.parentElement.parentElement).addClass('row-selected');
                                    if (selected.indexOf(atData[0]) == -1)
                                        selected.push(atData[0]);
                                    this.checked = true;
                                    $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                                }
                                else if (this.parentElement.parentElement.cells["Status"].innerHTML == "Pending") {
                                    this.checked = false;
                                    $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                                    this.checked = false;
                                }
                            }
                            $(this.parentElement.parentElement).addClass('row-selected');
                            if (selected.indexOf(atData[0]) == -1)
                                selected.push(atData[0]);
                            this.checked = true;
                            $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                        }
                    }
                });
            }
            else {
                $('input', oTable.fnGetNodes()).each(function () {
                    var aPos = oTable.fnGetPosition(this.parentElement.parentElement);
                    var atData = oTable.fnGetData(aPos);
                    if (this.parentElement.parentElement._DT_RowIndex >= oTable.fnSettings()._iDisplayStart && this.parentElement.parentElement._DT_RowIndex < oTable.fnSettings()._iDisplayEnd) {
                        this.checked = false;
                        if (this.parentElement.parentElement.tagName == "TR") {
                            if ($(this.parentElement.parentElement).hasClass('row-selected')) {
                                $(this.parentElement.parentElement).removeClass('row-selected');
                                var index = selected.indexOf(atData[0]);
                                if (index != -1)
                                    selected.splice(index, 1);
                            }
                        }
                        $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                    }
                });
            }
        });

        if (myInstance.GridDisplayFormatConfig != undefined && myInstance.GridDisplayFormatConfig != null) {
            var ColumnConfigList = myInstance.GridDisplayFormatConfig.ColumnConfigList;
            if (ColumnConfigList != undefined && ColumnConfigList != null && ColumnConfigList.length > 0) {
                var SubRowColumnLst = ColumnConfigList.filter(OneViewArrayFilter("ColumnType", 6));
                if (SubRowColumnLst != undefined && SubRowColumnLst != null && SubRowColumnLst.length > 0) {
                    for (var itr = 0; itr < SubRowColumnLst.length; itr++) {
                        var CellClickEventHandler = SubRowColumnLst[itr].CellClickEventHandler;
                        if (CellClickEventHandler == undefined || CellClickEventHandler == null || CellClickEventHandler == '')
                            CellClickEventHandler = "AddActionItem";
                        var oTable = $('#' + myInstance.lControlId).DataTable();
                        $('#' + myInstance.lControlId + ' tbody').unbind('click');
                        $('#' + myInstance.lControlId + ' tbody').on('click', 'a.details-control', function () {
                            var tr = $(this).closest('tr');
                            if (!tr.hasClass('shown')) {
                                $('tr').removeClass('shown');
                                oTable.find('tr.more-info').remove();
                                tr.addClass('shown');
                                tr.after('<tr class="more-info"><td colspan="20"></td></tr>');
                                if ($("tr").hasClass("more-info")) {
                                    $('tr.more-info td').append(oCommonMethodForGridInit[CellClickEventHandler](this));
                                }
                                $(".scroll-content").niceScroll({ cursorcolor: "#00F", horizrailenabled: false });
                                $(".scroll-content").getNiceScroll().resize();
                            }
                            else {
                                $('tr').removeClass('shown');
                                oTable.find('tr.more-info').remove();
                            }
                        });
                    }
                }
            }
        }
    }

    var InitComplete = function (oSettings, json) {
        $('.ColVis_Button').addClass('btn btn-default btn-sm').html('Hide / Show <i class="icon-arrow-down"></i>');
        $(this).closest('#dt_table_tools_wrapper').find('.DTTT.btn-group').addClass('table_tools_group').children('a.btn').each(function () {
            $(this).addClass('btn-sm btn-default');
        });
        this.css("visibility", "visible");
    }

    var RowCallBack = function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
        $(nRow).unbind('click');
        $(nRow).bind('click', RowClick);
        $(nRow).find("a").unbind('click');
        $(nRow).find("a").bind('click', MoreInfobuttonClick);
    }

    var RowClick = function () {
        if (myInstance.RowClickEvent != undefined && myInstance.RowClickEvent != null) {
            for (var item in myInstance.RowClickEvent) {
                if (typeof (myInstance.RowClickEvent[item]) != 'function') {
                    var jobEvent = new window[myInstance.RowClickEvent[item]]();
                    if (jobEvent != undefined && jobEvent != null) {
                        jobEvent.DataSourceConfig = myInstance.GridDisplayFormatConfig.DataSourceConfig;
                        jobEvent.ControlId = myInstance.lControlId;
                        jobEvent.execute(this);
                    }
                }
            }
        }
    }

    var MoreInfobuttonClick = function () {
        window.localStorage.setItem("rowButtonClick", 1);
    }
}

//--Master Page Grid Initialize function.
function MasterPageGridControl()
{
    var myInstance = this;
    var lControlId = null;
    var oModel = null;
    var GridConfigUrl = null;
    var GridDataUrl = null;
    this.execute = function () {
        IsheaderLoaded = false;
        selected = [];
        //-- Initialize Our Data Table Grid Framework.
        var _AdvGridTableInitialize = new AdvGridTableInitFramework();
        oModel = ModelUpdate;
        GridConfigUrl = ModelUpdate;
        var GridDataUrl = GetParentFolderOfApplication() + "/DynamicPageConfig/GetMasterData/" + ModelUpdate.Page;
        _AdvGridTableInitialize.sPaginationType = "full_numbers";
        _AdvGridTableInitialize.sDom = "R<'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>Cl>r<'dt-wrapper't><'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>";
        _AdvGridTableInitialize.fnInitComplete = InitComplete;
        _AdvGridTableInitialize.iDisplayLength = 10;
        _AdvGridTableInitialize.sScrollXInner = "110%";
        _AdvGridTableInitialize.ControlId = "datatable_Master";
        lControlId = _AdvGridTableInitialize.ControlId;

        //-- Initialize Common Method class.
        var oCommonMethodForGridInit = new CommonMethodForGridInit(lControlId, oModel, GridConfigUrl, GridDataUrl);
        _AdvGridTableInitialize.fnHeaderCallback = oCommonMethodForGridInit.HeaderCallback;
        _AdvGridTableInitialize.fnRowCallback = RowCallBack;
        _AdvGridTableInitialize.fnDrawCallback = oCommonMethodForGridInit.DrawCallback;
        _AdvGridTableInitialize.fnFooterCallback = oCommonMethodForGridInit.FooterCallback;
        _AdvGridTableInitialize.fnInfoCallback = oCommonMethodForGridInit.InfoCallback;

        _AdvGridTableInitialize.bStateSave = false;
        _AdvGridTableInitialize.bAutoWidth = false;
        _AdvGridTableInitialize.bScrollAutoCss = true;
        //_AdvGridTableInitialize.aaSorting = [[2, 'asc']];
        _AdvGridTableInitialize.onEventHandler = { eventName: 'click.DT', value: oCommonMethodForGridInit.onGridHeaderClick };
        _AdvGridTableInitialize.GridTableInitialize();

        var nLength = document.getElementById('datatable_Master_length');

        $('select', nLength).unbind();
        $('select', nLength).bind('change.DT', oCommonMethodForGridInit.PageCountChangeEventHandler);
    }

    var InitComplete = function (oSettings, json) {
        $('.ColVis_Button').addClass('btn btn-default btn-sm').html('Hide / Show <i class="icon-arrow-down"></i>');
        $(this).closest('#dt_table_tools_wrapper').find('.DTTT.btn-group').addClass('table_tools_group').children('a.btn').each(function () {
            $(this).addClass('btn-sm btn-default');
        });
    }

    var RowCallBack = function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
        //This is not realy necessary
        $(nRow).unbind('click');
        $(nRow).bind('click', function () {
            var odtbasicTable = $("#" + lControlId).DataTable();
            var aPos = odtbasicTable.fnGetPosition(this);
            $(this).removeClass('row-selected');
            odtbasicTable.$('tr.row-selected').removeClass('row-selected');
            $(this).addClass('row-selected');
            myInstance.RowClick(aPos);
        });
    }

    this.RowClick = function (aPos) {
        //This is not realy necessary
      
            var odtbasicTable = $("#" + lControlId).DataTable();            
            var atData = odtbasicTable.fnGetData(aPos);
            var oTableSettings = odtbasicTable.fnSettings();

            selected = [];
            selected.push(atData[0]);          

            var _DynamicPage = null;
            var GridLoadParameters = [];
            var model = null;
            var lcontrolConfigDict = null;
            if (ModelUpdate != undefined && ModelUpdate != null)
                model = ModelUpdate;
            else {
                for (var i = 0; i < oModel._HTMLPageConfigLst.length; i++) {
                    model = oModel._HTMLPageConfigLst[i];
                    if (lcontrolConfigDict != null) {
                        for (var item in model.ControlConfigDict) {
                            lcontrolConfigDict[item] = model.ControlConfigDict[item];
                        }
                        model.ControlConfigDict = lcontrolConfigDict;
                    }
                    else {
                        lcontrolConfigDict = model.ControlConfigDict;
                    }
                }
            }
            if (model != null) {
                _DynamicPage = new DynamicPage(model);
                if (model.ControlConfigDict != undefined) {
                    for (var item in model.ControlConfigDict) {
                        if (model.ControlConfigDict[item].ControlTypeName != "Label")
                            GridLoadParameters.push(model.ControlConfigDict[item].ClientID)
                    }
                }
                else if (model.ControlConfigDict == undefined) {
                    GridLoadParameters = getGridLoadParameters(model.ControlGroupConfigLst);
                }
            }
            var _oValidationFrameWork = new ValidationFrameWork(ModelUpdate);
            _oValidationFrameWork.removeValidate();
            if (GridLoadParameters.length > 0) {
                for (var i = 0; i < GridLoadParameters.length; i++) {
                    var controlConfig = model.ControlGroupConfigLst[0].ControlConfigDict[GridLoadParameters[i]];
                    if (controlConfig != undefined && controlConfig != null) {
                        for (var j = 0; j < oTableSettings.aoColumns.length; j++) {
                            if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "ComboBox" && controlConfig.ComboType == 1) {
                                var _ComboBox = new WiNAiMComboBox(model);
                                _ComboBox.setData(controlConfig, atData[j].split('|'));
                                _ComboBox.onchange(controlConfig);
                                break;
                            }
                            else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "ComboBox") {
                                var _ComboBox = new WiNAiMComboBox(model);
                                _ComboBox.setData(controlConfig, atData[j]);
                                _ComboBox.onchange(controlConfig);
                                break;
                            }
                            else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "TextBox") {
                                _DynamicPage.SetData(controlConfig, atData[j]);
                                break;
                            }
                            else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "Hidden") {
                                _DynamicPage.SetData(controlConfig, atData[j]);
                                break;
                            }
                            else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "DatePicker") {
                                _DynamicPage.SetData(controlConfig, atData[j] + ',' + atData[j]);
                                break;
                            }
                            else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "ImageControl") {
                                _DynamicPage.SetData(controlConfig, atData[j]);
                                break;
                            }
                        }
                    }
                }
                //if (document.getElementById(GridLoadParameters[0]) != undefined && document.getElementById(GridLoadParameters[0]) != null)
                //    document.getElementById(GridLoadParameters[0]).setAttribute("disabled", "");
                //if (document.getElementById(GridLoadParameters[1]) != undefined && document.getElementById(GridLoadParameters[1]) != null)
                //    document.getElementById(GridLoadParameters[1]).setAttribute("disabled", "");
                //if (document.getElementById(GridLoadParameters[10]) != undefined && document.getElementById(GridLoadParameters[10]) != null)
                //    document.getElementById(GridLoadParameters[10]).setAttribute("disabled", "");        
            }
    }

    this.SetControlId = function (ControlId) {
        lControlId = ControlId;
    }
}

//--Operation Log Grid Initialize function.
function RoleUserMasterGridInit() {
    this.lControlId = null;
    var oModel = null;
    this.GridConfigUrl = null;
    this.GridDataUrl = null;
    var myInstance = this;
    this.execute = function () {
        IsheaderLoaded = false;
        selected = [];
        //-- Initialize Our Data Table Grid Framework.
        var _AdvGridTableInitialize = new AdvGridTableInitFramework();
        oModel = ModelUpdate;
        _AdvGridTableInitialize.sPaginationType = "full_numbers";
        _AdvGridTableInitialize.sDom = "R<'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>l>r<'dt-wrapper't><'dt-row dt-bottom-row'<'row'<'col-sm-6'i><'col-sm-6 text-right'p>>";
        _AdvGridTableInitialize.fnInitComplete = InitComplete;
        _AdvGridTableInitialize.iDisplayLength = 5;
        _AdvGridTableInitialize.sScrollXInner = "110%";
        _AdvGridTableInitialize.ControlId = myInstance.lControlId;
        _AdvGridTableInitialize.fnRowCallback = RowCallBack;
        lControlId = _AdvGridTableInitialize.ControlId;

        //-- Initialize Common Method class.
        var oCommonMethodForGridInit = new CommonMethodForGridInit(lControlId, oModel, myInstance.GridConfigUrl, myInstance.GridDataUrl);
        _AdvGridTableInitialize.fnHeaderCallback = oCommonMethodForGridInit.HeaderCallback;
        _AdvGridTableInitialize.fnDrawCallback = oCommonMethodForGridInit.DrawCallback;
        _AdvGridTableInitialize.fnInfoCallback = oCommonMethodForGridInit.InfoCallback;

        _AdvGridTableInitialize.bStateSave = false;
        _AdvGridTableInitialize.bAutoWidth = false;
        _AdvGridTableInitialize.bScrollAutoCss = true;
        _AdvGridTableInitialize.aaSorting = [[0, 'asc']];
        _AdvGridTableInitialize.onEventHandler = { eventName: 'click.DT', value: oCommonMethodForGridInit.onGridHeaderClick };
        _AdvGridTableInitialize.GridTableInitialize();

        var nLength = document.getElementById(myInstance.lControlId + '_length');

        $('select', nLength).unbind();
        $('select', nLength).bind('change.DT', oCommonMethodForGridInit.PageCountChangeEventHandler);
    }

    var RowCallBack = function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
        $(nRow).unbind('click');
        $(nRow).bind('click', RowClick);
    }

    var RowClick = function () {
        var odtbasicTable = $("#" + myInstance.lControlId).DataTable();
        var aPos = odtbasicTable.fnGetPosition(this);
        var atData = odtbasicTable.fnGetData(aPos);
        var oTableSettings = odtbasicTable.fnSettings();

        $(this).removeClass('row-selected');
        odtbasicTable.$('tr.row-selected').removeClass('row-selected');
        $(this).addClass('row-selected');

        var _DynamicPage = null;
        var GridLoadParameters = [];
        var model = null;
        var lcontrolConfigDict = null;
        if (ModelUpdate != undefined && ModelUpdate != null)
            model = ModelUpdate;
        else {
            model = oModel;
            if (model.ControlGroupConfigLst.length > 0) {
                for (var groupItem in model.ControlGroupConfigLst) {
                    var lControlGroupConfigLst = model.ControlGroupConfigLst[groupItem].ControlGroupConfigLst;
                    var lControlConfigDict = model.ControlGroupConfigLst[groupItem].ControlConfigDict;
                    if (typeof (model.ControlGroupConfigLst[groupItem]) != 'function' && lControlGroupConfigLst.length > 0) {
                        CollectControlsFromGroup(lControlGroupConfigLst);
                    }
                    if (lControlConfigDict != undefined && lControlConfigDict != null) {
                        if (this.lcontrolDict != null) {
                            for (var item in lControlConfigDict) {
                                this.lcontrolDict[item] = lControlConfigDict[item];
                            }
                            lControlConfigDict = this.lcontrolDict;
                        }
                        else {
                            this.lcontrolDict = lControlConfigDict;
                        }
                    }
                }
                model.ControlGroupConfigLst.remove(1, model.ControlGroupConfigLst.length);
                model.ControlGroupConfigLst[0].ControlConfigDict = this.lcontrolDict;
                model.ControlGroupConfigLst[0].ControlGroupConfigLst = [];
                ModelUpdate = model;
            }
        }
        if (model != null) {
            _DynamicPage = new DynamicPage(model);
            if (model.ControlGroupConfigLst != undefined && model.ControlGroupConfigLst != null && model.ControlGroupConfigLst.length > 0) {
                for (var item in model.ControlGroupConfigLst[0].ControlConfigDict) {
                    if (model.ControlGroupConfigLst[0].ControlConfigDict[item].ControlTypeName != "Label")
                        GridLoadParameters.push(model.ControlGroupConfigLst[0].ControlConfigDict[item].ClientID)
                }
            }
        }
        if (GridLoadParameters.length > 0) {
            for (var i = 0; i < GridLoadParameters.length; i++) {
                var controlConfig = model.ControlGroupConfigLst[0].ControlConfigDict[GridLoadParameters[i]];
                if (controlConfig != undefined && controlConfig != null) {
                    for (var j = 0; j < oTableSettings.aoColumns.length; j++) {
                        if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "ComboBox" && controlConfig.ComboType == 1) {
                            var _ComboBox = new WiNAiMComboBox(model);
                            _ComboBox.setData(controlConfig, atData[j].split('|'));
                            _ComboBox.onchange(controlConfig);
                            if (controlConfig.IsEditable != undefined && controlConfig.IsEditable != null && !controlConfig.IsEditable) {
                                if (document.getElementById(controlConfig.ClientID) != undefined && document.getElementById(controlConfig.ClientID) != null)
                                    document.getElementById(controlConfig.ClientID).setAttribute("disabled", "");
                            }
                            break;
                        }
                        else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "ComboBox") {
                            var _ComboBox = new WiNAiMComboBox(model);
                            _ComboBox.setData(controlConfig, atData[j - 1]);
                            _ComboBox.onchange(controlConfig);
                            if (controlConfig.IsEditable != undefined && controlConfig.IsEditable != null && !controlConfig.IsEditable) {
                                if (document.getElementById(controlConfig.ClientID) != undefined && document.getElementById(controlConfig.ClientID) != null)
                                    document.getElementById(controlConfig.ClientID).setAttribute("disabled", "");
                            }
                            break;
                        }
                        else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "TextBox") {
                            _DynamicPage.SetData(controlConfig, atData[j]);
                            if (controlConfig.IsEditable != undefined && controlConfig.IsEditable != null && !controlConfig.IsEditable) {
                                if (document.getElementById(controlConfig.ClientID) != undefined && document.getElementById(controlConfig.ClientID) != null)
                                    document.getElementById(controlConfig.ClientID).setAttribute("disabled", "");
                            }
                            break;
                        }
                        else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "DatePicker") {
                            _DynamicPage.SetData(controlConfig, atData[j] + ',' + atData[j]);
                            break;
                        }
                        else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "Hidden") {
                            _DynamicPage.SetData(controlConfig, atData[j]);
                            if (controlConfig.IsEditable != undefined && controlConfig.IsEditable != null && !controlConfig.IsEditable) {
                                if (document.getElementById(controlConfig.ClientID) != undefined && document.getElementById(controlConfig.ClientID) != null)
                                    document.getElementById(controlConfig.ClientID).setAttribute("disabled", "");
                            }
                            break;
                        }
                        else if (controlConfig.ControlID == oTableSettings.aoColumns[j].nTh.id && controlConfig.ControlTypeName == "ImageControl") {
                            _DynamicPage.SetData(controlConfig, atData[j]);
                            break;
                        }
                    }
                }
            }
        }
    }

    var InitComplete = function (oSettings, json) {
        //$('.ColVis_Button').addClass('btn btn-default btn-sm').html('Hide / Show <i class="icon-arrow-down"></i>');
        $(this).closest('#dt_table_tools_wrapper').find('.DTTT.btn-group').addClass('table_tools_group').children('a.btn').each(function () {
            $(this).addClass('btn-sm btn-default');
        });
        this.css("visibility", "visible");
    }
}

function CommonMethodForGridInit(lControlId, oModel, GridConfigUrl, GridDataUrl)
{
    var myinstance = this;
    var rec_id = 0;
    var reISO = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/;
    var reISO1 = /^(\d{2})-(\d{2})-(\d{4})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/;
    var reMsAjax = /^\/Date\((d|-|.*)\)[\/|\\]$/;

    this.HeaderCallback = function (nHead, aData, iStart, iEnd, aiDisplay) {
        if (IsheaderLoaded == false) {            
            IsheaderLoaded = true;
            var oTable = $('#' + lControlId).DataTable();
            var oSettings = oTable.fnSettings();
            if (oSettings.bColumnVisible) {
                var j = 0, IsDefaultSort = 0;
                for (var k = 0; k < MetaData.length; k++) {
                    if (MetaData[k].Visible != undefined) {
                        if (MetaData[k].Visible == true) {
                            if (MetaData[k].IsGroupColumn != true) {
                                oSettings.aoColumns[j].bShowColumns = true;
                                if (!MetaData[k].ColumnDefaultVisible)
                                    oTable.fnSetColumnVis(j, false);
                                oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                if (!MetaData[k].Sortable)
                                    oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                j = j + 1;
                            }
                            if (MetaData[k].IsGroupColumn) {
                                if (MetaData[k].IsGroupColumn == true) {
                                    for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                        if (MetaData[k].SubColumns[i].Visible != undefined) {
                                            if (MetaData[k].SubColumns[i].Visible == true) {
                                                if (MetaData[k].SubColumns[i].IsGroupColumn) {
                                                    j = groupColumnSortingApply(MetaData[k].SubColumns[i].SubColumns, j, oTable, oSettings);
                                                }
                                                else {
                                                    oSettings.aoColumns[j].bShowColumns = true;
                                                    if (!MetaData[k].SubColumns[i].ColumnDefaultVisible)
                                                        oTable.fnSetColumnVis(j, false);
                                                    oSettings.aoColumns[j].bSortable = MetaData[k].SubColumns[i].Sortable;
                                                    if (!MetaData[k].SubColumns[i].Sortable)
                                                        oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                                    j = j + 1;
                                                }
                                            }
                                            else {
                                                oTable.fnSetColumnVis(j, false);
                                                oSettings.aoColumns[j].bSortable = MetaData[k].SubColumns[i].Sortable;
                                                oSettings.aoColumns[j].bShowColumns = false;
                                                if (!MetaData[k].Sortable)
                                                    oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                                j = j + 1;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            oTable.fnSetColumnVis(j, false);
                            oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                            oSettings.aoColumns[j].bShowColumns = false;
                            if (!MetaData[k].Sortable)
                                oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                            j = j + 1;
                        }
                    }
                }
            }
            if (ColVis != undefined) {
                ColVis.fnRebuild();
            }
        }
    }

    var groupColumnSortingApply = function (SubColumns, j, oTable, oSettings) {
        for (var i = 0; i < SubColumns.length; i++) {
            if (SubColumns[i].Visible != undefined) {
                if (SubColumns[i].Visible) {
                    oSettings.aoColumns[j].bShowColumns = true;
                    if (!SubColumns[i].ColumnDefaultVisible)
                        oTable.fnSetColumnVis(j, false);
                    oSettings.aoColumns[j].bSortable = SubColumns[i].Sortable;
                    if (!SubColumns[i].Sortable)
                        oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                    j = j + 1;
                }
                else {
                    oTable.fnSetColumnVis(j, false);
                    oSettings.aoColumns[j].bSortable = SubColumns[i].Sortable;
                    oSettings.aoColumns[j].bShowColumns = false;
                    if (!MetaData[k].Sortable)
                        oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                    j = j + 1;
                }
            }
        }
        return j;
    }

    this.DrawCallback = function (oSets, fnCallbackDraw) {
        var oTable = $('#' + lControlId).DataTable();

        if (TotalDc != oSets.aoData.length) {
            var datalength = oSets.aiDisplay.length;
            //oSets.aiDisplay.remove(0, oTable.fnSettings().aiDisplay.length);

            for (var itrCnt = datalength; itrCnt < TotalDc; itrCnt++) {
                oSets.aiDisplay.push(itrCnt);
            }
        }

        var Data = [];

        if (TotalDc != oSets.aoData.length) {
            var datalength = oSets.aoData.length;
            for (var itrCntj = 0; itrCntj < oSets.aoColumns.length; itrCntj++) {
                Data.push("");
            }

            for (var itrCnt = datalength; itrCnt < TotalDc; itrCnt++) {
                fnAddData_Modified(oTable, oSets, Data, false);
                if (oSets.aoData[itrCnt].nTr != undefined && oSets.aoData[itrCnt].nTr != null)
                    oSets.aoData[itrCnt].nTr.innerHTML = "";
            }
        }

        var iPageCount = oTable.dataTableExt.oPagination.iFullNumbersShowPages;
        var iPageCountHalf = Math.floor(iPageCount / 2);
        var iPages = Math.ceil(TotalDc / oSets._iDisplayLength);
        var sList = "";
        var iStartButton, iEndButton, i, iLen;
        var oClasses = oSets.oClasses;
        var anButtons, anStatic, nPaginateList, nNode;
        var iCurrentPage = Math.ceil(oSets._iDisplayStart / oSets._iDisplayLength) + 1;
        var an = oSets.aanFeatures.p;
        var oPaging = oSets.oInstance.fnPagingInfo();
        var oLang = oSets.oLanguage.oPaginate;
        var fnClickHandler = function (e) {
            if (oSets.oApi._fnPageChange(oSets, e.data.action)) {
                var target = LoadingImage();
                var CurrentPageNo = 0;
                if (e.data.action == "previous")
                    CurrentPageNo = iCurrentPage - 1;
                else if (e.data.action == "next")
                    CurrentPageNo = iCurrentPage + 1;
                else if (e.data.action == "first")
                    CurrentPageNo = 1;
                else if (e.data.action == "last")
                    CurrentPageNo = iPages;
                setTimeout(function () {
                    var oGridControl = new GridControl();
                    var _DynamicPage = new DynamicPage(oModel);
                    var params = GetParameter(GridConfigUrl, oModel);
                    var PageParam = [];
                    var parameterToLoadData = null;
                    if (params.length > 0 && params.length > 1) {
                        PageParam = params[0];
                        parameterToLoadData = params[1];
                    }
                    parameterToLoadData = JSON.stringify(PageParam);
                    parameterToLoadData = { request: parameterToLoadData, PageSize: oSets._iDisplayLength, CurrentPage: CurrentPageNo, SortColumnName: oSets.aoColumns[oSets.aaSorting[0][0]].nTh.id, SortType: oSets.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending", DATType: oModel.DATType };
                    parameterToLoadData = JSON.stringify(parameterToLoadData);

                    if (GridConfigUrl != '' && GridConfigUrl != null && GridConfigUrl != undefined) {
                        var GridConfig = null;
                        if (typeof (GridConfigUrl) == 'string') {
                            GridConfig = GetGridConfig(GridConfigUrl, parameterToLoadData);
                            GridConfig = GridConfig.ColumnConfigList;
                            MetaData = [];
                            CreateMetaDataColumn(GridConfig, false);
                        }
                        else {
                            MetaData = [];
                            if (oModel.ControlGroupConfigLst[0].ControlConfigDict["MasterGrid"] != undefined)
                                GridConfig = oModel.ControlGroupConfigLst[0].ControlConfigDict["MasterGrid"].ColumnConfigList;
                            CreateMetaDataColumn(GridConfig, false);
                        }
                    }
                    var result = GetDataSource(GridDataUrl, parameterToLoadData);
                    GridResultData = result;

                    var startCnt = oSets._iDisplayStart;
                    var RowContent = "";
                    var RowCont = "";

                    for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                        Data = [];
                        //if (oSets.aoData[startCnt + itrCnt].nTr.innerHTML == "") {
                        RowContent = "";
                        var j = 0;
                        for (var k = 0; k < MetaData.length; k++) {
                            RowCont = "";
                            if (MetaData[k].Visible != undefined) {
                                if (MetaData[k].Visible == true) {
                                    if (MetaData[k].IsGroupColumn != true) {
                                        oSets.aoColumns[j].bShowColumns = true;
                                        if (MetaData[k].Visible && oSets.aoColumns[j].bVisible) {
                                            RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k], result[itrCnt]);
                                            //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                        }
                                        j = j + 1;
                                    }
                                    if (MetaData[k].IsGroupColumn) {
                                        if (MetaData[k].IsGroupColumn == true) {
                                            for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                                oSets.aoColumns[j].bShowColumns = true;
                                                if (MetaData[k].SubColumns[i].Visible && oSets.aoColumns[j].bVisible) {
                                                    RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k].SubColumns[i], result[itrCnt]);
                                                    //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                }
                                                j = j + 1;
                                            }
                                        }
                                    }
                                }
                                else {
                                    j = j + 1;
                                }
                            }
                            oGridControl.GetDataClmn(RowCont, MetaData[k], result[itrCnt], Data);
                        }
                        if (oSets.aoData[startCnt + itrCnt] != undefined && oSets.aoData[startCnt + itrCnt] != null) {
                            oSets.aoData[startCnt + itrCnt].nTr = null;
                            oSets.aoData[startCnt + itrCnt]._aData = Data;
                        }
                    }
                    oTable.fnDraw(false);
                    RemoveLoadingImage(target);
                }, 1);
            }
        };

        /* Pages calculation */
        if (oSets._iDisplayLength === -1) {
            iStartButton = 1;
            iEndButton = 1;
            iCurrentPage = 1;
        }
        else if (iPages < iPageCount) {
            iStartButton = 1;
            iEndButton = iPages;
        }
        else if (iCurrentPage <= iPageCountHalf) {
            iStartButton = 1;
            iEndButton = iPageCount;
        }
        else if (iCurrentPage >= (iPages - iPageCountHalf)) {
            iStartButton = iPages - iPageCount + 1;
            iEndButton = iPages;
        }
        else {
            iStartButton = iCurrentPage - Math.ceil(iPageCount / 2) + 1;
            iEndButton = iStartButton + iPageCount - 1;
        }

        /* Loop over each instance of the pager */
        for (i = 0, iLen = an.length ; i < iLen ; i++) {
            nNode = an[i];
            if (!nNode.hasChildNodes()) {
                continue;
            }

            $('li', an[i]).remove();

            $(nNode).append(
                '<ul class = "pagination">' +
                    '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageFirst + '"><a>' + oLang.sFirst + '</a></li>' +
                    '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPagePrevious + '"><a>' + oLang.sPrevious + '</a></li>' +
                    //'<li><span></span><li>'+
                    '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageNext + '"><a>' + oLang.sNext + '</a></li>' +
                    '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageLast + '"><a>' + oLang.sLast + '</a></li>' +
                '</ul>'
            );
            var els = $('a', nNode);
            var nFirst = els[0],
                nPrev = els[1],
                nNext = els[2],
                nLast = els[3];

            oSets.oApi._fnBindAction(nFirst, { action: "first" }, fnClickHandler);
            oSets.oApi._fnBindAction(nPrev, { action: "previous" }, fnClickHandler);
            oSets.oApi._fnBindAction(nNext, { action: "next" }, fnClickHandler);
            oSets.oApi._fnBindAction(nLast, { action: "last" }, fnClickHandler);

            ///* Build the dynamic list */
            for (var j = iStartButton ; j <= iEndButton ; j++) {
                sClass = (j == oPaging.iPage + 1) ? 'class="active"' : '';
                $('<li ' + sClass + '><a href="#">' + j + '</a></li>')
                    .insertBefore($('.next,.last', an[i])[0])
                    .bind('click', function (e) {
                        var target = LoadingImage();
                        e.preventDefault();
                        oSets._iDisplayStart = (parseInt($('a', this).text(), 10) - 1) * oPaging.iLength;
                        var CurrentPageNo = $('a', this).text();
                        setTimeout(function () {
                            var oGridControl = new GridControl();
                            var _DynamicPage = new DynamicPage(oModel);
                            var params = GetParameter(GridConfigUrl, oModel);
                            var PageParam = [];
                            var parameterToLoadData = null;
                            if (params.length > 0 && params.length > 1) {
                                PageParam = params[0];
                                parameterToLoadData = params[1];
                            }
                            parameterToLoadData = JSON.stringify(PageParam);
                            parameterToLoadData = { request: parameterToLoadData, PageSize: oSets._iDisplayLength, CurrentPage: CurrentPageNo, SortColumnName: oSets.aoColumns[oSets.aaSorting[0][0]].nTh.id, SortType: oSets.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending", DATType: oModel.DATType };
                            parameterToLoadData = JSON.stringify(parameterToLoadData);

                            if (GridConfigUrl != '' && GridConfigUrl != null && GridConfigUrl != undefined) {
                                var GridConfig = null;
                                if (typeof (GridConfigUrl) == 'string') {
                                    GridConfig = GetGridConfig(GridConfigUrl, parameterToLoadData);
                                    GridConfig = GridConfig.ColumnConfigList;
                                    MetaData = [];
                                    CreateMetaDataColumn(GridConfig, false);
                                }
                                else {
                                    MetaData = [];
                                    if (oModel.ControlGroupConfigLst[0].ControlConfigDict["MasterGrid"] != undefined)
                                        GridConfig = oModel.ControlGroupConfigLst[0].ControlConfigDict["MasterGrid"].ColumnConfigList;
                                    CreateMetaDataColumn(GridConfig, false);
                                }
                            }
                            var result = GetDataSource(GridDataUrl, parameterToLoadData);
                            GridResultData = result;

                            var startCnt = oSets._iDisplayStart;
                            var RowContent = "";
                            var RowCont = "";

                            for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                                Data = [];
                                //if (oSets.aoData[startCnt + itrCnt].nTr.innerHTML == "") {
                                RowContent = "";
                                var j = 0;
                                for (var k = 0; k < MetaData.length; k++) {
                                    RowCont = "";
                                    if (MetaData[k].Visible != undefined) {
                                        if (MetaData[k].Visible == true) {
                                            if (MetaData[k].IsGroupColumn != true) {
                                                oSets.aoColumns[j].bShowColumns = true;
                                                if (MetaData[k].Visible && oSets.aoColumns[j].bVisible) {
                                                    RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k], result[itrCnt]);
                                                    //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                }
                                                j = j + 1;
                                            }
                                            if (MetaData[k].IsGroupColumn) {
                                                if (MetaData[k].IsGroupColumn == true) {
                                                    for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                                        oSets.aoColumns[j].bShowColumns = true;
                                                        if (MetaData[k].SubColumns[i].Visible && oSets.aoColumns[j].bVisible) {
                                                            RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k].SubColumns[i], result[itrCnt]);
                                                            //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                        }
                                                        j = j + 1;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            j = j + 1;
                                        }
                                    }
                                    oGridControl.GetDataClmn(RowCont, MetaData[k], result[itrCnt], Data);
                                }
                                if (oSets.aoData[startCnt + itrCnt] != null && oSets.aoData[startCnt + itrCnt] != undefined) {
                                    oSets.aoData[startCnt + itrCnt].nTr = null;
                                    oSets.aoData[startCnt + itrCnt]._aData = Data;
                                }
                            }
                            oTable.fnDraw(false);
                            if ($('#show-tabs').length > 0)
                                myinstance.ShowAllRecordsButtonClick($('#show-tabs')[0]);
                            RemoveLoadingImage(target);
                        }, 1);
                    });
                //sList += $((iCurrentPage !== j) ?
                //    '<li tabindex="' + oSettings.iTabIndex + '" class="' + oClasses.sPageButton + '"><a>' + oSettings.fnFormatNumber(j) + '</a></li>' :
                //    '<li tabindex="' + oSettings.iTabIndex + '" class="' + oClasses.sPageButtonActive + '"><a>' + oSettings.fnFormatNumber(j) + '</a></li>')
                //    .insertBefore($('.next,.last', an[i])[0])
                //    .bind('click', fnBind);
            }

            /* Build up the dynamic list first - html and listeners */
            //$('ul:eq(0)', nNode)
            //    .children('li:not(.next,.last,.first,.previous)').each(fnBind);

            /* Update the permanent button's classes */
            anButtons = nNode.getElementsByTagName('li');
            anStatic = [
                anButtons[0], anButtons[1],
                anButtons[anButtons.length - 2], anButtons[anButtons.length - 1]
            ];

            $(anStatic).removeClass(oClasses.sPageButton + " " + oClasses.sPageButtonActive + " " + oClasses.sPageButtonStaticDisabled);
            $([anStatic[0], anStatic[1]]).addClass(
                (iCurrentPage == 1) ?
                    oClasses.sPageButtonStaticDisabled :
                    oClasses.sPageButton
            );
            $([anStatic[2], anStatic[3]]).addClass(
                (iPages === 0 || iCurrentPage === iPages || oSets._iDisplayLength === -1) ?
                    oClasses.sPageButtonStaticDisabled :
                    oClasses.sPageButton
            );
        }
    }

    this.InfoCallback = function (oSets, iStart, iEnd, iMax, iTotal, sOut) {
        if (TotalDc == 0 && $('#' + lControlId).DataTable().fnGetNodes().length > 0) {
            var oGridControl = new GridControl();
            var _DynamicPage = new DynamicPage(oModel);
            var params = GetParameter(GridConfigUrl, oModel);
            var PageParam = [];
            var parameterToLoadData = null;
            var iCurrentPage = Math.ceil(oSets._iDisplayStart / oSets._iDisplayLength) + 1;
            if (params.length > 0 && params.length > 1) {
                PageParam = params[0];
                parameterToLoadData = params[1];
            }
            parameterToLoadData = JSON.stringify(PageParam);
            parameterToLoadData = { request: parameterToLoadData, PageSize: oSets._iDisplayLength, CurrentPage: iCurrentPage, SortColumnName: oSets.aoColumns[oSets.aaSorting[0][0]].nTh.id, SortType: oSets.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending", DATType: oModel.DATType };
            parameterToLoadData = JSON.stringify(parameterToLoadData);
            var result = GetDataSource(GridDataUrl, parameterToLoadData);
            GridResultData = result;
        }
        //iEnd = (iStart - 1) + oSets._iDisplayLength
        if (iTotal === 0) {
            /* Empty record set */
            sOut = oSets.oLanguage.sInfoEmpty;
        }
        else {
            /* Normal record set */
            sOut = oSets.oLanguage.sInfo;
        }

        if (iTotal != iMax) {
            /* Record set after filtering */
            sOut += ' ' + oSets.oLanguage.sInfoFiltered;
        }

        // Convert the macros
        sOut += oSets.oLanguage.sInfoPostFix;
        sOut = sOut.replace(/_START_/g, iStart).
            replace(/_END_/g, iEnd).
            replace(/_TOTAL_/g, TotalDc).
            replace(/_MAX_/g, iMax);
        return sOut;
    }

    this.FooterCallback = function (nFoot, aData, iStart, iEnd, aiDisplay) {
        var oTable = $('#' + lControlId).DataTable();
        var oTableDate = oTable.fnGetNodes();
        var oSettings = oTable.fnSettings();
        //iEnd = iStart + oSettings._iDisplayLength
        var itrCnt = 0;
        var diff = iEnd - iStart;
        if (diff != 0) {
            for (var item in oTableDate) {
                if (oTableDate[item]._DT_RowIndex >= iStart && oTableDate[item]._DT_RowIndex < iEnd) {
                    if ($('input', oTable.fnGetNodes(oTableDate[item]._DT_RowIndex)).length > 0) {
                        if ($('input', oTable.fnGetNodes(oTableDate[item]._DT_RowIndex))[0].checked == true)
                            itrCnt = itrCnt + 1;
                    }
                }
            }
            if (diff == itrCnt)
                if ($('#selectall').length > 0)
                    $('#selectall')[0].checked = true;
                else {
                    if ($('#selectall').length > 0)
                        $('#selectall')[0].checked = false;
                }
        }
    }

    this.onGridHeaderClick = function (e) {
        if (e.target.tagName == "TH" && e.target.className != "sorting_disabled") {
            IsheaderLoaded = false;
            var oTable = $('#' + lControlId).DataTable();
            var oSets = oTable.fnSettings();
            var CurrentPageNo = 0;
            var oGridControl = new GridControl();
            var _DynamicPage = new DynamicPage(oModel);
            var params = GetParameter(GridConfigUrl, oModel);
            var PageParam = [];
            var parameterToLoadData = null;
            if (params.length > 0 && params.length > 1) {
                PageParam = params[0];
                parameterToLoadData = params[1];
            }
            parameterToLoadData = JSON.stringify(PageParam);
            parameterToLoadData = { request: parameterToLoadData, PageSize: oSets._iDisplayLength, CurrentPage: CurrentPageNo + 1, SortColumnName: oSets.aoColumns[oSets.aaSorting[0][0]].nTh.id, SortType: oSets.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending", DATType: oModel.DATType };
            parameterToLoadData = JSON.stringify(parameterToLoadData);

            if (GridConfigUrl != '' && GridConfigUrl != null && GridConfigUrl != undefined) {
                var GridConfig = null;
                if (typeof (GridConfigUrl) == 'string') {
                    GridConfig = GetGridConfig(GridConfigUrl, parameterToLoadData);
                    GridConfig = GridConfig.ColumnConfigList;
                    MetaData = [];
                    CreateMetaDataColumn(GridConfig, false);
                }
                else {
                    MetaData = [];
                    if (oModel.ControlGroupConfigLst[0].ControlConfigDict["MasterGrid"] != undefined)
                        GridConfig = oModel.ControlGroupConfigLst[0].ControlConfigDict["MasterGrid"].ColumnConfigList;
                    CreateMetaDataColumn(GridConfig, false);
                }
            }
            var result = GetDataSource(GridDataUrl, parameterToLoadData);
            GridResultData = result;

            var startCnt = oSets._iDisplayStart;
            var RowContent = "";
            var RowCont = "";

            var iColumn, iNextSort;

            var iDataIndex = oSets.aaSorting[0][0];

            /* If the shift key is pressed then we are multiple column sorting */
            if (e.shiftKey) {
                /* Are we already doing some kind of sort on this column? */
                var bFound = false;
                for (var i = 0 ; i < oSets.aaSorting.length ; i++) {
                    if (oSets.aaSorting[i][0] == iDataIndex) {
                        bFound = true;
                        iColumn = oSets.aaSorting[i][0];
                        iNextSort = oSets.aaSorting[i][2] + 1;

                        if (!oSets.aoColumns[iColumn].asSorting[iNextSort]) {
                            /* Reached the end of the sorting options, remove from multi-col sort */
                            oSets.aaSorting.splice(i, 1);
                        }
                        else {
                            /* Move onto next sorting direction */
                            oSets.aaSorting[i][1] = oSets.aoColumns[iColumn].asSorting[iNextSort];
                            oSets.aaSorting[i][2] = iNextSort;
                        }
                        break;
                    }
                }

                /* No sort yet - add it in */
                if (bFound === false) {
                    oSets.aaSorting.push([iDataIndex,
                        oSets.aoColumns[iDataIndex].asSorting[0], 0]);
                }
            }
            else {
                /* If no shift key then single column sort */
                if (oSets.aaSorting.length == 1 && oSets.aaSorting[0][0] == iDataIndex) {
                    iColumn = oSets.aaSorting[0][0];
                    iNextSort = oSets.aaSorting[0][2];
                    if (!oSets.aoColumns[iColumn].asSorting[iNextSort]) {
                        iNextSort = 0;
                    }
                    oSets.aaSorting[0][1] = oSets.aoColumns[iColumn].asSorting[iNextSort];
                    oSets.aaSorting[0][2] = iNextSort;
                }
                else {
                    oSets.aaSorting.splice(0, oSets.aaSorting.length);
                    oSets.aaSorting.push([iDataIndex,
                        oSets.aoColumns[iDataIndex].asSorting[0], 0]);
                }
            }
            oSets.bColumnVisible = true;
            oTable._fnSort(oSets);
            oSets.aiDisplay = [];

            if (TotalDc != oSets.aiDisplay.length) {
                var datalength = oSets.aiDisplay.length;
                //oSets.aiDisplay.remove(0, oTable.fnSettings().aiDisplay.length);

                for (var itrCnt = datalength; itrCnt < TotalDc; itrCnt++) {
                    oSets.aiDisplay.push(itrCnt);
                }
            }

            for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                Data = [];
                RowContent = "";
                var j = 0;
                for (var k = 0; k < MetaData.length; k++) {
                    RowCont = "";
                    if (MetaData[k].Visible != undefined) {
                        if (MetaData[k].Visible == true) {
                            if (MetaData[k].IsGroupColumn != true) {
                                oSets.aoColumns[j].bShowColumns = true;
                                if (MetaData[k].Visible && oSets.aoColumns[j].bVisible) {
                                    RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k], result[itrCnt]);
                                    //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                }
                                j = j + 1;
                            }
                            if (MetaData[k].IsGroupColumn) {
                                if (MetaData[k].IsGroupColumn == true) {
                                    for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                        oSets.aoColumns[j].bShowColumns = true;
                                        if (MetaData[k].SubColumns[i].Visible && oSets.aoColumns[j].bVisible) {
                                            RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k].SubColumns[i], result[itrCnt]);
                                            //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                        }
                                        j = j + 1;
                                    }
                                }
                            }
                        }
                        else {
                            j = j + 1;
                        }
                    }
                    oGridControl.GetDataClmn(RowCont, MetaData[k], result[itrCnt], Data);
                }
                if (oSets.aoData[startCnt + itrCnt] != null && oSets.aoData[startCnt + itrCnt] != undefined) {
                    oSets.aoData[startCnt + itrCnt].nTr = null;
                    oSets.aoData[startCnt + itrCnt]._aData = Data;
                }
            }
            oTable._fnDraw(false);
        }
    }

    var fnAddData_Modified = function (oTable, oSettings, aDataSupplied) {
        var oCol;

        var oRow = {
            /**
             * TR element for the row
             *  @type node
             *  @default null
             */
            "nTr": null,

            /**
             * Data object from the original data source for the row. This is either
             * an array if using the traditional form of DataTables, or an object if
             * using mData options. The exact type will depend on the passed in
             * data from the data source, or will be an array if using DOM a data 
             * source.
             *  @type array|object
             *  @default []
             */
            "_aData": [],

            /**
             * Sorting data cache - this array is ostensibly the same length as the
             * number of columns (although each index is generated only as it is 
             * needed), and holds the data that is used for sorting each column in the
             * row. We do this cache generation at the start of the sort in order that
             * the formatting of the sort data need be done only once for each cell
             * per sort. This array should not be read from or written to by anything
             * other than the master sorting methods.
             *  @type array
             *  @default []
             *  @private
             */
            "_aSortData": [],

            /**
             * Array of TD elements that are cached for hidden rows, so they can be
             * reinserted into the table if a column is made visible again (or to act
             * as a store if a column is made hidden). Only hidden columns have a 
             * reference in the array. For non-hidden columns the value is either
             * undefined or null.
             *  @type array nodes
             *  @default []
             *  @private
             */
            "_anHidden": [],

            /**
             * Cache of the class name that DataTables has applied to the row, so we
             * can quickly look at this variable rather than needing to do a DOM check
             * on className for the nTr property.
             *  @type string
             *  @default <i>Empty string</i>
             *  @private
             */
            "_sRowStripe": ""
        };

        /* Take an independent copy of the data source so we can bash it about as we wish */
        var aDataIn = ($.isArray(aDataSupplied)) ?
            aDataSupplied.slice() :
            $.extend(true, {}, aDataSupplied);

        /* Create the object for storing information about this new row */
        var iRow = oSettings.aoData.length;
        var oData = $.extend(true, {}, oRow);
        oData._aData = aDataIn;
        oSettings.aoData.push(oData);

        /* Create the cells */
        var nTd, sThisType;
        //for (var i = 0, iLen = oSettings.aoColumns.length ; i < iLen ; i++) {
        //    oCol = oSettings.aoColumns[i];

        //    /* Use rendered data for filtering / sorting */
        //    if (typeof oCol.fnRender === 'function' && oCol.bUseRendered && oCol.mData !== null) {
        //        oTable._fnSetCellData(oSettings, iRow, i, oTable._fnRender(oSettings, iRow, i));
        //    }
        //    else {
        //        oTable._fnSetCellData(oSettings, iRow, i, oTable._fnGetCellData(oSettings, iRow, i));
        //    }

        //    /* See if we should auto-detect the column type */
        //    if (oCol._bAutoType && oCol.sType != 'string') {
        //        /* Attempt to auto detect the type - same as _fnGatherData() */
        //        var sVarType = oTable._fnGetCellData(oSettings, iRow, i, 'type');
        //        if (sVarType !== null && sVarType !== '') {
        //            sThisType = _fnDetectType(sVarType);
        //            if (oCol.sType === null) {
        //                oCol.sType = sThisType;
        //            }
        //            else if (oCol.sType != sThisType && oCol.sType != "html") {
        //                /* String is always the 'fallback' option */
        //                oCol.sType = 'string';
        //            }
        //        }
        //    }
        //}

        /* Add to the display array */
        oSettings.aiDisplayMaster.push(iRow);

        /* Create the DOM information */
        if (!oSettings.oFeatures.bDeferRender) {
            //CreateTr(oTable, oSettings, iRow);
        }

        return oSettings.aoData[iRow];
    }

    var CreateTr = function (oTable, oSettings, iRow) {
        var oData = oSettings.aoData[iRow];
        var nTd;
        oData.nTr = document.createElement('tr');

        /* Use a private property on the node to allow reserve mapping from the node
         * to the aoData array for fast look up
         */
        oData.nTr._DT_RowIndex = iRow;

        /* Special parameters can be given by the data source to be used on the row */
        if (oData._aData.DT_RowId) {
            oData.nTr.id = oData._aData.DT_RowId;
        }

        if (oData._aData.DT_RowClass) {
            oData.nTr.className = oData._aData.DT_RowClass;
        }

        /* Process each column */
        for (var i = 0, iLen = oSettings.aoColumns.length ; i < iLen ; i++) {
            var oCol = oSettings.aoColumns[i];
            nTd = document.createElement(oCol.sCellType);

            /* Render if needed - if bUseRendered is true then we already have the rendered
             * value in the data source - so can just use that
             */
            //nTd.id = oSettings.aoColumns[i].sTitle;

            /* Add user defined class */
            if (oCol.sClass !== null) {
                nTd.className = oCol.sClass;
            }

            if (oCol.bVisible) {
                oData.nTr.appendChild(nTd);
                oData._anHidden[i] = null;
            }
            else {
                oData._anHidden[i] = nTd;
            }
        }
    }

    this.AddActionItemForApproval = function (d) {
        var target = LoadingImage();
        var oTable = $('#' + lControlId).DataTable();
        var aPos = oTable.fnGetPosition(d.parentNode.parentNode);
        var atData = oTable.fnGetData(aPos);
        if (atData[0] != undefined && atData[0] != null && atData[0] != "")
            rec_id = parseInt(atData[0]);
        var DataRows = "";
        var parameter = { DCId: rec_id };
        var filterdata = SyncAjaxCall(GetRelativeUrl("/DCApproval/GetNCDetailsFormRDMS"), JSON.stringify(parameter));

        var filterResultdata = GridResultData.filter(filterByID);

        if (filterdata != undefined && filterdata != null && filterdata.length > 0) {
            for (var itr = 0; itr < filterdata.length; itr++) {
                DataRows += "<tr>";
                if (filterResultdata != null && filterResultdata != undefined && filterResultdata.length > 0) {
                    var filterResultDetailsdata = filterResultdata[0].DCLastUpdatedAnswerDetailList[filterdata[itr].AttributeId];
                    if (filterResultDetailsdata != null && filterResultDetailsdata != undefined)
                        DataRows += '<td>' + filterResultDetailsdata.AttributeName + '</td>';
                    else
                        DataRows += '<td></td>';
                }
                else
                    DataRows += '<td></td>';
                var NCActionDetailsETLDTOLst = filterdata[itr].NCActionDetailsETLDTOLst;
                var MultiMediaDetailsETLDTOLst = filterdata[itr].MultiMediaDetailsETLDTOLst;
                if (NCActionDetailsETLDTOLst != undefined && NCActionDetailsETLDTOLst != null && NCActionDetailsETLDTOLst.length > 0) {
                    var NCActionDetails = "";
                    for (var actitr = 0; actitr < NCActionDetailsETLDTOLst.length; actitr++) {
                        if (NCActionDetailsETLDTOLst[actitr].CustomeAction != null && NCActionDetailsETLDTOLst[actitr].CustomeAction != "")
                            NCActionDetails = NCActionDetails == "" ? NCActionDetailsETLDTOLst[actitr].CustomeAction : (NCActionDetails + " | " + NCActionDetailsETLDTOLst[actitr].CustomeAction);
                        else if (NCActionDetailsETLDTOLst[actitr].PreDefinedActionName != null && NCActionDetailsETLDTOLst[actitr].PreDefinedActionName != "")
                            NCActionDetails = NCActionDetails == "" ? NCActionDetailsETLDTOLst[actitr].PreDefinedActionName : (NCActionDetails + " | " + NCActionDetailsETLDTOLst[actitr].PreDefinedActionName);
                    }
                    DataRows += '<td>' + NCActionDetails + '</td>'
                }
                else if (NCActionDetailsETLDTOLst == undefined || NCActionDetailsETLDTOLst == null || NCActionDetailsETLDTOLst.length == 0)
                    DataRows += "<td></td>";
                if (MultiMediaDetailsETLDTOLst != undefined && MultiMediaDetailsETLDTOLst != null && MultiMediaDetailsETLDTOLst.length > 0) {
                    var MultiMediaDetails = "";
                    for (var mulitr = 0; mulitr < MultiMediaDetailsETLDTOLst.length; mulitr++) {
                        if (MultiMediaDetailsETLDTOLst[mulitr].URL != "")
                            MultiMediaDetails = MultiMediaDetails == "" ? MultiMediaDetailsETLDTOLst[mulitr].URL : (MultiMediaDetails + " | " + MultiMediaDetailsETLDTOLst[mulitr].URL);
                    }
                    var parameterToLoadData = MultiMediaDetails;
                    parameterToLoadData = { request: parameterToLoadData };
                    MultiMediaDetailsImgUrl = SyncAjaxCall(GetRelativeUrl("/DCApproval/GetMultimediaElementForShiftReport"), JSON.stringify(parameterToLoadData));
                    if (MultiMediaDetailsImgUrl != undefined && MultiMediaDetailsImgUrl != null && MultiMediaDetailsImgUrl != "" && MultiMediaDetailsImgUrl.length > 0) {
                        var superbox = '<div class="superbox">';
                        for (var mulitr = 0; mulitr < MultiMediaDetailsImgUrl.length; mulitr++) {
                            superbox += '<span class="superbox-list"><a href="' + MultiMediaDetailsImgUrl[mulitr] + '" data-lightbox="' + itr + '"><img src="' + MultiMediaDetailsImgUrl[mulitr] + '" class="superbox-img"/></a></span>';
                        }
                        superbox += '</div>';
                        DataRows += '<td>' + superbox + '</td>'
                    }
                    else if (MultiMediaDetailsImgUrl == undefined || MultiMediaDetailsImgUrl == null || MultiMediaDetailsImgUrl == "")
                        DataRows += '<td></td>'
                }
                else if (MultiMediaDetailsETLDTOLst == undefined || MultiMediaDetailsETLDTOLst == null || MultiMediaDetailsETLDTOLst.length == 0)
                    DataRows += "<td></td>";
                DataRows += "</tr>";
            }
        }
        RemoveLoadingImage(target);
        // `d` is the original data object for the row
        if (DataRows != "") {
            return '<table cellpadding="5" cellspacing="0" border="0" class="table">' +
                '<thead><tr>' +
                  '<th>Atrribute</td>' +
                  '<th>Action</td>' +
                  //'<th>Comments</td>' +
                  '<th>Media</td>' +
                '</tr></thead>' +
                '<tbody>' +
                DataRows
                  //'<tr>' +
                  //    '<td>Full name:</td>' +
                  //    '<td>asd</td>' +
                  //    '<td>sad</td>' +
                  //    '<td width="20%"><div class="superbox"><span class="superbox-list"><a href="img/demo/m1.jpg" data-lightbox="action1"><img src="img/demo/m1.jpg" class="superbox-img"/></a></span><span class="superbox-list"><a href="img/demo/m2.jpg" data-lightbox="action1"><img src="img/demo/m2.jpg" class="superbox-img"/></a></span><span class="superbox-list"><a href="img/demo/m3.jpg" data-lightbox="action1"><img src="img/demo/m3.jpg" class="superbox-img"/></a></span></div></td>' +
                  //'</tr>' 
                + '</tbody>' +
            '</table>';
        }
        else
            return false;
    }

    this.AddActionItem = function (d) {
        var target = LoadingImage();
        var oTable = $('#' + lControlId).DataTable();
        var aPos = oTable.fnGetPosition(d.parentNode.parentNode);
        var atData = oTable.fnGetData(aPos);
        if (atData[0] != undefined && atData[0] != null && atData[0] != "")
            rec_id = parseInt(atData[0]);
        var DataRows = "";

        var filterdata = GridResultData.filter(filterByID);

        for (var itr = 0; itr < filterdata.length; itr++) {
            var DCLastUpdatedAnswerDetailList = filterdata[itr].DCLastUpdatedAnswerDetailList;
            if (DCLastUpdatedAnswerDetailList != undefined && DCLastUpdatedAnswerDetailList != null) {
                for (var rditr in DCLastUpdatedAnswerDetailList) {
                    var NCDetailsLst = DCLastUpdatedAnswerDetailList[rditr].NCDetailsLst;
                    if (NCDetailsLst != undefined && NCDetailsLst != null && NCDetailsLst.length > 0) {
                        DataRows += "<tr>";
                        DataRows += '<td>' + DCLastUpdatedAnswerDetailList[rditr].AttributeName + '</td>'
                        for (var ncitr = 0; ncitr < NCDetailsLst.length; ncitr++) {
                            var NCActionDetailsETLDTOLst = NCDetailsLst[ncitr].NCActionDetailsETLDTOLst;
                            var MultiMediaDetailsETLDTOLst = NCDetailsLst[ncitr].MultiMediaDetailsETLDTOLst;
                            if (NCActionDetailsETLDTOLst != undefined && NCActionDetailsETLDTOLst != null && NCActionDetailsETLDTOLst.length > 0) {
                                var NCActionDetails = "";
                                for (var actitr = 0; actitr < NCActionDetailsETLDTOLst.length; actitr++) {
                                    if (NCActionDetailsETLDTOLst[actitr].CustomeAction != null && NCActionDetailsETLDTOLst[actitr].CustomeAction != "")
                                        NCActionDetails = NCActionDetails == "" ? NCActionDetailsETLDTOLst[actitr].CustomeAction : (NCActionDetails + " | " + NCActionDetailsETLDTOLst[actitr].CustomeAction);
                                    else if (NCActionDetailsETLDTOLst[actitr].PreDefinedActionName != null && NCActionDetailsETLDTOLst[actitr].PreDefinedActionName != "")
                                        NCActionDetails = NCActionDetails == "" ? NCActionDetailsETLDTOLst[actitr].PreDefinedActionName : (NCActionDetails + " | " + NCActionDetailsETLDTOLst[actitr].PreDefinedActionName);
                                }
                                DataRows += '<td>' + NCActionDetails + '</td>'
                            }
                            else if (NCActionDetailsETLDTOLst == undefined || NCActionDetailsETLDTOLst == null || NCActionDetailsETLDTOLst.length == 0)
                                DataRows += "<td></td>";
                            if (MultiMediaDetailsETLDTOLst != undefined && MultiMediaDetailsETLDTOLst != null && MultiMediaDetailsETLDTOLst.length > 0) {
                                var MultiMediaDetails = "";
                                for (var mulitr = 0; mulitr < MultiMediaDetailsETLDTOLst.length; mulitr++) {
                                    if (MultiMediaDetailsETLDTOLst[mulitr].URL != "")
                                        MultiMediaDetails = MultiMediaDetails == "" ? MultiMediaDetailsETLDTOLst[mulitr].URL : (MultiMediaDetails + " | " + MultiMediaDetailsETLDTOLst[mulitr].URL);
                                }
                                var parameterToLoadData = MultiMediaDetails;
                                parameterToLoadData = { request: parameterToLoadData };
                                MultiMediaDetailsImgUrl = SyncAjaxCall(GetRelativeUrl("/DCApproval/GetMultimediaElementForShiftReport"), JSON.stringify(parameterToLoadData));
                                if (MultiMediaDetailsImgUrl != undefined && MultiMediaDetailsImgUrl != null && MultiMediaDetailsImgUrl != "" && MultiMediaDetailsImgUrl.length > 0) {
                                    var superbox = '<div class="superbox">';
                                    for (var mulitr = 0; mulitr < MultiMediaDetailsImgUrl.length; mulitr++) {
                                        superbox += '<span class="superbox-list"><a href="' + MultiMediaDetailsImgUrl[mulitr] + '" data-lightbox="' + rditr + '"><img src="' + MultiMediaDetailsImgUrl[mulitr] + '" class="superbox-img"/></a></span>';
                                    }
                                    superbox += '</div>';
                                    DataRows += '<td>' + superbox + '</td>'
                                }
                                else if (MultiMediaDetailsImgUrl == undefined || MultiMediaDetailsImgUrl == null || MultiMediaDetailsImgUrl == "")
                                    DataRows += '<td>' + superbox + '</td>'
                            }
                            else if (MultiMediaDetailsETLDTOLst == undefined || MultiMediaDetailsETLDTOLst == null || MultiMediaDetailsETLDTOLst.length == 0)
                                DataRows += "<td></td>";
                        }
                        DataRows += "</tr>";
                    }
                }
            }
            RemoveLoadingImage(target);
        }
        // `d` is the original data object for the row
        if (DataRows != "") {
            return '<table cellpadding="5" cellspacing="0" border="0" class="table">' +
                '<thead><tr>' +
                  '<th>Atrribute</td>' +
                  '<th>Action</td>' +
                  //'<th>Comments</td>' +
                  '<th>Media</td>' +
                '</tr></thead>' +
                '<tbody>' +
                DataRows
                  //'<tr>' +
                  //    '<td>Full name:</td>' +
                  //    '<td>asd</td>' +
                  //    '<td>sad</td>' +
                  //    '<td width="20%"><div class="superbox"><span class="superbox-list"><a href="img/demo/m1.jpg" data-lightbox="action1"><img src="img/demo/m1.jpg" class="superbox-img"/></a></span><span class="superbox-list"><a href="img/demo/m2.jpg" data-lightbox="action1"><img src="img/demo/m2.jpg" class="superbox-img"/></a></span><span class="superbox-list"><a href="img/demo/m3.jpg" data-lightbox="action1"><img src="img/demo/m3.jpg" class="superbox-img"/></a></span></div></td>' +
                  //'</tr>' 
                + '</tbody>' +
            '</table>';
        }
        else
            return false;
    }

    var filterByID = function (obj) {
        if ('DataCaptureId' in obj && !isNaN(obj.DataCaptureId) && rec_id == obj.DataCaptureId) {
            return true;
        } else {
            return false;
        }
    }

    this.NCDetails = function (button, Url) {
        if (button.innerText != 0) {
            RemoveMessage();
            var controlId = 'datatable_NCDetail';
            var gridConfigUrl = GetParentFolderOfApplication() + '/DCApproval/GetGridConfig/' + ModelUpdate.Page;
            var gridDataUrl = Url;
            MetaData = [];
            var TemplateId = document.getElementById(ModelUpdate.HTMLPageID + "_ddlTempName");
            if (TemplateId != undefined && TemplateId != null) {
                TemplateId = parseInt(TemplateId.value);
            }
            if ($("#" + controlId).length > 0 && $("#" + controlId)[0].tHead != null) {
                var oTable = $('#' + controlId).DataTable();
                oTable.fnClearTable(true);
                var oTableSetting = $('#' + controlId).DataTable().fnSettings();
                LoadDcGridData(gridConfigUrl, gridDataUrl, JSON.stringify(["NCDetails", button.id.split('_')[1], TemplateId]), controlId, "");
                oTable.fnDestroy(false);
            }
            else
                LoadGridData(gridConfigUrl, gridDataUrl, JSON.stringify(["NCDetails", button.id.split('_')[1], TemplateId]), controlId, "");
            var oGridTableInitialize = new GridTableInitialize();
            oGridTableInitialize.NCDetailsGridInit(controlId);
            $('<div style="width: 100%; overflow: auto"></div>').append($('#' + controlId)).insertAfter($('#' + controlId + '_wrapper div').first());
            $("#myNCModal").modal("show");
        }
        else
            ShowMessage("NC details not available.", 2);
    }

    this.PageCountChangeEventHandler = function (e) {
        var target = LoadingImage();
        var oTable = $('#' + lControlId).DataTable();
        var iVal = $(this).val();
        selected = [];
        var oSettings = oTable.fnSettings();

        /* Update all other length options for the new display */
        var n = oSettings.aanFeatures.l;
        for (i = 0, iLen = n.length ; i < iLen ; i++) {
            if (n[i] != this.parentNode) {
                $('select', n[i]).val(iVal);
            }
        }

        /* Redraw the table */
        oSettings._iDisplayLength = parseInt(iVal, 10);
        oTable._fnCalculateEnd(oSettings);

        /* If we have space to show extra rows (backing up from the end point - then do so */
        if (oSettings.fnDisplayEnd() == oSettings.fnRecordsDisplay()) {
            oSettings._iDisplayStart = oSettings.fnDisplayEnd() - oSettings._iDisplayLength;
            if (oSettings._iDisplayStart < 0) {
                oSettings._iDisplayStart = 0;
            }
        }

        if (oSettings._iDisplayLength == -1) {
            oSettings._iDisplayStart = 0;
        }
        setTimeout(function () {
            var CurrentPageNo = 1;
            var oGridControl = new GridControl();
            var _DynamicPage = new DynamicPage(oModel);
            var params = GetParameter(GridConfigUrl, oModel);
            var PageParam = [];
            var parameterToLoadData = null;
            if (params.length > 0 && params.length > 1) {
                PageParam = params[0];
                parameterToLoadData = params[1];
            }
            if (GridConfigUrl != '' && GridConfigUrl != null && GridConfigUrl != undefined) {
                var GridConfig = null;
                if (typeof (GridConfigUrl) == 'string') {
                    GridConfig = GetGridConfig(GridConfigUrl, parameterToLoadData);
                    GridConfig = GridConfig.ColumnConfigList;
                    MetaData = [];
                    CreateMetaDataColumn(GridConfig, false);
                }
                else {
                    MetaData = [];
                    if (oModel.ControlGroupConfigLst[0].ControlConfigDict["MasterGrid"] != undefined)
                        GridConfig = oModel.ControlGroupConfigLst[0].ControlConfigDict["MasterGrid"].ColumnConfigList;
                    CreateMetaDataColumn(GridConfig, false);
                }
            }
            parameterToLoadData = JSON.stringify(PageParam);
            parameterToLoadData = { request: parameterToLoadData, PageSize: oSettings._iDisplayLength, CurrentPage: CurrentPageNo, SortColumnName: oSettings.aoColumns[oSettings.aaSorting[0][0]].nTh.id, SortType: oSettings.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending", DATType: oModel.DATType };
            parameterToLoadData = JSON.stringify(parameterToLoadData);
            var result = GetDataSource(GridDataUrl, parameterToLoadData);
            GridResultData = result;

            var startCnt = oSettings._iDisplayStart;
            var RowContent = "";
            var RowCont = "";
            oSettings.aiDisplay = [];

            if (TotalDc != oSettings.aiDisplay.length) {
                var datalength = oSettings.aiDisplay.length;
                //oSets.aiDisplay.remove(0, oTable.fnSettings().aiDisplay.length);

                for (var itrCnt = datalength; itrCnt < TotalDc; itrCnt++) {
                    oSettings.aiDisplay.push(itrCnt);
                }
            }

            for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                Data = [];
                //if (oSettings.aoData[startCnt + itrCnt].nTr.innerHTML == "") {
                RowContent = "";
                var j = 0;
                for (var k = 0; k < MetaData.length; k++) {
                    RowCont = "";
                    if (MetaData[k].Visible != undefined) {
                        if (MetaData[k].Visible == true) {
                            if (MetaData[k].IsGroupColumn != true) {
                                oSettings.aoColumns[j].bShowColumns = true;
                                if (MetaData[k].Visible && oSettings.aoColumns[j].bVisible) {
                                    RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k], result[itrCnt]);
                                    //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                }
                                j = j + 1;
                            }
                            if (MetaData[k].IsGroupColumn) {
                                if (MetaData[k].IsGroupColumn == true) {
                                    for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                        oSettings.aoColumns[j].bShowColumns = true;
                                        if (MetaData[k].SubColumns[i].Visible && oSettings.aoColumns[j].bVisible) {
                                            RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k].SubColumns[i], result[itrCnt]);
                                            //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                        }
                                        j = j + 1;
                                    }
                                }
                            }
                        }
                        else {
                            j = j + 1;
                        }
                    }
                    oGridControl.GetDataClmn(RowCont, MetaData[k], result[itrCnt], Data);
                }
                if (oSettings.aoData[startCnt + itrCnt] != null && oSettings.aoData[startCnt + itrCnt] != undefined) {
                    oSettings.aoData[startCnt + itrCnt].nTr = null;
                    oSettings.aoData[startCnt + itrCnt]._aData = Data;
                }
                //}
            }

            oTable._fnDraw(false);
            RemoveLoadingImage(target);
        }, 1);
    }

    this.ShowAllRecordsButtonClick = function (object) {
        $this = $(object);
        var oTable = $('#' + lControlId).DataTable();
        if ($this.prop('checked')) {
            $('input', oTable.fnGetNodes()).each(function () {
                var aPos = oTable.fnGetPosition(this.parentElement.parentElement);
                var atData = oTable.fnGetData(aPos);
                if (this.parentElement.parentElement.tagName == "TR") {
                    if (this.parentElement.parentElement.cells["ApprovalStatus"]) {
                        if (this.parentElement.parentElement.cells["ApprovalStatus"].innerHTML == "Pending") {
                            $(this.parentElement.parentElement).addClass('row-selected');
                            if (selected.indexOf(atData[0]) == -1)
                                selected.push(atData[0]);
                            this.checked = true;
                            $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                        }
                        else if (this.parentElement.parentElement.cells["ApprovalStatus"].innerHTML != "Pending") {
                            this.checked = false;
                            $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                        }
                    }
                    if (this.parentElement.parentElement.cells["UserApproved"]) {
                        if (this.parentElement.parentElement.cells["UserApproved"].innerHTML == "Pending") {
                            $(this.parentElement.parentElement).addClass('row-selected');
                            if (selected.indexOf(atData[0]) == -1)
                                selected.push(atData[0]);
                            this.checked = true;
                            $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                        }
                        else if (this.parentElement.parentElement.cells["UserApproved"].innerHTML == "Pending") {
                            this.checked = false;
                            $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                        }
                    }
                    if (this.parentElement.parentElement.cells["Status"]) {
                        if (this.parentElement.parentElement.cells["Status"].innerHTML == "Pending") {
                            $(this.parentElement.parentElement).addClass('row-selected');
                            if (selected.indexOf(atData[0]) == -1)
                                selected.push(atData[0]);
                            this.checked = true;
                            $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                        }
                        else if (this.parentElement.parentElement.cells["Status"].innerHTML == "Pending") {
                            this.checked = false;
                            $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                        }
                    }
                    $(this.parentElement.parentElement).addClass('row-selected');
                    if (selected.indexOf(atData[0]) == -1)
                        selected.push(atData[0]);
                    this.checked = true;
                    $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                }
            });
            $('#selectall')[0].checked = true;
        } else {
            $('input', oTable.fnGetNodes()).each(function () {
                var aPos = oTable.fnGetPosition(this.parentElement.parentElement);
                var atData = oTable.fnGetData(aPos);
                this.checked = false;
                if (this.parentElement.parentElement.tagName == "TR") {
                    if ($(this.parentElement.parentElement).hasClass('row-selected')) {
                        $(this.parentElement.parentElement).removeClass('row-selected');
                        var index = selected.indexOf(atData[0]);
                        if (index != -1)
                            selected.splice(index, 1);
                    }
                }
                $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
            });
            $('#selectall')[0].checked = false;
        }
    }

    //-- Show notification Details while click the Send Mail button.
    this.ShowNotificationDetails = function (d) {
        var target = LoadingImage();
        setTimeout(function () {
            var oTable = $('#' + lControlId).DataTable();
            var aPos = oTable.fnGetPosition(d.parentNode.parentNode);
            var atData = oTable.fnGetData(aPos);
            if (atData[0] != undefined && atData[0] != null && atData[0] != "")
                rec_id = parseInt(atData[0]);
            var parameterToLoadData = { DCId: rec_id };
            
            var myAjaxobj = new WiNAiMAjaxHar();
            myAjaxobj.url = GetRelativeUrl("/Home/GetEmailHistoryInfoDetails");
            myAjaxobj.webMethod = "post";
            myAjaxobj.parameter = JSON.stringify(parameterToLoadData);
            myAjaxobj.async = true;
            myAjaxobj.dataType = "json";
            var callBackparm = {
                success: GetEmailHistorySuccess,
                error: GetEmailHistoryError,
                sender: this
            }
            myAjaxobj.execute(callBackparm);

            var result = SyncAjaxCall((GetRelativeUrl("/Home/GetEmailInfoDetails")), JSON.stringify(parameterToLoadData));
            var DataCaptureId = document.getElementById("txt_DataCaptureId");
            if (result != undefined && result != null) {
                var To = document.getElementById("txt_To");
                var CC = document.getElementById("txt_CC");
                var BCC = document.getElementById("txt_BCC");
                var Subject = document.getElementById("txt_Subject");
                var emailBody = document.getElementById("emailbody");
                if (To != undefined && To != null)
                    To.value = result.MailTo;
                if (CC != undefined && CC != null)
                    CC.value = result.MailCC;
                if (BCC != undefined && BCC != null)
                    BCC.value = result.MailBCC;
                if (Subject != undefined && Subject != null)
                    Subject.value = result.MailSubject;
                if (emailBody != undefined && emailBody != null)
                    $(emailBody).code(result.MailBody);
            }
            if (DataCaptureId != undefined && DataCaptureId != null)
                DataCaptureId.value = rec_id;
            RemoveLoadingImage(target);
        }, 1);
    }

    //-- Success Event for Email Historty.
    var GetEmailHistorySuccess = function (response, message) {
        if (message == 'Session Failure') {
            window.location.href = GetRelativeUrl() + "/Login/LoginIndex";
            return false;
        }
        else {
            try {
                var result = null;
                if (typeof (message) == 'string')
                    result = JSON.parse(message);
                else
                    result = message;
                var divAlertBlockOl = $(".alert.alert-block.alert-warning").find("ol");
                if (divAlertBlockOl != undefined && divAlertBlockOl != null && divAlertBlockOl.length > 0) {
                    divAlertBlockOl.html('');
                    if (result != undefined && result != null) {
                        for (var itr = 0; itr < result.length; itr++) {
                            var ToEmailIds = result[itr].ToEmailIds;
                            var ToEmailIdLst = ToEmailIds.split(";");
                            var MailSentDate = result[itr].EmailPoolInsertedDate;
                            var HistoryHTML = "";
                            for (var itrToEmail = 0; itrToEmail < ToEmailIdLst.length; itrToEmail++) {
                                HistoryHTML += "<li>" + ToEmailIdLst[itrToEmail] + " send on " +
                                    moment(parseWithDate(JSON.stringify(MailSentDate))).format('D-MM-YYYY H:mm:ss') + "</li>";
                            }
                            divAlertBlockOl.html(HistoryHTML);
                        }
                    }
                }
            }
            catch (ex) { }
        }
    }

    //-- Error Event for Email Historty.
    var GetEmailHistoryError = function (sender, Request, textStatus, errorThrown) {
    }

    var SyncAjaxCall = function (Url, parameterToLoadData, async) {
        var result;
        if (async == undefined || async == null)
            async = false;
        $.ajax({
            url: Url,
            contentType: 'application/json; charset=utf-8',
            type: 'POST',
            dataType: 'json',
            data: parameterToLoadData,
            async: async,
            success: function (response) {
                result = response;
                if (result != null && result != undefined && result == "Session Failure") {
                    window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
                    return false;
                }
                else if (navigator != undefined && navigator != null && !navigator.onLine)
                    ShowMessage("IN-ER-ALP-001 :: Please Check Your Internet Connectivity", 4);
            },
            error: function (result) {
                if (navigator != undefined && navigator != null && !navigator.onLine)
                    ShowMessage("IN-ER-ALP-001 :: Please Check Your Internet Connectivity", 4);
                else
                    ShowMessage("IN-ER-PRO-001 :: Error in current operation.", 4);
            }
        });
        return result;
    }

    var parseWithDate = function (json) {
        /// <summary>  
        /// parses a JSON string and turns ISO or MSAJAX date strings  
        /// into native JS date objects  
        /// </summary>      
        /// <param name="json" type="var">json with dates to parse</param>          
        /// </param>  
        /// <returns type="value, array or object" />  
        try {
            var res = JSON.parse(json,
            function (key, value) {
                if (typeof value === 'string') {
                    var a = reISO.exec(value);
                    if (a)
                        return new Date(Date.UTC(+a[1], +a[2] - 1,
                                                 +a[3], +a[4], +a[5], +a[6]));
                    a = reMsAjax.exec(value);
                    if (a) {
                        var b = a[1].split(/[-+,.]/);
                        return new Date(b[0] ? +b[0] : 0 - +b[1]);
                    }
                }
                return value;
            });
            return res;
        } catch (e) {
            // orignal error thrown has no error message so rethrow with message  
            throw new Error("JSON content could not be parsed");
            return null;
        }
    }
}

function CommonMethodForGridInit_Modified(lControlId, GridDisplayFormatConfig)
{
    var myinstance = this;
    this.ParameterToLoadGrid = null;
    this.TotalDc = 0;
    var rec_id = 0;
    var reISO = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/;
    var reISO1 = /^(\d{2})-(\d{2})-(\d{4})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/;
    var reMsAjax = /^\/Date\((d|-|.*)\)[\/|\\]$/;

    this.HeaderCallback = function (nHead, aData, iStart, iEnd, aiDisplay) {
        if (IsheaderLoaded == false) {            
            IsheaderLoaded = true;
            var oTable = $('#' + lControlId).DataTable();
            var oSettings = oTable.fnSettings();
            if (oSettings.bColumnVisible) {
                var j = 0, IsDefaultSort = 0;
                for (var k = 0; k < MetaData.length; k++) {
                    if (MetaData[k].Visible != undefined) {
                        if (MetaData[k].Visible == true) {
                            if (MetaData[k].IsGroupColumn != true) {
                                oSettings.aoColumns[j].bShowColumns = true;
                                if (!MetaData[k].ColumnDefaultVisible)
                                    oTable.fnSetColumnVis(j, false);
                                oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                                if (!MetaData[k].Sortable)
                                    oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                j = j + 1;
                            }
                            if (MetaData[k].IsGroupColumn) {
                                if (MetaData[k].IsGroupColumn == true) {
                                    for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                        if (MetaData[k].SubColumns[i].Visible != undefined) {
                                            if (MetaData[k].SubColumns[i].Visible == true) {
                                                if (MetaData[k].SubColumns[i].IsGroupColumn) {
                                                    j = groupColumnSortingApply(MetaData[k].SubColumns[i].SubColumns, j, oTable, oSettings);
                                                }
                                                else {
                                                    oSettings.aoColumns[j].bShowColumns = true;
                                                    if (!MetaData[k].SubColumns[i].ColumnDefaultVisible)
                                                        oTable.fnSetColumnVis(j, false);
                                                    oSettings.aoColumns[j].bSortable = MetaData[k].SubColumns[i].Sortable;
                                                    if (!MetaData[k].SubColumns[i].Sortable)
                                                        oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                                    j = j + 1;
                                                }
                                            }
                                            else {
                                                oTable.fnSetColumnVis(j, false);
                                                oSettings.aoColumns[j].bSortable = MetaData[k].SubColumns[i].Sortable;
                                                oSettings.aoColumns[j].bShowColumns = false;
                                                if (!MetaData[k].Sortable)
                                                    oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                                                j = j + 1;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            oTable.fnSetColumnVis(j, false);
                            oSettings.aoColumns[j].bSortable = MetaData[k].Sortable;
                            oSettings.aoColumns[j].bShowColumns = false;
                            if (!MetaData[k].Sortable)
                                oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                            j = j + 1;
                        }
                    }
                }
            }
            if (ColVis != undefined) {
                ColVis.fnRebuild();
            }
        }
    }

    var groupColumnSortingApply = function (SubColumns, j, oTable, oSettings) {
        for (var i = 0; i < SubColumns.length; i++) {
            if (SubColumns[i].Visible != undefined) {
                if (SubColumns[i].Visible) {
                    oSettings.aoColumns[j].bShowColumns = true;
                    if (!SubColumns[i].ColumnDefaultVisible)
                        oTable.fnSetColumnVis(j, false);
                    oSettings.aoColumns[j].bSortable = SubColumns[i].Sortable;
                    if (!SubColumns[i].Sortable)
                        oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                    j = j + 1;
                }
                else {
                    oTable.fnSetColumnVis(j, false);
                    oSettings.aoColumns[j].bSortable = SubColumns[i].Sortable;
                    oSettings.aoColumns[j].bShowColumns = false;
                    if (!MetaData[k].Sortable)
                        oSettings.aoColumns[j].nTh.className = "sorting_disabled";
                    j = j + 1;
                }
            }
        }
        return j;
    }

    this.DrawCallback = function (oSets, fnCallbackDraw) {
        var loadParameter = myinstance.ParameterToLoadGrid;
        var oTable = $('#' + lControlId).DataTable();

        if (myinstance.TotalDc != oSets.aoData.length) {
            var datalength = oSets.aiDisplay.length;
            //oSets.aiDisplay.remove(0, oTable.fnSettings().aiDisplay.length);

            for (var itrCnt = datalength; itrCnt < myinstance.TotalDc; itrCnt++) {
                oSets.aiDisplay.push(itrCnt);
            }
        }

        var Data = [];

        if (myinstance.TotalDc != oSets.aoData.length) {
            var datalength = oSets.aoData.length;
            for (var itrCntj = 0; itrCntj < oSets.aoColumns.length; itrCntj++) {
                Data.push("");
            }

            for (var itrCnt = datalength; itrCnt < myinstance.TotalDc; itrCnt++) {
                fnAddData_Modified(oTable, oSets, Data, false);
                if (oSets.aoData[itrCnt].nTr != undefined && oSets.aoData[itrCnt].nTr != null)
                    oSets.aoData[itrCnt].nTr.innerHTML = "";
            }
        }

        var iPageCount = oTable.dataTableExt.oPagination.iFullNumbersShowPages;
        var iPageCountHalf = Math.floor(iPageCount / 2);
        var iPages = Math.ceil(myinstance.TotalDc / oSets._iDisplayLength);
        var sList = "";
        var iStartButton, iEndButton, i, iLen;
        var oClasses = oSets.oClasses;
        var anButtons, anStatic, nPaginateList, nNode;
        var iCurrentPage = Math.ceil(oSets._iDisplayStart / oSets._iDisplayLength) + 1;
        var an = oSets.aanFeatures.p;
        var oPaging = oSets.oInstance.fnPagingInfo();
        var oLang = oSets.oLanguage.oPaginate;
        var fnClickHandler = function (e) {
            if (oSets.oApi._fnPageChange(oSets, e.data.action)) {
                var target = LoadingImage();
                var CurrentPageNo = 0;
                if (e.data.action == "previous")
                    CurrentPageNo = iCurrentPage - 1;
                else if (e.data.action == "next")
                    CurrentPageNo = iCurrentPage + 1;
                else if (e.data.action == "first")
                    CurrentPageNo = 1;
                else if (e.data.action == "last")
                    CurrentPageNo = iPages;
                setTimeout(function () {
                    var oGridControl = new GridControl();
                    if (GridDisplayFormatConfig != null && GridDisplayFormatConfig != undefined && GridDisplayFormatConfig.DataSourceConfig != null) {
                        var oGetGridDisplay = new GetGridDisplay();
                        oGetGridDisplay.lGridDisplayFormatConfig = GridDisplayFormatConfig;
                        var pramToLoad = {};
                        if (loadParameter != undefined && loadParameter != null && loadParameter != '') {
                            pramToLoad = JSON.parse(loadParameter["request"]);
                        }
                        else {
                            pramToLoad = oGetGridDisplay.GetParamToLoadData(GridDisplayFormatConfig.DataSourceConfig);
                            if (pramToLoad != null && pramToLoad != undefined && pramToLoad != '' && pramToLoad.request != undefined && pramToLoad.request != null && pramToLoad.request != '')
                                pramToLoad = JSON.parse(pramToLoad.request);
                            else
                                pramToLoad = {};
                        }
                        pramToLoad["PageSize"] = oSets._iDisplayLength;
                        pramToLoad["CurrentPage"] = CurrentPageNo;
                        pramToLoad["SortColumnName"] = null;
                        //pramToLoad["SortType"] = oSets.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending";
                        var result = oGetGridDisplay.GetDataToLoadGrid(GridDisplayFormatConfig.DataSourceConfig.ServiceKeyName, JSON.stringify({ request: JSON.stringify(pramToLoad) }));
                        GridResultData = result;
                        myinstance.TotalDc = TotalDc;
                        MetaData = [];
                        var GridColumConfig = oGetGridDisplay.lGridDisplayFormatConfig.ColumnConfigList;
                        if (GridColumConfig != '' && GridColumConfig != null && GridColumConfig != undefined && GridColumConfig.length > 0) {
                            oGetGridDisplay.GenerateMetaDataColumn(GridColumConfig, false);
                        }
                    }
                    else {
                        GridResultData = [];
                        MetaData = [];
                        myinstance.TotalDc = 0;
                    }

                    var startCnt = oSets._iDisplayStart;
                    var RowContent = "";
                    var RowCont = "";

                    for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                        Data = [];
                        //if (oSets.aoData[startCnt + itrCnt].nTr.innerHTML == "") {
                        RowContent = "";
                        var j = 0;
                        for (var k = 0; k < MetaData.length; k++) {
                            RowCont = "";
                            if (MetaData[k].Visible != undefined) {
                                if (MetaData[k].Visible == true) {
                                    if (MetaData[k].IsGroupColumn != true) {
                                        oSets.aoColumns[j].bShowColumns = true;
                                        if (MetaData[k].Visible && oSets.aoColumns[j].bVisible) {
                                            RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k], result[itrCnt]);
                                            //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                        }
                                        j = j + 1;
                                    }
                                    if (MetaData[k].IsGroupColumn) {
                                        if (MetaData[k].IsGroupColumn == true) {
                                            for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                                oSets.aoColumns[j].bShowColumns = true;
                                                if (MetaData[k].SubColumns[i].Visible && oSets.aoColumns[j].bVisible) {
                                                    RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k].SubColumns[i], result[itrCnt]);
                                                    //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                }
                                                j = j + 1;
                                            }
                                        }
                                    }
                                }
                                else {
                                    j = j + 1;
                                }
                            }
                            oGridControl.GetDataClmn(RowCont, MetaData[k], result[itrCnt], Data);
                        }
                        if (oSets.aoData[startCnt + itrCnt] != undefined && oSets.aoData[startCnt + itrCnt] != null) {
                            oSets.aoData[startCnt + itrCnt].nTr = null;
                            oSets.aoData[startCnt + itrCnt]._aData = Data;
                        }
                    }
                    oTable.fnDraw(false);
                    RemoveLoadingImage(target);
                }, 1);
            }
        };

        /* Pages calculation */
        if (oSets._iDisplayLength === -1) {
            iStartButton = 1;
            iEndButton = 1;
            iCurrentPage = 1;
        }
        else if (iPages < iPageCount) {
            iStartButton = 1;
            iEndButton = iPages;
        }
        else if (iCurrentPage <= iPageCountHalf) {
            iStartButton = 1;
            iEndButton = iPageCount;
        }
        else if (iCurrentPage >= (iPages - iPageCountHalf)) {
            iStartButton = iPages - iPageCount + 1;
            iEndButton = iPages;
        }
        else {
            iStartButton = iCurrentPage - Math.ceil(iPageCount / 2) + 1;
            iEndButton = iStartButton + iPageCount - 1;
        }

        /* Loop over each instance of the pager */
        for (i = 0, iLen = an.length ; i < iLen ; i++) {
            nNode = an[i];
            if (!nNode.hasChildNodes()) {
                continue;
            }

            $('li', an[i]).remove();

            $(nNode).append(
                '<ul class = "pagination">' +
                    '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageFirst + '"><a>' + oLang.sFirst + '</a></li>' +
                    '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPagePrevious + '"><a>' + oLang.sPrevious + '</a></li>' +
                    //'<li><span></span><li>'+
                    '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageNext + '"><a>' + oLang.sNext + '</a></li>' +
                    '<li tabindex="' + oSets.iTabIndex + '" class="' + oClasses.sPageButton + " " + oClasses.sPageLast + '"><a>' + oLang.sLast + '</a></li>' +
                '</ul>'
            );
            var els = $('a', nNode);
            var nFirst = els[0],
                nPrev = els[1],
                nNext = els[2],
                nLast = els[3];

            oSets.oApi._fnBindAction(nFirst, { action: "first" }, fnClickHandler);
            oSets.oApi._fnBindAction(nPrev, { action: "previous" }, fnClickHandler);
            oSets.oApi._fnBindAction(nNext, { action: "next" }, fnClickHandler);
            oSets.oApi._fnBindAction(nLast, { action: "last" }, fnClickHandler);

            ///* Build the dynamic list */
            for (var j = iStartButton ; j <= iEndButton ; j++) {
                sClass = (j == oPaging.iPage + 1) ? 'class="active"' : '';
                $('<li ' + sClass + '><a href="#">' + j + '</a></li>')
                    .insertBefore($('.next,.last', an[i])[0])
                    .bind('click', function (e) {
                        var target = LoadingImage();
                        e.preventDefault();
                        oSets._iDisplayStart = (parseInt($('a', this).text(), 10) - 1) * oPaging.iLength;
                        var CurrentPageNo = $('a', this).text();
                        setTimeout(function () {
                            var oGridControl = new GridControl();
                            if (GridDisplayFormatConfig != null && GridDisplayFormatConfig != undefined && GridDisplayFormatConfig.DataSourceConfig != null) {
                                var oGetGridDisplay = new GetGridDisplay();
                                oGetGridDisplay.lGridDisplayFormatConfig = GridDisplayFormatConfig;
                                var pramToLoad = {};
                                if (loadParameter != undefined && loadParameter != null && loadParameter != '') {
                                    pramToLoad = JSON.parse(loadParameter["request"]);
                                }
                                else {
                                    pramToLoad = oGetGridDisplay.GetParamToLoadData(GridDisplayFormatConfig.DataSourceConfig);
                                    if (pramToLoad != null && pramToLoad != undefined && pramToLoad != '' && pramToLoad.request != undefined && pramToLoad.request != null && pramToLoad.request != '')
                                        pramToLoad = JSON.parse(pramToLoad.request);
                                    else
                                        pramToLoad = {};
                                }
                                pramToLoad["PageSize"] = oSets._iDisplayLength;
                                pramToLoad["CurrentPage"] = CurrentPageNo;
                                pramToLoad["SortColumnName"] = null;
                                //pramToLoad["SortType"] = oSets.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending";
                                var result = oGetGridDisplay.GetDataToLoadGrid(GridDisplayFormatConfig.DataSourceConfig.ServiceKeyName, JSON.stringify({request : JSON.stringify(pramToLoad)}));
                                GridResultData = result;
                                myinstance.TotalDc = TotalDc;

                                MetaData = [];
                                var GridColumConfig = oGetGridDisplay.lGridDisplayFormatConfig.ColumnConfigList;
                                if (GridColumConfig != '' && GridColumConfig != null && GridColumConfig != undefined && GridColumConfig.length > 0) {
                                    oGetGridDisplay.GenerateMetaDataColumn(GridColumConfig, false);
                                }
                            }
                            else {
                                GridResultData = [];
                                MetaData = [];
                                myinstance.TotalDc = 0;
                            }

                            var startCnt = oSets._iDisplayStart;
                            var RowContent = "";
                            var RowCont = "";

                            for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                                Data = [];
                                //if (oSets.aoData[startCnt + itrCnt].nTr.innerHTML == "") {
                                RowContent = "";
                                var j = 0;
                                for (var k = 0; k < MetaData.length; k++) {
                                    RowCont = "";
                                    if (MetaData[k].Visible != undefined) {
                                        if (MetaData[k].Visible == true) {
                                            if (MetaData[k].IsGroupColumn) {
                                                if (MetaData[k].IsGroupColumn != true) {
                                                    oSets.aoColumns[j].bShowColumns = true;
                                                    if (MetaData[k].Visible && oSets.aoColumns[j].bVisible) {
                                                        RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k], result[itrCnt]);
                                                        //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                    }
                                                    j = j + 1;
                                                }
                                            }
                                            if (MetaData[k].IsGroupColumn) {
                                                if (MetaData[k].IsGroupColumn == true) {
                                                    for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                                        oSets.aoColumns[j].bShowColumns = true;
                                                        if (MetaData[k].SubColumns[i].Visible && oSets.aoColumns[j].bVisible) {
                                                            RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k].SubColumns[i], result[itrCnt]);
                                                            //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                                        }
                                                        j = j + 1;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            j = j + 1;
                                        }
                                    }
                                    oGridControl.GetDataClmn(RowCont, MetaData[k], result[itrCnt], Data);
                                }
                                if (oSets.aoData[startCnt + itrCnt] != null && oSets.aoData[startCnt + itrCnt] != undefined) {
                                    oSets.aoData[startCnt + itrCnt].nTr = null;
                                    oSets.aoData[startCnt + itrCnt]._aData = Data;
                                }
                            }
                            oTable.fnDraw(false);
                            if ($('#show-tabs').length > 0)
                                myinstance.ShowAllRecordsButtonClick($('#show-tabs')[0]);
                            RemoveLoadingImage(target);
                        }, 1);
                    });
                //sList += $((iCurrentPage !== j) ?
                //    '<li tabindex="' + oSettings.iTabIndex + '" class="' + oClasses.sPageButton + '"><a>' + oSettings.fnFormatNumber(j) + '</a></li>' :
                //    '<li tabindex="' + oSettings.iTabIndex + '" class="' + oClasses.sPageButtonActive + '"><a>' + oSettings.fnFormatNumber(j) + '</a></li>')
                //    .insertBefore($('.next,.last', an[i])[0])
                //    .bind('click', fnBind);
            }

            /* Build up the dynamic list first - html and listeners */
            //$('ul:eq(0)', nNode)
            //    .children('li:not(.next,.last,.first,.previous)').each(fnBind);

            /* Update the permanent button's classes */
            anButtons = nNode.getElementsByTagName('li');
            anStatic = [
                anButtons[0], anButtons[1],
                anButtons[anButtons.length - 2], anButtons[anButtons.length - 1]
            ];

            $(anStatic).removeClass(oClasses.sPageButton + " " + oClasses.sPageButtonActive + " " + oClasses.sPageButtonStaticDisabled);
            $([anStatic[0], anStatic[1]]).addClass(
                (iCurrentPage == 1) ?
                    oClasses.sPageButtonStaticDisabled :
                    oClasses.sPageButton
            );
            $([anStatic[2], anStatic[3]]).addClass(
                (iPages === 0 || iCurrentPage === iPages || oSets._iDisplayLength === -1) ?
                    oClasses.sPageButtonStaticDisabled :
                    oClasses.sPageButton
            );
        }
    }

    this.InfoCallback = function (oSets, iStart, iEnd, iMax, iTotal, sOut) {
        var loadParameter = myinstance.ParameterToLoadGrid;
        if (myinstance.TotalDc == 0 && $('#' + lControlId).DataTable().fnGetNodes().length > 0) {
            var iCurrentPage = Math.ceil(oSets._iDisplayStart / oSets._iDisplayLength) + 1;
            var oGetGridDisplay = new GetGridDisplay();
            var pramToLoad = {};
            if (loadParameter != undefined && loadParameter != null && loadParameter != '') {
                pramToLoad = JSON.parse(loadParameter["request"]);
            }
            else {
                pramToLoad = oGetGridDisplay.GetParamToLoadData(GridDisplayFormatConfig.DataSourceConfig);
                if (pramToLoad != null && pramToLoad != undefined && pramToLoad != '' && pramToLoad.request != undefined && pramToLoad.request != null && pramToLoad.request != '')
                    pramToLoad = JSON.parse(pramToLoad.request);
                else
                    pramToLoad = {};
            }
            pramToLoad["PageSize"] = oSets._iDisplayLength;
            pramToLoad["CurrentPage"] = iCurrentPage;
            pramToLoad["SortColumnName"] = null;
            //pramToLoad["SortType"] = oSets.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending";
            GridResultData = oGetGridDisplay.GetDataToLoadGrid(GridDisplayFormatConfig.DataSourceConfig.ServiceKeyName, JSON.stringify({ request: JSON.stringify(pramToLoad) }));
        }
        //iEnd = (iStart - 1) + oSets._iDisplayLength
        if (iTotal === 0) {
            /* Empty record set */
            sOut = oSets.oLanguage.sInfoEmpty;
        }
        else {
            /* Normal record set */
            sOut = oSets.oLanguage.sInfo;
        }

        if (iTotal != iMax) {
            /* Record set after filtering */
            sOut += ' ' + oSets.oLanguage.sInfoFiltered;
        }

        // Convert the macros
        sOut += oSets.oLanguage.sInfoPostFix;
        sOut = sOut.replace(/_START_/g, iStart).
            replace(/_END_/g, iEnd).
            replace(/_TOTAL_/g, myinstance.TotalDc).
            replace(/_MAX_/g, iMax);
        return sOut;
    }

    this.FooterCallback = function (nFoot, aData, iStart, iEnd, aiDisplay) {
        var oTable = $('#' + lControlId).DataTable();
        var oTableDate = oTable.fnGetNodes();
        var oSettings = oTable.fnSettings();
        //iEnd = iStart + oSettings._iDisplayLength
        var itrCnt = 0;
        var diff = iEnd - iStart;
        if (diff != 0) {
            for (var item in oTableDate) {
                if (oTableDate[item]._DT_RowIndex >= iStart && oTableDate[item]._DT_RowIndex < iEnd) {
                    if ($('input', oTable.fnGetNodes(oTableDate[item]._DT_RowIndex)).length > 0) {
                        if ($('input', oTable.fnGetNodes(oTableDate[item]._DT_RowIndex))[0].checked == true)
                            itrCnt = itrCnt + 1;
                    }
                }
            }
            if (diff == itrCnt)
                if ($('#selectall').length > 0)
                    $('#selectall')[0].checked = true;
                else {
                    if ($('#selectall').length > 0)
                        $('#selectall')[0].checked = false;
                }
        }
    }

    this.onGridHeaderClick = function (e) {
        var loadParameter = myinstance.ParameterToLoadGrid;
        if (e.target.tagName == "TH" && e.target.className != "sorting_disabled") {
            IsheaderLoaded = false;
            var oTable = $('#' + lControlId).DataTable();
            var oSets = oTable.fnSettings();
            var CurrentPageNo = 0;
            var result = [];
            var oGridControl = new GridControl();
            if (GridDisplayFormatConfig != null && GridDisplayFormatConfig != undefined && GridDisplayFormatConfig.DataSourceConfig != null) {
                var oGetGridDisplay = new GetGridDisplay();
                oGetGridDisplay.lGridDisplayFormatConfig = GridDisplayFormatConfig;
                var pramToLoad = {};
                if (loadParameter != undefined && loadParameter != null && loadParameter != '') {
                    pramToLoad = JSON.parse(loadParameter["request"]);
                }
                else {
                    pramToLoad = oGetGridDisplay.GetParamToLoadData(GridDisplayFormatConfig.DataSourceConfig);
                    if (pramToLoad != null && pramToLoad != undefined && pramToLoad != '' && pramToLoad.request != undefined && pramToLoad.request != null && pramToLoad.request != '')
                        pramToLoad = JSON.parse(pramToLoad.request);
                    else
                        pramToLoad = {};
                }
                pramToLoad["PageSize"] = oSets._iDisplayLength;
                pramToLoad["CurrentPage"] = CurrentPageNo + 1;
                pramToLoad["SortColumnName"] = (oSets.aaSorting != undefined && oSets.aaSorting != null && oSets.aaSorting.length > 0 ?
                    oSets.aoColumns[oSets.aaSorting[0][0]].nTh.id : "");
                pramToLoad["SortType"] = oSets.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending";
                var result = oGetGridDisplay.GetDataToLoadGrid(GridDisplayFormatConfig.DataSourceConfig.ServiceKeyName, JSON.stringify({ request: JSON.stringify(pramToLoad) }));
                GridResultData = result;
                myinstance.TotalDc = TotalDc;

                MetaData = [];
                var GridColumConfig = oGetGridDisplay.lGridDisplayFormatConfig.ColumnConfigList;
                if (GridColumConfig != '' && GridColumConfig != null && GridColumConfig != undefined && GridColumConfig.length > 0) {
                    oGetGridDisplay.GenerateMetaDataColumn(GridColumConfig, false);
                }
            }
            else {
                GridResultData = [];
                MetaData = [];
                myinstance.TotalDc = 0;
            }

            var startCnt = oSets._iDisplayStart;
            var RowContent = "";
            var RowCont = "";

            var iColumn, iNextSort;

            var iDataIndex = oSets.aaSorting[0][0];

            /* If the shift key is pressed then we are multiple column sorting */
            if (e.shiftKey) {
                /* Are we already doing some kind of sort on this column? */
                var bFound = false;
                for (var i = 0 ; i < oSets.aaSorting.length ; i++) {
                    if (oSets.aaSorting[i][0] == iDataIndex) {
                        bFound = true;
                        iColumn = oSets.aaSorting[i][0];
                        iNextSort = oSets.aaSorting[i][2] + 1;

                        if (!oSets.aoColumns[iColumn].asSorting[iNextSort]) {
                            /* Reached the end of the sorting options, remove from multi-col sort */
                            oSets.aaSorting.splice(i, 1);
                        }
                        else {
                            /* Move onto next sorting direction */
                            oSets.aaSorting[i][1] = oSets.aoColumns[iColumn].asSorting[iNextSort];
                            oSets.aaSorting[i][2] = iNextSort;
                        }
                        break;
                    }
                }

                /* No sort yet - add it in */
                if (bFound === false) {
                    oSets.aaSorting.push([iDataIndex,
                        oSets.aoColumns[iDataIndex].asSorting[0], 0]);
                }
            }
            else {
                /* If no shift key then single column sort */
                if (oSets.aaSorting.length == 1 && oSets.aaSorting[0][0] == iDataIndex) {
                    iColumn = oSets.aaSorting[0][0];
                    iNextSort = oSets.aaSorting[0][2];
                    if (!oSets.aoColumns[iColumn].asSorting[iNextSort]) {
                        iNextSort = 0;
                    }
                    oSets.aaSorting[0][1] = oSets.aoColumns[iColumn].asSorting[iNextSort];
                    oSets.aaSorting[0][2] = iNextSort;
                }
                else {
                    oSets.aaSorting.splice(0, oSets.aaSorting.length);
                    oSets.aaSorting.push([iDataIndex,
                        oSets.aoColumns[iDataIndex].asSorting[0], 0]);
                }
            }
            oSets.bColumnVisible = true;
            oTable._fnSort(oSets);
            oSets.aiDisplay = [];

            if (myinstance.TotalDc != oSets.aiDisplay.length) {
                var datalength = oSets.aiDisplay.length;
                //oSets.aiDisplay.remove(0, oTable.fnSettings().aiDisplay.length);

                for (var itrCnt = datalength; itrCnt < myinstance.TotalDc; itrCnt++) {
                    oSets.aiDisplay.push(itrCnt);
                }
            }

            for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                Data = [];
                RowContent = "";
                var j = 0;
                for (var k = 0; k < MetaData.length; k++) {
                    RowCont = "";
                    if (MetaData[k].Visible != undefined) {
                        if (MetaData[k].Visible == true) {
                            if (MetaData[k].IsGroupColumn != true) {
                                oSets.aoColumns[j].bShowColumns = true;
                                if (MetaData[k].Visible && oSets.aoColumns[j].bVisible) {
                                    RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k], result[itrCnt]);
                                    //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                }
                                j = j + 1;
                            }
                            if (MetaData[k].IsGroupColumn) {
                                if (MetaData[k].IsGroupColumn == true) {
                                    for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                        oSets.aoColumns[j].bShowColumns = true;
                                        if (MetaData[k].SubColumns[i].Visible && oSets.aoColumns[j].bVisible) {
                                            RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k].SubColumns[i], result[itrCnt]);
                                            //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                        }
                                        j = j + 1;
                                    }
                                }
                            }
                        }
                        else {
                            j = j + 1;
                        }
                    }
                    oGridControl.GetDataClmn(RowCont, MetaData[k], result[itrCnt], Data);
                }
                if (oSets.aoData[startCnt + itrCnt] != null && oSets.aoData[startCnt + itrCnt] != undefined) {
                    oSets.aoData[startCnt + itrCnt].nTr = null;
                    oSets.aoData[startCnt + itrCnt]._aData = Data;
                }
            }
            oTable._fnDraw(false);
        }
    }

    var fnAddData_Modified = function (oTable, oSettings, aDataSupplied) {
        var oCol;

        var oRow = {
            /**
             * TR element for the row
             *  @type node
             *  @default null
             */
            "nTr": null,

            /**
             * Data object from the original data source for the row. This is either
             * an array if using the traditional form of DataTables, or an object if
             * using mData options. The exact type will depend on the passed in
             * data from the data source, or will be an array if using DOM a data 
             * source.
             *  @type array|object
             *  @default []
             */
            "_aData": [],

            /**
             * Sorting data cache - this array is ostensibly the same length as the
             * number of columns (although each index is generated only as it is 
             * needed), and holds the data that is used for sorting each column in the
             * row. We do this cache generation at the start of the sort in order that
             * the formatting of the sort data need be done only once for each cell
             * per sort. This array should not be read from or written to by anything
             * other than the master sorting methods.
             *  @type array
             *  @default []
             *  @private
             */
            "_aSortData": [],

            /**
             * Array of TD elements that are cached for hidden rows, so they can be
             * reinserted into the table if a column is made visible again (or to act
             * as a store if a column is made hidden). Only hidden columns have a 
             * reference in the array. For non-hidden columns the value is either
             * undefined or null.
             *  @type array nodes
             *  @default []
             *  @private
             */
            "_anHidden": [],

            /**
             * Cache of the class name that DataTables has applied to the row, so we
             * can quickly look at this variable rather than needing to do a DOM check
             * on className for the nTr property.
             *  @type string
             *  @default <i>Empty string</i>
             *  @private
             */
            "_sRowStripe": ""
        };

        /* Take an independent copy of the data source so we can bash it about as we wish */
        var aDataIn = ($.isArray(aDataSupplied)) ?
            aDataSupplied.slice() :
            $.extend(true, {}, aDataSupplied);

        /* Create the object for storing information about this new row */
        var iRow = oSettings.aoData.length;
        var oData = $.extend(true, {}, oRow);
        oData._aData = aDataIn;
        oSettings.aoData.push(oData);

        /* Create the cells */
        var nTd, sThisType;
        //for (var i = 0, iLen = oSettings.aoColumns.length ; i < iLen ; i++) {
        //    oCol = oSettings.aoColumns[i];

        //    /* Use rendered data for filtering / sorting */
        //    if (typeof oCol.fnRender === 'function' && oCol.bUseRendered && oCol.mData !== null) {
        //        oTable._fnSetCellData(oSettings, iRow, i, oTable._fnRender(oSettings, iRow, i));
        //    }
        //    else {
        //        oTable._fnSetCellData(oSettings, iRow, i, oTable._fnGetCellData(oSettings, iRow, i));
        //    }

        //    /* See if we should auto-detect the column type */
        //    if (oCol._bAutoType && oCol.sType != 'string') {
        //        /* Attempt to auto detect the type - same as _fnGatherData() */
        //        var sVarType = oTable._fnGetCellData(oSettings, iRow, i, 'type');
        //        if (sVarType !== null && sVarType !== '') {
        //            sThisType = _fnDetectType(sVarType);
        //            if (oCol.sType === null) {
        //                oCol.sType = sThisType;
        //            }
        //            else if (oCol.sType != sThisType && oCol.sType != "html") {
        //                /* String is always the 'fallback' option */
        //                oCol.sType = 'string';
        //            }
        //        }
        //    }
        //}

        /* Add to the display array */
        oSettings.aiDisplayMaster.push(iRow);

        /* Create the DOM information */
        if (!oSettings.oFeatures.bDeferRender) {
            //CreateTr(oTable, oSettings, iRow);
        }

        return oSettings.aoData[iRow];
    }

    var CreateTr = function (oTable, oSettings, iRow) {
        var oData = oSettings.aoData[iRow];
        var nTd;
        oData.nTr = document.createElement('tr');

        /* Use a private property on the node to allow reserve mapping from the node
         * to the aoData array for fast look up
         */
        oData.nTr._DT_RowIndex = iRow;

        /* Special parameters can be given by the data source to be used on the row */
        if (oData._aData.DT_RowId) {
            oData.nTr.id = oData._aData.DT_RowId;
        }

        if (oData._aData.DT_RowClass) {
            oData.nTr.className = oData._aData.DT_RowClass;
        }

        /* Process each column */
        for (var i = 0, iLen = oSettings.aoColumns.length ; i < iLen ; i++) {
            var oCol = oSettings.aoColumns[i];
            nTd = document.createElement(oCol.sCellType);

            /* Render if needed - if bUseRendered is true then we already have the rendered
             * value in the data source - so can just use that
             */
            //nTd.id = oSettings.aoColumns[i].sTitle;

            /* Add user defined class */
            if (oCol.sClass !== null) {
                nTd.className = oCol.sClass;
            }

            if (oCol.bVisible) {
                oData.nTr.appendChild(nTd);
                oData._anHidden[i] = null;
            }
            else {
                oData._anHidden[i] = nTd;
            }
        }
    }

    this.AddActionItemForApproval = function (d) {
        var target = LoadingImage();
        var oTable = $('#' + lControlId).DataTable();
        var aPos = oTable.fnGetPosition(d.parentNode.parentNode);
        var atData = oTable.fnGetData(aPos);
        if (atData[0] != undefined && atData[0] != null && atData[0] != "")
            rec_id = parseInt(atData[0]);
        var DataRows = "";
        var parameter = { DCId: rec_id };
        var filterdata = SyncAjaxCall(GetRelativeUrl("/DCApproval/GetNCDetailsFormRDMS"), JSON.stringify(parameter));

        var filterResultdata = GridResultData.filter(filterByID);

        if (filterdata != undefined && filterdata != null && filterdata.length > 0) {
            for (var itr = 0; itr < filterdata.length; itr++) {
                DataRows += "<tr>";
                if (filterResultdata != null && filterResultdata != undefined && filterResultdata.length > 0) {
                    var filterResultDetailsdata = filterResultdata[0].DCLastUpdatedAnswerDetailList[filterdata[itr].AttributeId];
                    if (filterResultDetailsdata != null && filterResultDetailsdata != undefined)
                        DataRows += '<td>' + filterResultDetailsdata.AttributeName + '</td>';
                    else
                        DataRows += '<td></td>';
                }
                else
                    DataRows += '<td></td>';
                var NCActionDetailsETLDTOLst = filterdata[itr].NCActionDetailsETLDTOLst;
                var MultiMediaDetailsETLDTOLst = filterdata[itr].MultiMediaDetailsETLDTOLst;
                if (NCActionDetailsETLDTOLst != undefined && NCActionDetailsETLDTOLst != null && NCActionDetailsETLDTOLst.length > 0) {
                    var NCActionDetails = "";
                    for (var actitr = 0; actitr < NCActionDetailsETLDTOLst.length; actitr++) {
                        if (NCActionDetailsETLDTOLst[actitr].CustomeAction != null && NCActionDetailsETLDTOLst[actitr].CustomeAction != "")
                            NCActionDetails = NCActionDetails == "" ? NCActionDetailsETLDTOLst[actitr].CustomeAction : (NCActionDetails + " | " + NCActionDetailsETLDTOLst[actitr].CustomeAction);
                        else if (NCActionDetailsETLDTOLst[actitr].PreDefinedActionName != null && NCActionDetailsETLDTOLst[actitr].PreDefinedActionName != "")
                            NCActionDetails = NCActionDetails == "" ? NCActionDetailsETLDTOLst[actitr].PreDefinedActionName : (NCActionDetails + " | " + NCActionDetailsETLDTOLst[actitr].PreDefinedActionName);
                    }
                    DataRows += '<td>' + NCActionDetails + '</td>'
                }
                else if (NCActionDetailsETLDTOLst == undefined || NCActionDetailsETLDTOLst == null || NCActionDetailsETLDTOLst.length == 0)
                    DataRows += "<td></td>";
                if (MultiMediaDetailsETLDTOLst != undefined && MultiMediaDetailsETLDTOLst != null && MultiMediaDetailsETLDTOLst.length > 0) {
                    var MultiMediaDetails = "";
                    for (var mulitr = 0; mulitr < MultiMediaDetailsETLDTOLst.length; mulitr++) {
                        if (MultiMediaDetailsETLDTOLst[mulitr].URL != "")
                            MultiMediaDetails = MultiMediaDetails == "" ? MultiMediaDetailsETLDTOLst[mulitr].URL : (MultiMediaDetails + " | " + MultiMediaDetailsETLDTOLst[mulitr].URL);
                    }
                    var parameterToLoadData = MultiMediaDetails;
                    parameterToLoadData = { request: parameterToLoadData };
                    MultiMediaDetailsImgUrl = SyncAjaxCall(GetRelativeUrl("/DCApproval/GetMultimediaElementForShiftReport"), JSON.stringify(parameterToLoadData));
                    if (MultiMediaDetailsImgUrl != undefined && MultiMediaDetailsImgUrl != null && MultiMediaDetailsImgUrl != "" && MultiMediaDetailsImgUrl.length > 0) {
                        var superbox = '<div class="superbox">';
                        for (var mulitr = 0; mulitr < MultiMediaDetailsImgUrl.length; mulitr++) {
                            superbox += '<span class="superbox-list"><a href="' + MultiMediaDetailsImgUrl[mulitr] + '" data-lightbox="' + itr + '"><img src="' + MultiMediaDetailsImgUrl[mulitr] + '" class="superbox-img"/></a></span>';
                        }
                        superbox += '</div>';
                        DataRows += '<td>' + superbox + '</td>'
                    }
                    else if (MultiMediaDetailsImgUrl == undefined || MultiMediaDetailsImgUrl == null || MultiMediaDetailsImgUrl == "")
                        DataRows += '<td></td>'
                }
                else if (MultiMediaDetailsETLDTOLst == undefined || MultiMediaDetailsETLDTOLst == null || MultiMediaDetailsETLDTOLst.length == 0)
                    DataRows += "<td></td>";
                DataRows += "</tr>";
            }
        }
        RemoveLoadingImage(target);
        // `d` is the original data object for the row
        if (DataRows != "") {
            return '<table cellpadding="5" cellspacing="0" border="0" class="table">' +
                '<thead><tr>' +
                  '<th>Atrribute</td>' +
                  '<th>Action</td>' +
                  //'<th>Comments</td>' +
                  '<th>Media</td>' +
                '</tr></thead>' +
                '<tbody>' +
                DataRows
                  //'<tr>' +
                  //    '<td>Full name:</td>' +
                  //    '<td>asd</td>' +
                  //    '<td>sad</td>' +
                  //    '<td width="20%"><div class="superbox"><span class="superbox-list"><a href="img/demo/m1.jpg" data-lightbox="action1"><img src="img/demo/m1.jpg" class="superbox-img"/></a></span><span class="superbox-list"><a href="img/demo/m2.jpg" data-lightbox="action1"><img src="img/demo/m2.jpg" class="superbox-img"/></a></span><span class="superbox-list"><a href="img/demo/m3.jpg" data-lightbox="action1"><img src="img/demo/m3.jpg" class="superbox-img"/></a></span></div></td>' +
                  //'</tr>' 
                + '</tbody>' +
            '</table>';
        }
        else
            return false;
    }

    this.AddActionItem = function (d) {
        var target = LoadingImage();
        var oTable = $('#' + lControlId).DataTable();
        var aPos = oTable.fnGetPosition(d.parentNode.parentNode);
        var atData = oTable.fnGetData(aPos);
        if (atData[0] != undefined && atData[0] != null && atData[0] != "")
            rec_id = parseInt(atData[0]);
        var DataRows = "";

        var filterdata = GridResultData.filter(filterByID);

        for (var itr = 0; itr < filterdata.length; itr++) {
            var DCLastUpdatedAnswerDetailList = filterdata[itr].DCLastUpdatedAnswerDetailList;
            if (DCLastUpdatedAnswerDetailList != undefined && DCLastUpdatedAnswerDetailList != null) {
                for (var rditr in DCLastUpdatedAnswerDetailList) {
                    var NCDetailsLst = DCLastUpdatedAnswerDetailList[rditr].NCDetailsLst;
                    if (NCDetailsLst != undefined && NCDetailsLst != null && NCDetailsLst.length > 0) {
                        DataRows += "<tr>";
                        DataRows += '<td>' + DCLastUpdatedAnswerDetailList[rditr].AttributeName + '</td>'
                        for (var ncitr = 0; ncitr < NCDetailsLst.length; ncitr++) {
                            var NCActionDetailsETLDTOLst = NCDetailsLst[ncitr].NCActionDetailsETLDTOLst;
                            var MultiMediaDetailsETLDTOLst = NCDetailsLst[ncitr].MultiMediaDetailsETLDTOLst;
                            if (NCActionDetailsETLDTOLst != undefined && NCActionDetailsETLDTOLst != null && NCActionDetailsETLDTOLst.length > 0) {
                                var NCActionDetails = "";
                                for (var actitr = 0; actitr < NCActionDetailsETLDTOLst.length; actitr++) {
                                    if (NCActionDetailsETLDTOLst[actitr].CustomeAction != null && NCActionDetailsETLDTOLst[actitr].CustomeAction != "")
                                        NCActionDetails = NCActionDetails == "" ? NCActionDetailsETLDTOLst[actitr].CustomeAction : (NCActionDetails + " | " + NCActionDetailsETLDTOLst[actitr].CustomeAction);
                                    else if (NCActionDetailsETLDTOLst[actitr].PreDefinedActionName != null && NCActionDetailsETLDTOLst[actitr].PreDefinedActionName != "")
                                        NCActionDetails = NCActionDetails == "" ? NCActionDetailsETLDTOLst[actitr].PreDefinedActionName : (NCActionDetails + " | " + NCActionDetailsETLDTOLst[actitr].PreDefinedActionName);
                                }
                                DataRows += '<td>' + NCActionDetails + '</td>'
                            }
                            else if (NCActionDetailsETLDTOLst == undefined || NCActionDetailsETLDTOLst == null || NCActionDetailsETLDTOLst.length == 0)
                                DataRows += "<td></td>";
                            if (MultiMediaDetailsETLDTOLst != undefined && MultiMediaDetailsETLDTOLst != null && MultiMediaDetailsETLDTOLst.length > 0) {
                                var MultiMediaDetails = "";
                                for (var mulitr = 0; mulitr < MultiMediaDetailsETLDTOLst.length; mulitr++) {
                                    if (MultiMediaDetailsETLDTOLst[mulitr].URL != "")
                                        MultiMediaDetails = MultiMediaDetails == "" ? MultiMediaDetailsETLDTOLst[mulitr].URL : (MultiMediaDetails + " | " + MultiMediaDetailsETLDTOLst[mulitr].URL);
                                }
                                var parameterToLoadData = MultiMediaDetails;
                                parameterToLoadData = { request: parameterToLoadData };
                                MultiMediaDetailsImgUrl = SyncAjaxCall(GetRelativeUrl("/DCApproval/GetMultimediaElementForShiftReport"), JSON.stringify(parameterToLoadData));
                                if (MultiMediaDetailsImgUrl != undefined && MultiMediaDetailsImgUrl != null && MultiMediaDetailsImgUrl != "" && MultiMediaDetailsImgUrl.length > 0) {
                                    var superbox = '<div class="superbox">';
                                    for (var mulitr = 0; mulitr < MultiMediaDetailsImgUrl.length; mulitr++) {
                                        superbox += '<span class="superbox-list"><a href="' + MultiMediaDetailsImgUrl[mulitr] + '" data-lightbox="' + rditr + '"><img src="' + MultiMediaDetailsImgUrl[mulitr] + '" class="superbox-img"/></a></span>';
                                    }
                                    superbox += '</div>';
                                    DataRows += '<td>' + superbox + '</td>'
                                }
                                else if (MultiMediaDetailsImgUrl == undefined || MultiMediaDetailsImgUrl == null || MultiMediaDetailsImgUrl == "")
                                    DataRows += '<td>' + superbox + '</td>'
                            }
                            else if (MultiMediaDetailsETLDTOLst == undefined || MultiMediaDetailsETLDTOLst == null || MultiMediaDetailsETLDTOLst.length == 0)
                                DataRows += "<td></td>";
                        }
                        DataRows += "</tr>";
                    }
                }
            }
            RemoveLoadingImage(target);
        }
        // `d` is the original data object for the row
        if (DataRows != "") {
            return '<table cellpadding="5" cellspacing="0" border="0" class="table">' +
                '<thead><tr>' +
                  '<th>Atrribute</td>' +
                  '<th>Action</td>' +
                  //'<th>Comments</td>' +
                  '<th>Media</td>' +
                '</tr></thead>' +
                '<tbody>' +
                DataRows
                  //'<tr>' +
                  //    '<td>Full name:</td>' +
                  //    '<td>asd</td>' +
                  //    '<td>sad</td>' +
                  //    '<td width="20%"><div class="superbox"><span class="superbox-list"><a href="img/demo/m1.jpg" data-lightbox="action1"><img src="img/demo/m1.jpg" class="superbox-img"/></a></span><span class="superbox-list"><a href="img/demo/m2.jpg" data-lightbox="action1"><img src="img/demo/m2.jpg" class="superbox-img"/></a></span><span class="superbox-list"><a href="img/demo/m3.jpg" data-lightbox="action1"><img src="img/demo/m3.jpg" class="superbox-img"/></a></span></div></td>' +
                  //'</tr>' 
                + '</tbody>' +
            '</table>';
        }
        else
            return false;
    }

    var filterByID = function (obj) {
        if ('DataCaptureId' in obj && !isNaN(obj.DataCaptureId) && rec_id == obj.DataCaptureId) {
            return true;
        } else {
            return false;
        }
    }

    this.NCDetailsApproval = function (button) {
        if (button.innerText != 0) {
            RemoveMessage();
            var gridConfigUrl = GetParentFolderOfApplication() + '/DCApproval/GetGridConfigForNCDetail/';
            var TemplateId = document.getElementById(ModelUpdate.PageID + "_ddlTempName");
            if (TemplateId != undefined && TemplateId != null) {
                TemplateId = parseInt(TemplateId.value);
            }
            var paramtoLoad = { request: JSON.stringify({ TemplateId: TemplateId }) };
            var GridColumnConfig = SyncAjaxCall(gridConfigUrl, JSON.stringify(paramtoLoad));
            if (GridColumnConfig != undefined && GridColumnConfig != null) {
                var controlId = GridColumnConfig.ControlId;
                var _GetGridDisplay = new GetGridDisplay();
                _GetGridDisplay.lGridDisplayFormatConfig = GridColumnConfig;
                _GetGridDisplay.PaginatedEnabled = false;
                MetaData = [];
                selected = [];
                selected.push(button.id.split('_')[1]);
                if ($("#" + controlId).length > 0 && $("#" + controlId)[0].tHead != null) {
                    _GetGridDisplay.Reload = true;
                    var oTable = $('#' + controlId).DataTable();
                    oTable.fnClearTable(true);
                    _GetGridDisplay.Load();
                    oTable.fnDestroy(false);
                    _GetGridDisplay.Init();
                }
                else {
                    _GetGridDisplay.Reload = false;
                    _GetGridDisplay.Load();
                    _GetGridDisplay.Init();
                }
                selected = [];
                $("#myNCModal").modal("show");
            }
        }
        else
            ShowMessage("NC details not available.", 2);
    }

    this.NCDetails = function (button) {
        if (button.innerText != 0) {
            RemoveMessage();
            var gridConfigUrl = GetParentFolderOfApplication() + '/Report/GetGridConfigForNCDetail/';
            var TemplateId = document.getElementById(ModelUpdate.PageID + "_ddlTempName");
            if (TemplateId != undefined && TemplateId != null) {
                TemplateId = parseInt(TemplateId.value);
            }
            var paramtoLoad = { request: JSON.stringify({ TemplateId: TemplateId }) };
            var GridColumnConfig = SyncAjaxCall(gridConfigUrl, JSON.stringify(paramtoLoad));
            if (GridColumnConfig != undefined && GridColumnConfig != null) {
                var controlId = GridColumnConfig.ControlId;
                var _GetGridDisplay = new GetGridDisplay();
                _GetGridDisplay.lGridDisplayFormatConfig = GridColumnConfig;
                _GetGridDisplay.PaginatedEnabled = false;
                MetaData = [];
                selected = [];
                selected.push(button.id.split('_')[1]);
                if ($("#" + controlId).length > 0 && $("#" + controlId)[0].tHead != null) {
                    _GetGridDisplay.Reload = true;
                    var oTable = $('#' + controlId).DataTable();
                    oTable.fnClearTable(true);
                    _GetGridDisplay.Load();
                    oTable.fnDestroy(false);
                    _GetGridDisplay.Init();
                }
                else {
                    _GetGridDisplay.Reload = false;
                    _GetGridDisplay.Load();
                    _GetGridDisplay.Init();
                }
                selected = [];
                $("#myNCModal").modal("show");
            }
        }
        else
            ShowMessage("NC details not available.", 2);
    }

    this.PageCountChangeEventHandler = function (e) {
        var loadParameter = myinstance.ParameterToLoadGrid;
        var target = LoadingImage();
        var oTable = $('#' + lControlId).DataTable();
        var iVal = $(this).val();
        selected = [];
        var oSettings = oTable.fnSettings();

        /* Update all other length options for the new display */
        var n = oSettings.aanFeatures.l;
        for (i = 0, iLen = n.length ; i < iLen ; i++) {
            if (n[i] != this.parentNode) {
                $('select', n[i]).val(iVal);
            }
        }

        /* Redraw the table */
        oSettings._iDisplayLength = parseInt(iVal, 10);
        oTable._fnCalculateEnd(oSettings);

        /* If we have space to show extra rows (backing up from the end point - then do so */
        if (oSettings.fnDisplayEnd() == oSettings.fnRecordsDisplay()) {
            oSettings._iDisplayStart = oSettings.fnDisplayEnd() - oSettings._iDisplayLength;
            if (oSettings._iDisplayStart < 0) {
                oSettings._iDisplayStart = 0;
            }
        }

        if (oSettings._iDisplayLength == -1) {
            oSettings._iDisplayStart = 0;
        }
        setTimeout(function () {
            var CurrentPageNo = 1;
            var oGridControl = new GridControl();
            if (GridDisplayFormatConfig != null && GridDisplayFormatConfig != undefined && GridDisplayFormatConfig.DataSourceConfig != null) {
                var oGetGridDisplay = new GetGridDisplay();
                oGetGridDisplay.lGridDisplayFormatConfig = GridDisplayFormatConfig;
                var pramToLoad = {};
                if (loadParameter != undefined && loadParameter != null && loadParameter != '') {
                    pramToLoad = JSON.parse(loadParameter["request"]);
                }
                else {
                    pramToLoad = oGetGridDisplay.GetParamToLoadData(GridDisplayFormatConfig.DataSourceConfig);
                    if (pramToLoad != null && pramToLoad != undefined && pramToLoad != '' && pramToLoad.request != undefined && pramToLoad.request != null && pramToLoad.request != '')
                        pramToLoad = JSON.parse(pramToLoad.request);
                    else
                        pramToLoad = {};
                }
                pramToLoad["PageSize"] = oSettings._iDisplayLength;
                pramToLoad["CurrentPage"] = CurrentPageNo;
                //pramToLoad["SortColumnName"] = oSettings.aoColumns[oSettings.aaSorting[0][0]].nTh.id;
                //pramToLoad["SortType"] = oSettings.aaSorting[0][1] == "asc" ? "OrderBy" : "OrderByDescending";
                var result = oGetGridDisplay.GetDataToLoadGrid(GridDisplayFormatConfig.DataSourceConfig.ServiceKeyName, JSON.stringify({ request: JSON.stringify(pramToLoad) }));
                GridResultData = result;
                myinstance.TotalDc = TotalDc;

                MetaData = [];
                var GridColumConfig = oGetGridDisplay.lGridDisplayFormatConfig.ColumnConfigList;
                if (GridColumConfig != '' && GridColumConfig != null && GridColumConfig != undefined && GridColumConfig.length > 0) {
                    oGetGridDisplay.GenerateMetaDataColumn(GridColumConfig, false);
                }
            }
            else {
                GridResultData = [];
                MetaData = [];
                myinstance.TotalDc = 0;
            }

            var startCnt = oSettings._iDisplayStart;
            var RowContent = "";
            var RowCont = "";
            oSettings.aiDisplay = [];

            if (myinstance.TotalDc != oSettings.aiDisplay.length) {
                var datalength = oSettings.aiDisplay.length;
                //oSets.aiDisplay.remove(0, oTable.fnSettings().aiDisplay.length);

                for (var itrCnt = datalength; itrCnt < myinstance.TotalDc; itrCnt++) {
                    oSettings.aiDisplay.push(itrCnt);
                }
            }

            for (var itrCnt = 0; itrCnt < result.length; itrCnt++) {
                Data = [];
                //if (oSettings.aoData[startCnt + itrCnt].nTr.innerHTML == "") {
                RowContent = "";
                var j = 0;
                for (var k = 0; k < MetaData.length; k++) {
                    RowCont = "";
                    if (MetaData[k].Visible != undefined) {
                        if (MetaData[k].Visible == true) {
                            if (MetaData[k].IsGroupColumn != true) {
                                oSettings.aoColumns[j].bShowColumns = true;
                                if (MetaData[k].Visible && oSettings.aoColumns[j].bVisible) {
                                    RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k], result[itrCnt]);
                                    //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                }
                                j = j + 1;
                            }
                            if (MetaData[k].IsGroupColumn) {
                                if (MetaData[k].IsGroupColumn == true) {
                                    for (var i = 0; i < MetaData[k].SubColumns.length; i++) {
                                        oSettings.aoColumns[j].bShowColumns = true;
                                        if (MetaData[k].SubColumns[i].Visible && oSettings.aoColumns[j].bVisible) {
                                            RowContent = RowContent + oGridControl.GetDataColumn(RowCont, MetaData[k].SubColumns[i], result[itrCnt]);
                                            //oSets.aoData[startCnt + itrCnt]._aData[itrCntj - 1] = 
                                        }
                                        j = j + 1;
                                    }
                                }
                            }
                        }
                        else {
                            j = j + 1;
                        }
                    }
                    oGridControl.GetDataClmn(RowCont, MetaData[k], result[itrCnt], Data);
                }
                if (oSettings.aoData[startCnt + itrCnt] != null && oSettings.aoData[startCnt + itrCnt] != undefined) {
                    oSettings.aoData[startCnt + itrCnt].nTr = null;
                    oSettings.aoData[startCnt + itrCnt]._aData = Data;
                }
                //}
            }

            oTable._fnDraw(false);
            RemoveLoadingImage(target);
            $(".scroll-content").niceScroll({ cursorcolor: "#00F", horizrailenabled: false });
            $(".scroll-content").getNiceScroll().resize();
        }, 1);
    }

    this.ShowAllRecordsButtonClick = function (object) {
        $this = $(object);
        var oTable = $('#' + lControlId).DataTable();
        if ($this.prop('checked')) {
            $('input', oTable.fnGetNodes()).each(function () {
                var aPos = oTable.fnGetPosition(this.parentElement.parentElement);
                var atData = oTable.fnGetData(aPos);
                if (this.parentElement.parentElement.tagName == "TR") {
                    if (this.parentElement.parentElement.cells["ApprovalStatus"]) {
                        if (this.parentElement.parentElement.cells["ApprovalStatus"].innerHTML == "Pending") {
                            $(this.parentElement.parentElement).addClass('row-selected');
                            if (selected.indexOf(atData[0]) == -1)
                                selected.push(atData[0]);
                            this.checked = true;
                            $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                        }
                        else if (this.parentElement.parentElement.cells["ApprovalStatus"].innerHTML != "Pending") {
                            this.checked = false;
                            $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                        }
                    }
                    if (this.parentElement.parentElement.cells["UserApproved"]) {
                        if (this.parentElement.parentElement.cells["UserApproved"].innerHTML == "Pending") {
                            $(this.parentElement.parentElement).addClass('row-selected');
                            if (selected.indexOf(atData[0]) == -1)
                                selected.push(atData[0]);
                            this.checked = true;
                            $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                        }
                        else if (this.parentElement.parentElement.cells["UserApproved"].innerHTML == "Pending") {
                            this.checked = false;
                            $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                        }
                    }
                    if (this.parentElement.parentElement.cells["Status"]) {
                        if (this.parentElement.parentElement.cells["Status"].innerHTML == "Pending") {
                            $(this.parentElement.parentElement).addClass('row-selected');
                            if (selected.indexOf(atData[0]) == -1)
                                selected.push(atData[0]);
                            this.checked = true;
                            $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                        }
                        else if (this.parentElement.parentElement.cells["Status"].innerHTML == "Pending") {
                            this.checked = false;
                            $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
                        }
                    }
                    $(this.parentElement.parentElement).addClass('row-selected');
                    if (selected.indexOf(atData[0]) == -1)
                        selected.push(atData[0]);
                    this.checked = true;
                    $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'true');
                }
            });
            $('#selectall')[0].checked = true;
        } else {
            $('input', oTable.fnGetNodes()).each(function () {
                var aPos = oTable.fnGetPosition(this.parentElement.parentElement);
                var atData = oTable.fnGetData(aPos);
                this.checked = false;
                if (this.parentElement.parentElement.tagName == "TR") {
                    if ($(this.parentElement.parentElement).hasClass('row-selected')) {
                        $(this.parentElement.parentElement).removeClass('row-selected');
                        var index = selected.indexOf(atData[0]);
                        if (index != -1)
                            selected.splice(index, 1);
                    }
                }
                $('input', oTable.fnGetNodes(this.parentElement.parentElement._DT_RowIndex)).attr('checked', 'false');
            });
            $('#selectall')[0].checked = false;
        }
    }

    //-- Show notification Details while click the Send Mail button.
    this.ShowNotificationDetails = function (d) {
        var target = LoadingImage();
        setTimeout(function () {
            var oTable = $('#' + lControlId).DataTable();
            var aPos = oTable.fnGetPosition(d.parentNode.parentNode);
            var atData = oTable.fnGetData(aPos);
            if (atData[0] != undefined && atData[0] != null && atData[0] != "")
                rec_id = parseInt(atData[0]);
            var parameterToLoadData = { DCId: rec_id };
            
            var myAjaxobj = new WiNAiMAjaxHar();
            myAjaxobj.url = GetRelativeUrl("/Home/GetEmailHistoryInfoDetails");
            myAjaxobj.webMethod = "post";
            myAjaxobj.parameter = JSON.stringify(parameterToLoadData);
            myAjaxobj.async = true;
            myAjaxobj.dataType = "json";
            var callBackparm = {
                success: GetEmailHistorySuccess,
                error: GetEmailHistoryError,
                sender: this
            }
            myAjaxobj.execute(callBackparm);

            var result = SyncAjaxCall((GetRelativeUrl("/Home/GetEmailInfoDetails")), JSON.stringify(parameterToLoadData));
            var DataCaptureId = document.getElementById("txt_DataCaptureId");
            if (result != undefined && result != null) {
                var To = document.getElementById("txt_To");
                var CC = document.getElementById("txt_CC");
                var BCC = document.getElementById("txt_BCC");
                var Subject = document.getElementById("txt_Subject");
                var emailBody = document.getElementById("emailbody");
                if (To != undefined && To != null)
                    To.value = result.MailTo;
                if (CC != undefined && CC != null)
                    CC.value = result.MailCC;
                if (BCC != undefined && BCC != null)
                    BCC.value = result.MailBCC;
                if (Subject != undefined && Subject != null)
                    Subject.value = result.MailSubject;
                if (emailBody != undefined && emailBody != null)
                    $(emailBody).code(result.MailBody);
            }
            if (DataCaptureId != undefined && DataCaptureId != null)
                DataCaptureId.value = rec_id;
            RemoveLoadingImage(target);
        }, 1);
    }

    //-- Success Event for Email Historty.
    var GetEmailHistorySuccess = function (response, message) {
        if (message == 'Session Failure') {
            window.location.href = GetRelativeUrl() + "/Login/LoginIndex";
            return false;
        }
        else {
            try {
                var result = null;
                if (typeof (message) == 'string')
                    result = JSON.parse(message);
                else
                    result = message;
                var divAlertBlockOl = $(".alert.alert-block.alert-warning").find("ol");
                if (divAlertBlockOl != undefined && divAlertBlockOl != null && divAlertBlockOl.length > 0) {
                    divAlertBlockOl.html('');
                    if (result != undefined && result != null) {
                        for (var itr = 0; itr < result.length; itr++) {
                            var ToEmailIds = result[itr].ToEmailIds;
                            var ToEmailIdLst = ToEmailIds.split(";");
                            var MailSentDate = result[itr].EmailPoolInsertedDate;
                            var HistoryHTML = "";
                            for (var itrToEmail = 0; itrToEmail < ToEmailIdLst.length; itrToEmail++) {
                                HistoryHTML += "<li>" + ToEmailIdLst[itrToEmail] + " send on " +
                                    moment(parseWithDate(JSON.stringify(MailSentDate))).format('D-MM-YYYY H:mm:ss') + "</li>";
                            }
                            divAlertBlockOl.html(HistoryHTML);
                        }
                    }
                }
            }
            catch (ex) { }
        }
    }

    //-- Error Event for Email Historty.
    var GetEmailHistoryError = function (sender, Request, textStatus, errorThrown) {
    }

    var SyncAjaxCall = function (Url, parameterToLoadData, async) {
        var result;
        if (async == undefined || async == null)
            async = false;
        $.ajax({
            url: Url,
            contentType: 'application/json; charset=utf-8',
            type: 'POST',
            dataType: 'json',
            data: parameterToLoadData,
            async: async,
            success: function (response) {
                result = response;
                if (result != null && result != undefined && result == "Session Failure") {
                    window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
                    return false;
                }
                else if (navigator != undefined && navigator != null && !navigator.onLine)
                    ShowMessage("IN-ER-ALP-001 :: Please Check Your Internet Connectivity", 4);
            },
            error: function (result) {
                if (navigator != undefined && navigator != null && !navigator.onLine)
                    ShowMessage("IN-ER-ALP-001 :: Please Check Your Internet Connectivity", 4);
                else
                    ShowMessage("IN-ER-PRO-001 :: Error in current operation.", 4);
            }
        });
        return result;
    }

    var parseWithDate = function (json) {
        /// <summary>  
        /// parses a JSON string and turns ISO or MSAJAX date strings  
        /// into native JS date objects  
        /// </summary>      
        /// <param name="json" type="var">json with dates to parse</param>          
        /// </param>  
        /// <returns type="value, array or object" />  
        try {
            var res = JSON.parse(json,
            function (key, value) {
                if (typeof value === 'string') {
                    var a = reISO.exec(value);
                    if (a)
                        return new Date(Date.UTC(+a[1], +a[2] - 1,
                                                 +a[3], +a[4], +a[5], +a[6]));
                    a = reMsAjax.exec(value);
                    if (a) {
                        var b = a[1].split(/[-+,.]/);
                        return new Date(b[0] ? +b[0] : 0 - +b[1]);
                    }
                }
                return value;
            });
            return res;
        } catch (e) {
            // orignal error thrown has no error message so rethrow with message  
            throw new Error("JSON content could not be parsed");
            return null;
        }
    }
}

//-- For Clear All Control Data. from Page config collection or the Parent Control.
function OneViewClearControl(ControlCollection) {
    this.IsDefaultValueSelect = false;
    var myInstance = this;
    this.ClearControl = function () {
        if (ControlCollection != undefined && ControlCollection != null) {
            if (typeof (ControlCollection) == 'string' && ControlCollection != '') {
                var ParentControl = document.getElementById(ControlCollection);
                if (ParentControl.childNodes != undefined && ParentControl.childNodes != null && ParentControl.childNodes.length > 0) {
                    clearUsingParentControl(ParentControl.childNodes);
                }
            }
            else if (typeof (ControlCollection) == 'object') {
                var controlLst = ControlCollection.ControlGroupConfigLst;
                if (controlLst != undefined && controlLst != null && controlLst.length > 0) {
                    controlLst = controlLst[0].ControlConfigDict;
                    clearUsingHTMLPageConfig(controlLst);
                }
            }
        }
    }

    var clearUsingHTMLPageConfig = function (ControlCollection) {
        for (var item in ControlCollection) {
            var Control = ControlCollection[item];
            var controlDom = document.getElementById(Control.ClientID);
            if (controlDom != undefined && controlDom != null) {
                if (Control.ControlTypeName == "ComboBox") {
                    if (myInstance.IsDefaultValueSelect) {
                        controlDom = $(Control.ClientID);
                        if (controlDom != undefined && controlDom != null && controlDom.options != undefined && controlDom.options != null) {
                            for (var itr = 0 ; itr < controlDom.options.length; itr++) {
                                if (itr == 0)
                                    controlDom.options[itr].selected = true;
                                else
                                    controlDom.options[itr].selected = false;
                            }
                        }
                    }
                    else if ($(controlDom).data().select2 != undefined) {
                        if ($(controlDom).data().select2.clear != undefined) {
                            $(controlDom).data().select2.clear(false);
                        }
                        else {
                            var oSelected = $(controlDom).data().select2.selection;
                            var selectedChoice = oSelected.find(".select2-search-choice");
                            if (selectedChoice.length > 0)
                                $(controlDom).data().select2.unselect(selectedChoice);
                        }
                    }
                }
                if (Control.ControlTypeName == "TextBox") {
                    controlDom.value = '';
                }
            }
            if (Control.ControlTypeName == "CheckBox" || (Control.ControlTypeName == "RadioButton" && Control.RadioButtonType == 0)) {
                var group = document.getElementsByName("group_" + Control.ClientID)
                var CheckList = [];
                for (var i = 0; i < group.length; i++) {
                    if (Control.isStaticListItem == true && Control.DefaultListItem != undefined && Control.DefaultListItem != null) {
                        for (var itr = 0; itr < Control.DefaultListItem.length; itr++) {
                            if (Control.DefaultListItem[itr].Id == group[i].value) {
                                group[i].checked = Control.DefaultListItem[itr].Selected;
                                break;
                            }
                        }
                    }
                    else {
                        if (i == 0) {
                            group[i].checked = true;
                        }
                        else
                            group[i].checked = true;
                    }
                }
            }
            if (Control.ControlTypeName == "RadioButton" && Control.RadioButtonType == 1) {
                var parentControl = document.getElementById("group_" + Control.ClientID);
                if (parentControl != null && parentControl != undefined) {
                    try {
                        var divChild = $(parentControl).find('.list-group-item');
                        for (var i = 0; i < divChild.length; i++) {
                            parentControl.removeChild(divChild[i]);
                        }
                    }
                    catch (ex) { }
                }
            }
            if (Control.ControlTypeName == "ImageControl") {
                var parentControl = document.getElementById(Control.ContainerId);
                if (parentControl != undefined && parentControl != null) {
                    for (var itr = 0; itr < parentControl.children.length;) {
                        parentControl.removeChild(parentControl.children[itr]);
                    }
                }
            }
        }
    }

    var clearUsingParentControl = function (ControlCollection) {
        for (var itr = 0; itr < ControlCollection.length; itr++) {
            var Control = ControlCollection[itr];
            if (Control.tagName == "SELECT") {
                if ($(Control).data().select2 != undefined) {
                    if ($(Control).data().select2.clear != undefined)
                        $(Control).data().select2.clear();
                    else {
                        var oSelected = $(Control).data().select2.selection;
                        var selectedChoice = oSelected.find(".select2-search-choice");
                        if (selectedChoice.length > 0)
                            $(Control).data().select2.unselect(selectedChoice);
                    }
                }
            }
            else if (Control.tagName == "INPUT") {

            }
            else {
                if (Control.childNodes != undefined && Control.childNodes != null && Control.childNodes.length > 0) {
                    clearUsingParentControl(Control.childNodes);
                }
            }
        }
    }
}

// For filtering the array
function OneViewArrayFilter(field, value) {
    return function (a, b) {
        if (field in a && a[field] != undefined && a[field] != null && a[field] != '' && value === a[field]) {
            return true;
        }
        else if (field in a && a[field] != undefined && a[field] != null && a[field] == 0 && value === a[field]) {
            return true;
        } else {
            return false;
        }
    }
}

/* Get particular colun values from array of object. */
function OneViewArrayGetFieldValues(oArray, field) {
    var result = [];
    if (oArray != undefined && oArray != null && oArray.length > 0) {
        result = oArray.map(function (obj, index) {
            return obj[field];
        });
    }
    return result;
}

function OneViewArrayFindIndex(oArray, field, value) {
    var result = [];
    if (oArray != undefined && oArray != null && oArray.length > 0) {
        result = oArray.map(function (obj, index) {
            if (obj[field] == value) {
                return index;
            }
            else
                return -1;
        });
    }
    var finalResult = [];
    for (var itr = 0; itr < result.length; itr++) {
        if (result[itr] != -1)
            finalResult.push(result[itr]);
    }
    return finalResult;
}

function OneViewFindMaxValueFromArray(field, lArray) {
    var maxValue = 0;
    for (var itr = 0; itr < lArray.length; itr++) {
        var fieldValue = lArray[itr][field];
        if (fieldValue != undefined && fieldValue != null && fieldValue != '' && fieldValue > maxValue) {
            maxValue = parseInt(fieldValue);
        }
    }
    return maxValue;
}

function GetParameter(GridConfigUrl, oModel) {
    var params = GetGridLoadParameters(GridConfigUrl, oModel);
    if (params.length > 0 && params.length > 1) {
        var parameterToLoadData = JSON.parse(params[1]);
        if (parameterToLoadData != undefined && parameterToLoadData != null && parameterToLoadData.request != undefined && parameterToLoadData.request != null) {
            var parameter = JSON.parse(parameterToLoadData.request);
            var ddlTempName = document.getElementById("ddlTempName");
            var ddlPlaceName = document.getElementById("ddlPlaceName");
            var ddl_ObservationType = document.getElementById("ddl_ObservationType");
            var DatFromDate = document.getElementById("DatFromDate_Filter");
            var PlaceDimension = document.getElementById("PlaceDimension");
            if (ddlTempName != undefined && ddlTempName != null)
                parameter["ddlTempName"] = ddlTempName.value;
            if (ddlPlaceName != undefined && ddlPlaceName != null)
                parameter["ddlPlaceName"] = ddlPlaceName.value;
            if (ddl_ObservationType != undefined && ddl_ObservationType != null)
                parameter["ddl_ObservationType"] = ddl_ObservationType.value;
            if (DatFromDate != undefined && DatFromDate != null)
                parameter["DatFromDate"] = DatFromDate.getElementsByTagName("span")[0].innerHTML;
            if (PlaceDimension != undefined && PlaceDimension != null)
                parameter["PlaceDimension"] = PlaceDimension.value;
            params[0] = parameter;
            parameterToLoadData.request = JSON.stringify(parameter);
            params[1] = JSON.stringify(parameterToLoadData);
        }
    }
    return params;
}

function ShowMessage(Message, MessageType) {
    RemoveMessage();
    var color = "";
    var iconSmall = "";
    if (MessageType == 1) { //-- Success
        color = "#739E73";
        iconSmall = "fa fa-check bounce animated";
    }
    else if (MessageType == 2) { //-- Warning
        color = "#C79121";
        iconSmall = "fa fa-shield bounce animated";
    }
    else if (MessageType == 3) { //-- Info
        color = "#3276B1";
        iconSmall = "fa fa-bell bounce animated";
    }
    else if (MessageType == 4) { //-- Error
        color = "#C46A69";
        iconSmall = "fa fa-warning bounce animated";
    }
    else {
        color = "#739E73";
        iconSmall = "fa fa-check bounce animated";
    }
    $.smallBox({
        title: Message,
        //content: "<i class='fa fa-clock-o'></i> <i>2 seconds ago...</i>",
        color: color,
        sound : false,
        //timeout: 8000,
        iconSmall: iconSmall,
        timeout: 4000
    });
}

function RemoveMessage() {
    if ($(".SmallBox").length > 0) {
        $(".SmallBox").remove();
    }
}

function GetParentFolderOfApplication()
{
    var Path = location.host;
    var URLPath = window.localStorage.getItem("URLPath");
    //var VirtualDirectory = "";
    //if (Path.indexOf("localhost") >= 0 && Path.indexOf(":") >= 0) {
    //    var pathname = window.location.pathname;
    //    var VirtualDir = pathname.split('/');
    //    for (var itrCnt = 1; itrCnt < VirtualDir.length - 2; itrCnt++) {
    //        if (VirtualDirectory == '')
    //            VirtualDirectory = '/' + VirtualDir[itrCnt];
    //        else
    //            VirtualDirectory = VirtualDirectory + "/" + VirtualDir[itrCnt];
    //    }
    //}
    //else {
    //    var pathname = window.location.pathname;
    //    var VirtualDir = pathname.split('/');
    //    for (var itrCnt = 1; itrCnt < VirtualDir.length - 2; itrCnt++) {
    //        if (VirtualDirectory == '')
    //            VirtualDirectory = '/' + VirtualDir[itrCnt];
    //        else
    //            VirtualDirectory = VirtualDirectory + "/" + VirtualDir[itrCnt];
    //    }
    //}
    return URLPath;
}

function GetRelativeUrl(Url) {
    return GetParentFolderOfApplication() + Url;
}

function AdvIntializeDateRangePicker() {
    this.subtractDays = 0;
    this.IsRangesAvail = true;
    this.singleDatePicker = false;
    this.MinDate = null;
    this.MaxDate = null;
    this.StartDate = null;
    this.EndDate = null;
    this.onChange = null;
    /* 
        pickerMode = 1 its Date Control,
        pickerMode = 2 its Time Control,
        pickerMode = 3 its DateTime Control,
        pickerMode = 4 its Range Control,
        pickerMode = 5 its Range with time control.
    */
    this.pickerMode = null;
    var myInstance = this;
    this.Load = function (ControlId) {
        var pickerStartDate = GetStartDate(myInstance.StartDate, 'MMMM/DD/YYYY');
        var pickerEndDate = GetEndDate(myInstance.EndDate, 'MMMM/DD/YYYY');

        var pickerMinDate = GetMinDate(myInstance.MinDate);
        var pickerMaxDate = GetMaxDate(myInstance.MaxDate);

        var ranges = GetRanges();

        return myInstance.Init(ControlId, pickerStartDate, pickerEndDate, pickerMinDate, pickerMaxDate, ranges);
    }

    this.Init = function (ControlId, pickerStartDate, pickerEndDate, pickerMinDate, pickerMaxDate, ranges) {
        var defaultDate = null;
        if (pickerStartDate != null && pickerEndDate != null && !myInstance.singleDatePicker)
            defaultDate = [pickerStartDate, pickerEndDate];

        var optionSet = {
            minDate: pickerMinDate,
            maxDate: pickerMaxDate,
            defaultDate: defaultDate,
            mode: myInstance.singleDatePicker == undefined || myInstance.singleDatePicker == null || myInstance.singleDatePicker == true ? "single" : "range",
            onChange : myInstance.onChange,
            dateFormat: 'F d, Y'
        };
        if (myInstance.pickerMode == 2) {
            optionSet["enableTime"] = true;
            optionSet["noCalendar"] = true;
        }
        else if (myInstance.pickerMode == 3) {
            optionSet["enableTime"] = true;
            optionSet["noCalendar"] = false;
            optionSet["dateFormat"] = 'F d, Y H:i';
            optionSet["time_24hr"] = true;
            optionSet["defaultHour"] = 0;
        }
        else if (myInstance.pickerMode == 5) {
            optionSet["enableTime"] = true;
            optionSet["noCalendar"] = false;
        }
        return $('#' + ControlId).flatpickr(optionSet);
    }

    var GetMomentDate = function (oDate) {
        var pickerDate = null;
        if (oDate != undefined && oDate != null) {
            try {
                pickerDate = moment(JSON.parseWithDate(JSON.stringify(oDate)));
                if (pickerDate != null)
                    pickerDate = pickerDate._d;
            }
            catch (ex) {
                pickerDate = null;
            }
        }
        else
            pickerDate = null;
        return pickerDate;
    }

    var GetMometFormattedDate = function (oDate, oformat) {
        var pickerDate = null;
        if (oDate != undefined && oDate != null) {
            try {
                pickerDate = moment(JSON.parseWithDate(JSON.stringify(oDate))).format(oformat);
            }
            catch (ex) {
                pickerDate = '01/01/1900';
            }
        }
        else
            pickerDate = '01/01/1900';
        return pickerDate;
    }

    var GetMinDate = function (MinDate) {
        var pickerMinDate = null;
        if (MinDate != undefined && MinDate != null) {
            try {
                if (MinDate.toLowerCase() == "today")
                    pickerMinDate = moment(moment(new Date()).format('DD-MM-YYYY'), 'DD-MM-YYYY');
                else if (MinDate.toLowerCase() == "yesterday")
                    pickerMinDate = moment(new Date()).subtract(1, 'days');
                else
                    pickerMinDate = moment(JSON.parseWithDate(JSON.stringify(MinDate)));
                if (pickerMinDate != null)
                    pickerMinDate = pickerMinDate._d;
            }
            catch (ex) {
                pickerMinDate = null;
            }
        }
        else
            pickerMinDate = null;
        return pickerMinDate;
    }

    var GetMaxDate = function (MaxDate) {
        var pickerMaxDate = null;
        if (MaxDate != undefined && MaxDate != null) {
            try {
                if (MaxDate.toLowerCase() == "today")
                    pickerMaxDate = moment(new Date());
                else if (MaxDate.toLowerCase() == "yesterday")
                    pickerMaxDate = moment(new Date()).subtract(1, 'days');
                else
                    pickerMaxDate = moment(JSON.parseWithDate(JSON.stringify(MaxDate)));
                if (pickerMaxDate != null)
                    pickerMaxDate = pickerMaxDate._d;
            }
            catch (ex) {
                pickerMaxDate = null;
            }
        }
        else
            pickerMaxDate = null;
        return pickerMaxDate;
    }

    var GetStartDate = function (StartDate, oformat) {
        var pickerStartDate = null;
        if (StartDate != undefined && StartDate != null) {
            try {
                if (StartDate.toLowerCase() == "today")
                    pickerStartDate = moment(moment(new Date()).format('DD-MM-YYYY'), 'DD-MM-YYYY').format(oformat);
                else if (StartDate.toLowerCase() == "yesterday")
                    pickerStartDate = moment(new Date()).subtract(1, 'days').format(oformat);
                else
                    pickerStartDate = moment(JSON.parseWithDate(JSON.stringify(StartDate))).format(oformat);
            }
            catch (ex) {
                pickerStartDate = moment().subtract(myInstance.subtractDays, 'days').format(oformat);
            }
        }
        else
            pickerStartDate = moment().subtract(myInstance.subtractDays, 'days').format(oformat);
        return pickerStartDate;
    }

    var GetEndDate = function (EndDate, oformat) {
        var pickerEndDate = null;
        if (EndDate != undefined && EndDate != null) {
            try {
                if (EndDate.toLowerCase() == "today")
                    pickerEndDate = moment(moment(new Date()).format('DD-MM-YYYY'), 'DD-MM-YYYY').format(oformat);
                else if (EndDate.toLowerCase() == "yesterday")
                    pickerEndDate = moment(new Date()).subtract(1, 'days').format(oformat);
                else
                    pickerEndDate = moment(JSON.parseWithDate(JSON.stringify(EndDate))).format(oformat);
            }
            catch (ex) {
                pickerEndDate = moment().format(oformat);
            }
        }
        else
            pickerEndDate = moment().format(oformat);
        return pickerEndDate;
    }

    var GetRanges = function () {
        var ranges = {};
        if (myInstance.IsRangesAvail || myInstance.IsRangesAvail == undefined) {
            ranges = {
                'Today': [moment(), moment()],
                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
            };
        }
        else
            ranges = {};
        return ranges;
    }
}

function AdvIntializeDateRangePicker_Old() {
    this.subtractDays = 0;
    this.IsRangesAvail = true;
    this.singleDatePicker = false;
    this.MinDate = null;
    this.MaxDate = null;
    this.StartDate = null;
    this.EndDate = null;
    var myInstance = this;
    this.Load = function (ControlId) {
        var pickerStartDate = GetMometFormattedDate(myInstance.StartDate);
        var pickerEndDate = GetMometFormattedDate(myInstance.EndDate);

        var pickerMinDate = GetMometFormattedDate(myInstance.MinDate);
        var pickerMaxDate = GetMometFormattedDate(myInstance.MaxDate);

        var ranges = GetRanges();

        myInstance.Init(ControlId, pickerStartDate, pickerEndDate, pickerMinDate, pickerMaxDate, ranges);
    }

    this.Init = function (ControlId, pickerStartDate, pickerEndDate, pickerMinDate, pickerMaxDate, ranges) {
        var cb = function (start, end, label) {
            $('#' + ControlId).removeClass("invalid");
            console.log(start.toISOString(), end.toISOString(), label);
            $('#' + ControlId + ' span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
            //alert("Callback has fired: [" + start.format('MMMM D, YYYY') + " to " + end.format('MMMM D, YYYY') + ", label = " + label + "]");
        }

        var optionSet = {
            startDate: pickerStartDate,
            endDate: pickerEndDate,
            minDate: pickerMinDate,
            maxDate: pickerMaxDate,
            //dateLimit: { days: 60 },
            showDropdowns: true,
            showWeekNumbers: true,
            timePicker: false,
            timePickerIncrement: 1,
            timePicker12Hour: true,
            singleDatePicker: myInstance.singleDatePicker == undefined || myInstance.singleDatePicker == null ? false : myInstance.singleDatePicker,
            ranges: ranges,
            opens: 'right',
            buttonClasses: ['btn btn-default'],
            applyClass: 'btn-small btn-primary',
            cancelClass: 'btn-small',
            format: 'MM/DD/YYYY',
            separator: ' to ',
            locale: {
                applyLabel: 'Submit',
                cancelLabel: 'Clear',
                fromLabel: 'From',
                toLabel: 'To',
                customRangeLabel: 'Custom',
                daysOfWeek: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
                monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
            }
        };
        $('#' + ControlId).daterangepicker(optionSet, cb);

        if (myInstance.singleDatePicker) {
            //var dateRangePicker = $('#' + ControlId).data().daterangepicker;
            //dateRangePicker.startDate = null;
            //dateRangePicker.endDate = null;
            //dateRangePicker.updateView();
            //dateRangePicker.updateCalendars();
            //dateRangePicker.hide();
            $('#' + ControlId + ' span').html(pickerStartDate.format('MMMM D, YYYY') + ' - ' + pickerEndDate.format('MMMM D, YYYY'));

            $('#' + ControlId).on('cancel.daterangepicker', function (ev, picker) {
                picker.startDate = null;
                picker.endDate = null;
                picker.updateView();
                picker.updateCalendars();
                picker.hide();
                $('#' + ControlId).find('span').html('');
            });
        }
        else {
            $('#' + ControlId + ' span').html(pickerStartDate.format('MMMM D, YYYY') + ' - ' + pickerEndDate.format('MMMM D, YYYY'));
            $('#' + ControlId).on('cancel.daterangepicker', function (ev, picker) { console.log("cancel event fired"); });
        }

        $('#' + ControlId).on('show.daterangepicker', function () { console.log("show event fired"); });
        $('#' + ControlId).on('hide.daterangepicker', function () { console.log("hide event fired"); });
        $('#' + ControlId).find('.ranges').on('click.daterangepicker', function () {
            console.log("click event fired");
        });
    }

    var GetMometFormattedDate = function (oDate) {
        var pickerDate = null;
        if (oDate != undefined && oDate != null) {
            try {
                pickerDate = moment(JSON.parseWithDate(JSON.stringify(oDate))).format('MM/D/YYYY');
            }
            catch (ex) {
                pickerDate = '01/01/1900';
            }
        }
        else
            pickerDate = '01/01/1900';
        return pickerDate;
    }

    var GetRanges = function () {
        var ranges = {};
        if (myInstance.IsRangesAvail || myInstance.IsRangesAvail == undefined) {
            ranges = {
                'Today': [moment(), moment()],
                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
            };
        }
        else
            ranges = {};
        return ranges;
    }
}

//--Date Range Picker Initialize function.
function IntializeDateRangePicker(ControlId, subtractDays, IsRangesAvail, singleDatePicker, MinDate, MaxDate) {
    //-- Date Picker Range Control --Start

    var pickerStartDate = moment().subtract(subtractDays, 'days');
    var pickerEndDate = moment();

    var pickerMinDate = null;
    var pickerMaxDate = null;
    if (MinDate != undefined && MinDate != null) {
        try {
            pickerMinDate = moment(JSON.parseWithDate(JSON.stringify(MinDate))).format('MM/D/YYYY');
        }
        catch (ex) {
            pickerMinDate = '01/01/1900';
        }
    }
    else
        pickerMinDate = '01/01/1900';

    if (MaxDate != undefined && MaxDate != null) {
        try {
            pickerMaxDate = moment(JSON.parseWithDate(JSON.stringify(MaxDate))).format('MM/D/YYYY');
        }
        catch (ex) {
            pickerMaxDate = '12/31/2020';
        }
    }
    else
        pickerMaxDate = '12/31/2020';

    if (IsRangesAvail || IsRangesAvail == undefined) {
        ranges = {
            'Today': [moment(), moment()],
            'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
            'Last 7 Days': [moment().subtract(6, 'days'), moment()],
            'Last 30 Days': [moment().subtract(29, 'days'), moment()],
            'This Month': [moment().startOf('month'), moment().endOf('month')],
            'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
        };
    }
    else
        ranges = {};

    var cb = function (start, end, label) {
        $('#' + ControlId).removeClass("invalid");
        console.log(start.toISOString(), end.toISOString(), label);
        $('#' + ControlId + ' span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
        //alert("Callback has fired: [" + start.format('MMMM D, YYYY') + " to " + end.format('MMMM D, YYYY') + ", label = " + label + "]");
    }

    var optionSet = {
        startDate: pickerStartDate,
        endDate: pickerEndDate,
        minDate: pickerMinDate,
        maxDate: pickerMaxDate,
        //dateLimit: { days: 60 },
        showDropdowns: true,
        showWeekNumbers: true,
        timePicker: false,
        timePickerIncrement: 1,
        timePicker12Hour: true,
        singleDatePicker: singleDatePicker == undefined || singleDatePicker == null ? false : singleDatePicker,
        ranges: ranges,
        opens: 'right',
        buttonClasses: ['btn btn-default'],
        applyClass: 'btn-small btn-primary',
        cancelClass: 'btn-small',
        format: 'MM/DD/YYYY',
        separator: ' to ',
        locale: {
            applyLabel: 'Submit',
            cancelLabel: 'Clear',
            fromLabel: 'From',
            toLabel: 'To',
            customRangeLabel: 'Custom',
            daysOfWeek: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
            monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
        }
    };
    $('#' + ControlId).daterangepicker(optionSet, cb);

    if (singleDatePicker) {
        //var dateRangePicker = $('#' + ControlId).data().daterangepicker;
        //dateRangePicker.startDate = null;
        //dateRangePicker.endDate = null;
        //dateRangePicker.updateView();
        //dateRangePicker.updateCalendars();
        //dateRangePicker.hide();
        $('#' + ControlId + ' span').html(pickerStartDate.format('MMMM D, YYYY') + ' - ' + pickerEndDate.format('MMMM D, YYYY'));

        $('#' + ControlId).on('cancel.daterangepicker', function (ev, picker) {
            picker.startDate = null;
            picker.endDate = null;
            picker.updateView();
            picker.updateCalendars();
            picker.hide();
            $('#' + ControlId).find('span').html('');
        });
    }
    else {
        $('#' + ControlId + ' span').html(pickerStartDate.format('MMMM D, YYYY') + ' - ' + pickerEndDate.format('MMMM D, YYYY'));
        $('#' + ControlId).on('cancel.daterangepicker', function (ev, picker) { console.log("cancel event fired"); });
    }

    $('#' + ControlId).on('show.daterangepicker', function () { console.log("show event fired"); });
    $('#' + ControlId).on('hide.daterangepicker', function () { console.log("hide event fired"); });
    $('#' + ControlId).find('.ranges').on('click.daterangepicker', function () {
        console.log("click event fired");
    });

    //-- Date Picker Range Control --End
}

function InitalizeDateRangeControl(id, subtractDays, IsRangesAvail, singleDatePicker) {
    IntializeDateRangePicker(id, subtractDays, IsRangesAvail, singleDatePicker);
    //$('#' + id).on('apply.daterangepicker', function (ev, picker) {
    //    console.log("apply event fired, start/end dates are "
    //      + picker.startDate.format('MMMM D, YYYY')
    //      + " to "
    //      + picker.endDate.format('MMMM D, YYYY')
    //    );
    //});
}

//--Create Pie Chart function.
function CreatePieChart(placeHolder, Url, FilterControlId, labelText) {
    /* chart colors default */
    var $chrt_border_color = "#DDD";
    var $chrt_grid_color = "#DDD"
    var $chrt_main = "#E24913";
    /* red       */
    var $chrt_second = "#6595b4";
    /* blue      */
    var $chrt_third = "#FF9F01";
    /* orange    */
    var $chrt_fourth = "#7e9d3a";
    /* green     */
    var $chrt_fifth = "#BD362F";
    /* dark red  */
    var $chrt_mono = "#000";

    if (placeHolder.length) {
        var param = {};
        var result;
        var daterange;
        if (document.getElementById(FilterControlId[0]) != undefined)
            daterange = document.getElementById(FilterControlId[0]).getElementsByTagName("span")[0].innerHTML;

        var one_day = 1000 * 60 * 60 * 24;
        var fromdate = new Date();
        var todate = new Date();

        if (document.getElementById(FilterControlId[0]) != undefined) {
            fromdate = $("#" + FilterControlId[0]).data().daterangepicker.startDate._d;
            todate = $("#" + FilterControlId[0]).data().daterangepicker.endDate._d;
        }

        var datediff = Math.round((todate.getTime() - fromdate.getTime()) / one_day);

        param["xAxis"] = 1;
        param["yAxis"] = 1;
        param["FromDate"] = daterange;
        param["Template"] = document.getElementById(FilterControlId[1]).value;
        param["Place"] = document.getElementById(FilterControlId[2]).value;

        param = JSON.stringify(param);

        param = { request: param };

        var result = $.ajax({
            url: Url,
            contentType: 'application/json; charset=utf-8',
            type: 'POST',
            dataType: 'json',
            data: JSON.stringify(param),
            async: true,
            success: function (response) {
                result = response;

                var data1 = [];
                var data2 = [];
                if (result != undefined) {
                    var xAxisLabels = [];
                    var colors = { color1: "#005CDE", color2: "#00A36A", color3: "#7D0096", color4: "#992B00", color5: "#DE000F", color6: "#BD362F", color7: "#7e9d3a", color8: "#FF9F01", color9: "#6595b4", color10: "#E24913" }

                    if (result.length > 0) {
                        for (var i = 0; i < result.length; i++) {
                            data1.push({
                                label: result[i].xAxisValue, data: result[i].yAxisValue, color: colors["color" + (i + 1)]
                            });
                        }
                    }
                    else {
                        data1.push({
                            label: "No records available",
                            data: 1,
                            color: colors["color1"]
                        });
                    }

                    var ds = new Array();

                    if (data1.length == 0 && data2.length == 0) {
                        var _extentdata = [
                            { label: 'No records available', start: 0, end: 1 }];
                        var _extents = true;
                    }
                    else {
                        var _extentdata = [];
                        var _extents = false;
                    }

                    ds.push({
                        extents: { show: _extents },
                        extentdata: _extentdata,
                        data: data1
                    });

                    //Display graph
                    var BarChart = $.plot(placeHolder, data1, {
                        series: {
                            pie: {
                                show: true,
                                label: {
                                    show: true,
                                    radius: 0.8,
                                    formatter: function (label, series) {
                                        return '<div style="border:1px solid grey;font-size:8pt;text-align:center;padding:5px;color:white;">' +
                                        label + ' : ' +
                                        Math.round(series.percent) +
                                        '%</div>';
                                    },
                                    background: {
                                        opacity: 0.8,
                                        color: '#000'
                                    }
                                }
                            }
                        },
                        colors: [$chrt_fourth, $chrt_main, "#666", "#BBB"]
                    });
                }
                $('#overlay_Widget1').remove();
            },
            error: function (response) {
                ShowMessage("AjaxError.", 4);
                $('#overlay_Widget1').remove();
            }
        });
    }
}

//-- Plot Different kind of chart using this framework.
function OneViewPlotChartComponent() {
    this.ChartType = "";
    this.IsSingleSeries = true;
    this.SingleSeriesConfig = { xAxisValueKey: "", yAxisValueKey: "", Colors: [], xAxisLabelText: "", yAxisLabelText: "" };
    this.MultiSeriesConfig = { IsXAxisMultiSeries: false, SeriesCount: 0, SeriesType: [], xAxisValueKey: [], xAxisLegents: [], yAxisValueKey: [], yAxisLegents: [], Colors: [], xAxisLabelText: "", yAxisLabelText: "" };
    this.Url = "";
    this.args = null;
    this.FilterControlId = [];
    this.BaseFilterParam = [];
    this.datediff = 0;
    this.LodingDivId = "";
    var $chrt_border_color = "#DDD";
    var $chrt_grid_color = "#DDD"
    var $chrt_main = "#E24913";
    /* red       */
    var $chrt_second = "#6595b4";
    /* blue      */
    var $chrt_third = "#FF9F01";
    /* orange    */
    var $chrt_fourth = "#7e9d3a";
    /* green     */
    var $chrt_fifth = "#BD362F";
    /* dark red  */
    var $chrt_mono = "#000";
    this.xAxisLabels = [];
    this.async = true;
    this.IsDetailViewEnabled = false;
    this.DetailViewConfig = null;
    var myInstance = this;
    this.PlotChart = function (placeHolder) {
        if (myInstance.ChartType.toLowerCase() == "bar-datewise") {
            CreateBarLineDateWiseChart(placeHolder);
        }
        else if (myInstance.ChartType.toLowerCase() == "bar-stringwise") {
            CreateBarLineChartXAxisText(placeHolder);
        }
        else if (myInstance.ChartType.toLowerCase() == "line-datewise") {
            CreateBarLineDateWiseChart(placeHolder);
        }
        else if (myInstance.ChartType.toLowerCase() == "line-stringwise") {
            CreateBarLineChartXAxisText(placeHolder);
        }
        else if (myInstance.ChartType.toLowerCase() == "pie") {
            CreatePieChart(placeHolder);
        }
        else if (myInstance.ChartType.toLowerCase() == "pie-multi")
        {
            CreatePieMultiChart(placeHolder);
        }
        else if (myInstance.ChartType.toLowerCase() == "pie-gauge") {
            CreateGaugePieChart(placeHolder);
        }
        else if (myInstance.ChartType.toLowerCase() == "morris-bar") {
            CreateMorrisBarChart(placeHolder)
        }
        else {
            ShowMessage("Given Chart Type not available in our framework!", 4);
        }
    }

    //--Create Bar and Line Date wise Chart function.
    var CreateBarLineDateWiseChart = function (placeHolder) {
        myInstance.args = {
            success: function (sender, response) {
                if (response == "Session Failure") {
                    window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
                    result = [];
                    return false;
                }
                else {
                    result = response;
                    if (result != undefined && placeHolder.length > 0) {
                        var ds = new Array();

                        ds = GetDataSetForCharts(ds, result);

                        var ymax = GetMaxValueOfYAxis(ds);

                        var request = {};
                        request["ds"] = ds;

                        var Options = FormOptions(request);

                        //Display graph
                        var LineChart = $.plot(placeHolder, ds, {
                            colors: ["#287bab", $chrt_main, "#c79121", "#BBB"],
                            grid: {
                                hoverable: true,
                                clickable: true,
                                tickColor: $chrt_border_color
                            },
                            resultLengh: (result != null && result != undefined ? result.length : 0),
                            tooltip: true,
                            tooltipOpts: Options["tooltipOpts"],
                            xaxis: Options["xaxis"],
                            yaxis: {
                                min: 0,
                                max: ymax[0],
                                panRange: [0, (ymax[1] < ymax[0] ? ymax[0] : ymax[1])],
                                tickDecimals: 0,
                                axisLabel: myInstance.MultiSeriesConfig.yAxisLabelText,
                                axisLabelUseCanvas: true,
                                axisLabelFontSizePixels: 11,
                                axisLabelFontFamily: 'sans-serif',
                                axisLabelPadding: 10
                            },
                            //legend: true,
                            pan: {
                                interactive: true
                            }
                        });

                        // and add panning buttons

                        // little helper for taking the repetitive work out of placing
                        // panning arrows

                        function addArrow(dir, right, top, offset) {
                            if (result.length != 0) {
                                $("<img class='button' src='" + GetRelativeUrl("/img/arrow-") + dir + ".gif' style='right:" + right + "px;top:" + top + "px'>")
                                    .appendTo(placeHolder)
                                    .click(function (e) {
                                        e.preventDefault();
                                        LineChart.pan(offset);
                                    });
                            }
                            else {
                                $("<img class='button' src='" + GetRelativeUrl("/img/arrow-") + dir + ".gif' style='right:" + right + "px;top:" + top + "px'>")
                                       .appendTo(placeHolder);
                            }
                        }

                        addArrow("left", 55, 60, { left: -100 });
                        addArrow("right", 25, 60, { left: 100 });
                        addArrow("up", 40, 45, { top: -100 });
                        addArrow("down", 40, 75, { top: 100 });
                    }
                    removeLoadingPan(myInstance.LodingDivId);
                }
            },
            error: function (sender, Request, textStatus, errorThrown) {
                ShowMessage(errorThrown, 4);
                if (placeHolder.length > 0)
                    removeLoadingPan(myInstance.LodingDivId);
            },
            sender: this
        }
        aSyncAjaxCall(myInstance.Url);
    }

    //--Create Bar Chart x axis string Initialize function.
    var CreateBarLineChartXAxisText = function (placeHolder) {
        myInstance.args = {
            success: function (sender, response) {
                if (response == "Session Failure") {
                    window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
                    result = [];
                    return false;
                }
                else {
                    result = response;
                    if (result != undefined && placeHolder.length > 0) {
                        var ds = new Array();

                        /* TODO(Devaraj S on 21-02-2018_1525), if yAxisValueKey null then we are taking all the keys from result and making chart. */
                        if (myInstance.MultiSeriesConfig.yAxisValueKey == null || myInstance.MultiSeriesConfig.yAxisValueKey == undefined || myInstance.MultiSeriesConfig.yAxisValueKey.length == 0) {
                            var oyAxisValueKey = [];
                            var CurrentDisplayFormatConfig = myInstance.CurrentDisplayFormatConfig;
                            var colorInfoDct = null;
                            if (CurrentDisplayFormatConfig != undefined && CurrentDisplayFormatConfig != null) {
                                colorInfoDct = CurrentDisplayFormatConfig.ColorInfoDct;
                            }
                            for (var itr = 0; itr < result.length; itr++) {
                                var yAxisValueDct = result[itr].yAxisValue;
                                if (yAxisValueDct != null && yAxisValueDct != undefined && Object.keys(yAxisValueDct).length > 0) {
                                    var yAxisValueKey = Object.keys(yAxisValueDct);
                                    for (var jtr = 0; jtr < yAxisValueKey.length; jtr++) {
                                        if (oyAxisValueKey.indexOf(yAxisValueKey[jtr]) == -1) {
                                            oyAxisValueKey.push(yAxisValueKey[jtr]);
                                            myInstance.MultiSeriesConfig.yAxisLegents.push(yAxisValueKey[jtr]);
                                            if (colorInfoDct != null && colorInfoDct != undefined && colorInfoDct[yAxisValueKey[jtr]] != null && colorInfoDct[yAxisValueKey[jtr]] != undefined) {
                                                var colorInfo = null;
                                                for (var _colorinfo in colorInfoDct) {
                                                    if (_colorinfo.toLowerCase() == yAxisValueKey[jtr].toLowerCase()) {
                                                        colorInfo = colorInfoDct[_colorinfo];
                                                        break;
                                                    }
                                                }
                                                if (colorInfo != null) {
                                                    var ColorCss = colorInfo.ColorCSS;
                                                    myInstance.MultiSeriesConfig.Colors.push(ColorCss != undefined && ColorCss != null && ColorCss != '' ? ColorCss : colorInfo.ColorCode);
                                                }
                                            }
                                            if (myInstance.ChartType.toLowerCase() == "line-stringwise")
                                                myInstance.MultiSeriesConfig.SeriesType.push('line');
                                            else if (myInstance.ChartType.toLowerCase() == "bar-stringwise")
                                                myInstance.MultiSeriesConfig.SeriesType.push('bar');
                                        }
                                    }
                                }
                            }
                            if (oyAxisValueKey.length == 0) {
                                myInstance.MultiSeriesConfig.SeriesCount = 1;
                                if (myInstance.ChartType.toLowerCase() == "line-stringwise")
                                    myInstance.MultiSeriesConfig.SeriesType.push('line');
                                else if (myInstance.ChartType.toLowerCase() == "bar-stringwise")
                                    myInstance.MultiSeriesConfig.SeriesType.push('bar');
                            }
                            else
                                myInstance.MultiSeriesConfig.SeriesCount = oyAxisValueKey.length;
                            myInstance.MultiSeriesConfig.yAxisValueKey = oyAxisValueKey;
                        }

                        ds = GetDataSetForCharts(ds, result);

                        if (myInstance.MultiSeriesConfig.SeriesCount == 1 && result.length == 0) {
                            ds = GetDataSetForCharts(ds, result);
                            ds[ds.length - 1].extents = false;
                            ds[ds.length - 1].lines = {};
                            ds[ds.length - 1].points = {};
                            ds[ds.length - 1].label = "";
                        }

                        var ymax = GetMaxValueOfYAxis(ds);

                        function xAxisLabelGenerator(x) {
                            return (myInstance.xAxisLabels[x] == undefined ? "" : myInstance.xAxisLabels[x]);
                        }

                        var datestr = 0;
                        var defaultVisibleCount = 0;
                        if (myInstance.WidgetUtilitiesConfig != undefined && myInstance.WidgetUtilitiesConfig != null)
                            defaultVisibleCount = myInstance.WidgetUtilitiesConfig.DefaultViewDataCount;
                        var maximizeVisibleCount = window.localStorage.getItem('MaximizeViewDataCount');
                        var IsMaximizeView = window.localStorage.getItem('IsMaximizeView');
                        if (IsMaximizeView == "true") {
                            if (maximizeVisibleCount == undefined || maximizeVisibleCount == null || maximizeVisibleCount <= 0)
                                maximizeVisibleCount = 7;
                            if (myInstance.xAxisLabels.length > 0) {
                                if (myInstance.xAxisLabels.length <= maximizeVisibleCount && myInstance.xAxisLabels.length >= 1)
                                    datestr = myInstance.xAxisLabels.length;
                                if (myInstance.xAxisLabels.length > maximizeVisibleCount)
                                    datestr = maximizeVisibleCount;
                            }
                        }
                        else {
                            if (defaultVisibleCount == undefined || defaultVisibleCount == null || defaultVisibleCount <= 0)
                                defaultVisibleCount = 7;
                            if (myInstance.xAxisLabels.length > 0) {
                                if (myInstance.xAxisLabels.length <= defaultVisibleCount && myInstance.xAxisLabels.length >= 1)
                                    datestr = myInstance.xAxisLabels.length;
                                if (myInstance.xAxisLabels.length > defaultVisibleCount)
                                    datestr = defaultVisibleCount;
                            }
                        }
                        //if (myInstance.xAxisLabels.length > 0) {
                        //    if (myInstance.xAxisLabels.length <= 7 && myInstance.xAxisLabels.length >= 1)
                        //        datestr = myInstance.xAxisLabels.length;
                        //    if (myInstance.xAxisLabels.length > 7)
                        //        datestr = 7;
                        //}

                        var colors = [];
                        if (myInstance.IsSingleSeries)
                            colors = myInstance.SingleSeriesConfig["Colors"];
                        else
                            colors = myInstance.MultiSeriesConfig["Colors"];
                        if (colors == undefined || colors == null || colors.length == 0)
                            colors = ["#287bab", $chrt_main, "#c79121", "#BBB"];

                        try {
                            //Display graph
                            var BarChart = $.plot(placeHolder, ds, {
                                //series: {
                                //    bars: {
                                //        show: true,
                                //        barWidth: barWidth,
                                //        align: "left"
                                //    },
                                //    shadowSize: 0
                                //},
                                colors: colors,
                                grid: {
                                    show: true,
                                    hoverable: true,
                                    clickable: true,
                                    tickColor: $chrt_border_color
                                },
                                resultLengh: (result != null && result != undefined ? result.length : 0),
                                legend: {
                                    show: true,
                                    noColumns: 0, // number of colums in legend table
                                    labelFormatter: function (label, series) {
                                        return '<div style="font-size:13px;text-align:left;color:black;">' + label + '</div>';
                                    }
                                },
                                xaxis: {
                                    min: ds[0].data.length == 0 ? 0 : (parseInt(ds[0].data[0][0])),
                                    max: ds[0].data.length == 0 ? 0 : (datestr == 0 ? (parseInt(ds[0].data[ds[0].data.length - 1][0])) : datestr),
                                    tickFormatter: xAxisLabelGenerator,
                                    panRange: [0, ds[0].data.length == 0 ? 0 : (ds[0].data[ds[0].data.length - 1][0] + 1)],
                                    tickDecimals: 0,
                                    tickLength: 0,
                                    axisLabel: myInstance.MultiSeriesConfig.xAxisLabelText,
                                    axisLabelUseCanvas: true,
                                    axisLabelFontSizePixels: 11,
                                    axisLabelFontFamily: 'sans-serif',
                                    axisLabelPadding: 15
                                },
                                yaxis: {
                                    min: 0,
                                    max: ymax[0],
                                    panRange: [0, (ymax[1] < ymax[0] ? ymax[0] : ymax[1])],
                                    tickDecimals: 0,
                                    axisLabel: myInstance.MultiSeriesConfig.yAxisLabelText,
                                    axisLabelUseCanvas: true,
                                    axisLabelFontSizePixels: 11,
                                    axisLabelFontFamily: 'sans-serif',
                                    axisLabelPadding: 10
                                },
                                pan: {
                                    interactive: true
                                },
                                //legend: true,
                                tooltip: true,
                                tooltipOpts: {
                                    content: "<span>%s - %y</span>",
                                    //dateFormat: "%0d/%m/%y",
                                    defaultTheme: false
                                }
                            });

                            // and add panning buttons

                            // little helper for taking the repetitive work out of placing
                            // panning arrows

                            function addArrow(dir, right, top, offset) {
                                if (result.length != 0) {
                                    $("<img class='button' src='" + GetRelativeUrl("/img/arrow-") + dir + ".gif' style='right:" + right + "px;top:" + top + "px'>")
                                        .appendTo(placeHolder)
                                        .click(function (e) {
                                            e.preventDefault();
                                            BarChart.pan(offset);
                                        });
                                }
                                else {
                                    $("<img class='button' src='" + GetRelativeUrl("/img/arrow-") + dir + ".gif' style='right:" + right + "px;top:" + top + "px'>")
                                           .appendTo(placeHolder);
                                }
                            }

                            addArrow("left", 55, 60, { left: -100 });
                            addArrow("right", 25, 60, { left: 100 });
                            addArrow("up", 40, 45, { top: -100 });
                            addArrow("down", 40, 75, { top: 100 });

                            if (myInstance.CurrentDisplayFormatConfig != undefined && myInstance.CurrentDisplayFormatConfig != null &&
                                myInstance.CurrentDisplayFormatConfig.IsDetailViewEnabled != undefined && myInstance.CurrentDisplayFormatConfig.IsDetailViewEnabled != null &&
                                myInstance.CurrentDisplayFormatConfig.IsDetailViewEnabled) {
                                if (myInstance.CurrentDisplayFormatConfig.DetailViewConfig != undefined && myInstance.CurrentDisplayFormatConfig.DetailViewConfig != null) {
                                    var _GetDetailViewForWidget = new GetDetailViewForWidget();
                                    _GetDetailViewForWidget.ParentControlId = myInstance.LodingDivId;
                                    _GetDetailViewForWidget.DetailViewConfig = myInstance.CurrentDisplayFormatConfig.DetailViewConfig;
                                    _GetDetailViewForWidget.Load(result);
                                }
                            }
                        }
                        catch (ex) {
                            console.log(ex);
                        }
                    }
                    removeLoadingPan(myInstance.LodingDivId);
                }
            },
            error: function (sender, Request, textStatus, errorThrown) {
                ShowMessage(errorThrown, 4);
                if (placeHolder.length > 0)
                    removeLoadingPan(myInstance.LodingDivId);
            },
            sender: this
        }
        aSyncAjaxCall(myInstance.Url);
    }

    //--Create Pie Chart function.
    var CreatePieChart = function (placeHolder) {
        myInstance.args = {
            success: function (sender, response) {
                if (response == "Session Failure") {
                    window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
                    result = [];
                    return false;
                }
                else {
                    result = response;
                    if (result != undefined && result != null && result.length > 0 && placeHolder.length > 0) {
                        var ds = new Array();

                        ds = GetDataSetForCharts(ds, result);

                        if (myInstance.MultiSeriesConfig.SeriesCount == 1 && result.length == 0) {
                            ds = GetDataSetForCharts(ds, result);
                            ds[ds.length - 1].extents = false;
                            ds[ds.length - 1].lines = {};
                            ds[ds.length - 1].points = {};
                            ds[ds.length - 1].label = "";
                        }

                        $.plot(placeHolder, ds, {
                            series: {
                                pie: {
                                    show: true,
                                    label: {
                                        show: false,
                                        radius: 2 / 3,
                                        formatter: function (label, series) {
                                            return '<div style="font-size:11px;text-align:center;padding:4px;color:black;">' + label + '<br/>' + Math.round(series.percent) + '%</div>';
                                        },
                                        threshold: 0.1
                                    }
                                }
                            },
                            legend: {
                                show: true,
                                noColumns: 1, // number of colums in legend table
                                labelFormatter: null, // fn: string -> string
                                labelBoxBorderColor: "#000", // border color for the little label boxes
                                container: null, // container (as jQuery object) to put legend in, null means default on top of graph
                                position: "ne", // position of default legend container within plot
                                margin: [5, 10], // distance from grid edge to default legend container within plot
                                backgroundColor: "#efefef", // null means auto-detect
                                backgroundOpacity: 1 // set to 0 to avoid background
                            },
                            grid: {
                                show: true,
                                hoverable: true,
                                clickable: true,
                                tickColor: $chrt_border_color
                            }
                        });
                        //}
                    }
                    else {
                        placeHolder.html('<div class="norecordsfound">No records available</div>');
                    }
                    removeLoadingPan(myInstance.LodingDivId);
                }
            },
            error: function (sender, Request, textStatus, errorThrown) {
                ShowMessage(errorThrown, 4);
                if (placeHolder.length > 0)
                    removeLoadingPan(myInstance.LodingDivId);
            },
            sender: this
        }
        aSyncAjaxCall(myInstance.Url);
    }

    //--Create Pie Chart function.
    var CreatePieMultiChart = function (placeHolder) {
        myInstance.args = {
            success: function (sender, response) {
                if (response == "Session Failure") {
                    window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
                    result = [];
                    return false;
                }
                else {
                    result = response;
                    if (result != undefined && result != null && result.length > 0 && placeHolder.length > 0) {
                        //for (var itr = 0; itr < result.length; itr++) {
                        //var resultObj = [];
                        //resultObj.push(result[itr]);
                        var ds = new Array();

                        ds = GetDataSetForCharts(ds, result);

                        if (myInstance.MultiSeriesConfig.SeriesCount == 1 && result.length == 0) {
                            ds = GetDataSetForCharts(ds, result);
                            ds[ds.length - 1].extents = false;
                            ds[ds.length - 1].lines = {};
                            ds[ds.length - 1].points = {};
                            ds[ds.length - 1].label = "";
                        }

                        var ymax = GetMaxValueOfYAxis(ds);

                        function xAxisLabelGenerator(x) {
                            return (myInstance.xAxisLabels[x] == undefined ? "" : myInstance.xAxisLabels[x]);
                        }

                        var datestr = 0;

                        if (myInstance.xAxisLabels.length > 0) {
                            if (myInstance.xAxisLabels.length <= 7 && myInstance.xAxisLabels.length >= 1)
                                datestr = myInstance.xAxisLabels.length;
                            if (myInstance.xAxisLabels.length > 7)
                                datestr = 7;
                        }

                        //Display graph
                        //var BarChart = $.plot(placeHolder, ds, {
                        //    colors: ["#287bab", $chrt_main, "#c79121", "#BBB"],
                        //    grid: {
                        //        show: true,
                        //        hoverable: true,
                        //        clickable: true,
                        //        tickColor: $chrt_border_color
                        //    }
                        //});

                        //$.plot(placeHolder, ds, {
                        //    legend: {
                        //        show: true,
                        //        noColumns: 1, // number of colums in legend table
                        //        labelFormatter: null, // fn: string -> string
                        //        labelBoxBorderColor: "#000", // border color for the little label boxes
                        //        container: null, // container (as jQuery object) to put legend in, null means default on top of graph
                        //        position: "ne", // position of default legend container within plot
                        //        margin: [5, 10], // distance from grid edge to default legend container within plot
                        //        backgroundColor: "#efefef", // null means auto-detect
                        //        backgroundOpacity: 1 // set to 0 to avoid background
                        //    },
                        //    grid: {
                        //        show: true,
                        //        hoverable: true,
                        //        clickable: true,
                        //        tickColor: $chrt_border_color
                        //    }
                        //});

                        $.plot(placeHolder, ds, {
                            series: {
                                pie: {
                                    show: true,
                                    innerRadius: 0.5,
                                    radius: 1,
                                    label: {
                                        show: false,
                                        radius: 2 / 3,
                                        formatter: function (label, series) {
                                            return '<div style="font-size:11px;text-align:center;padding:4px;color:white;">' + label + '<br/>' + Math.round(series.percent) + '%</div>';
                                        },
                                        threshold: 0.1
                                    }
                                }
                            },
                            legend: {
                                show: true,
                                noColumns: 1, // number of colums in legend table
                                labelFormatter: null, // fn: string -> string
                                labelBoxBorderColor: "#000", // border color for the little label boxes
                                container: null, // container (as jQuery object) to put legend in, null means default on top of graph
                                position: "ne", // position of default legend container within plot
                                margin: [5, 10], // distance from grid edge to default legend container within plot
                                backgroundColor: "#efefef", // null means auto-detect
                                backgroundOpacity: 1 // set to 0 to avoid background
                            },
                            tooltip: {
                                show: true,
                                content: "%p.0%, %s, n=%n", // show percentages, rounding to 2 decimal places
                                shifts: {
                                    x: 20,
                                    y: 0
                                },
                                defaultTheme: false
                            },
                            grid: {
                                hoverable: true,
                                clickable: true
                            },
                        });
                        //}
                    }
                    else {
                        placeHolder.html('<div class="norecordsfound">No records available</div>');
                    }
                    removeLoadingPan(myInstance.LodingDivId);
                }
            },
            error: function (sender, Request, textStatus, errorThrown) {
                ShowMessage(errorThrown, 4);
                if (placeHolder.length > 0)
                    removeLoadingPan(myInstance.LodingDivId);
            },
            sender: this
        }
        aSyncAjaxCall(myInstance.Url);
    }

    var CreateGaugePieChart = function (placeHolder) {
        myInstance.args = {
            success: function (sender, response) {
                if (response == "Session Failure") {
                    window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
                    result = [];
                    return false;
                }
                else {
                    result = response;
                    if (result != undefined && result != null && result.length > 0 && placeHolder.length > 0) {
                        //for (var itr = 0; itr < result.length; itr++) {
                            //var resultObj = [];
                            //resultObj.push(result[itr]);
                            var ds = new Array();

                            ds = GetDataSetForCharts(ds, result);

                            if (myInstance.MultiSeriesConfig.SeriesCount == 1 && result.length == 0) {
                                ds = GetDataSetForCharts(ds, result);
                                ds[ds.length - 1].extents = false;
                                ds[ds.length - 1].lines = {};
                                ds[ds.length - 1].points = {};
                                ds[ds.length - 1].label = "";
                            }

                            var ymax = GetMaxValueOfYAxis(ds);

                            function xAxisLabelGenerator(x) {
                                return (myInstance.xAxisLabels[x] == undefined ? "" : myInstance.xAxisLabels[x]);
                            }

                            var datestr = 0;

                            if (myInstance.xAxisLabels.length > 0) {
                                if (myInstance.xAxisLabels.length <= 7 && myInstance.xAxisLabels.length >= 1)
                                    datestr = myInstance.xAxisLabels.length;
                                if (myInstance.xAxisLabels.length > 7)
                                    datestr = 7;
                            }

                            //Display graph
                            var BarChart = $.plot(placeHolder, ds, {
                                colors: ["#287bab", $chrt_main, "#c79121", "#BBB"],
                                grid: {
                                    show: true,
                                    hoverable: true,
                                    clickable: true,
                                    tickColor: $chrt_border_color
                                }
                            });
                        //}
                    }
                    removeLoadingPan(myInstance.LodingDivId);
                }
            },
            error: function (sender, Request, textStatus, errorThrown) {
                ShowMessage(errorThrown, 4);
                if (placeHolder.length > 0)
                    removeLoadingPan(myInstance.LodingDivId);
            },
            sender: this
        }
        aSyncAjaxCall(myInstance.Url);
    }

    var CreateMorrisBarChart = function (placeHolder) {
        $('#' + placeHolder + ' svg').remove();
        $('.morris-hover').remove();
        myInstance.args = {
            success: function (sender, response) {
                if (response == "Session Failure") {
                    window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
                    result = [];
                    return false;
                }
                else {
                    result = response;
                    if (result != undefined && result != null && result.length != undefined && result.length != null && result.length > 0 && placeHolder != '') {
                        var ds = new Array();
                        ds = GetDataSetForCharts(ds, result);

                        //Display graph
                        var BarChart = Morris.Bar({
                            element: placeHolder,
                            data: ds,
                            xkey: 'x',
                            ykeys: ['y'],
                            labels: ['Completed'],
                            grid: false,

                            barColors: ["rgba(0,0,0,0.4)"],
                            gridTextColor: '#fff'
                        });
                        var rectLst = $('#' + placeHolder + ' svg rect');
                        if (rectLst != undefined && rectLst != null && rectLst.length > 0 && ds != undefined && ds != null && ds.length > 0) {
                            for (var itr = 0; itr < rectLst.length; itr++) {
                                $(rectLst[itr]).attr('PeriodId', ds[itr].PeriodId);
                                $(rectLst[itr]).attr('PeriodName', ds[itr].x);
                                $(rectLst[itr]).attr('LastPeriodId', ds[itr].PeriodId);
                            }
                        }
                    }
                    removeLoadingPan(myInstance.LodingDivId);
                }
            },
            error: function (sender, Request, textStatus, errorThrown) {
                ShowMessage(errorThrown, 4);
                if (placeHolder.length > 0)
                    removeLoadingPan(myInstance.LodingDivId);
            },
            sender: this
        }
        aSyncAjaxCall(myInstance.Url);
    }

    //--Chart day wise configuration function.
    var PlotChartDayWise = function (response) {
        var ds = response["ds"];
        var datediff = response["datediff"];
        var axisLabel = response["axisLabel"];
        var one_day = 1000 * 60 * 60 * 24;

        var datestr = 0;

        if (ds.length > 0) {
            if (ds[0].data.length > 0 && datediff <= 1) {
                var startdate = JSON.dateStringToDate("/Date(" + ds[0].data[0][0] + ")/").getTime();
                datestr = startdate + (one_day * 1);
            }
            if (ds[0].data.length > 0 && datediff > 11) {
                var startdate = JSON.dateStringToDate("/Date(" + ds[0].data[0][0] + ")/").getTime();
                datestr = startdate + (one_day * 7);
            }
        }

        //Display graph
        var options = {
            tooltipOpts: {
                content: "<span>%x - %y</span>",
                dateFormat: "%0d/%m/%y",
                defaultTheme: false
            },
            xaxis: {
                min: ds[0].data.length == 0 ? 0 : (parseInt(ds[0].data[0][0])),
                max: ds[0].data.length == 0 ? 0 : (datestr == 0 ? (parseInt(ds[0].data[ds[0].data.length - 1][0])) : datestr),
                mode: "time",
                panRange: [ds[0].data.length == 0 ? 0 : ds[0].data[0][0], ds[0].data.length == 0 ? 0 : (ds[0].data[ds[0].data.length - 1][0] + one_day)],
                timeformat: "%d/%m/%y",
                tickSize: [1, "day"],
                tickDecimals: 0,
                tickLength: 0,
                axisLabel: axisLabel,
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 11,
                axisLabelFontFamily: 'sans-serif',
                axisLabelPadding: 20
            }
        };
        return options;
    }

    //--Chart month wise configuration function.
    var PlotChartMonthWise = function (response) {
        var ds = response["ds"];
        var axisLabel = response["axisLabel"];
        var one_Month = 1000 * 60 * 60 * 24 * 12;

        var datestr = 0;

        if (ds.length > 0) {
            if (ds[0].data.length > 0) { //&& ds[1].data.length > 0
                var startdate = JSON.dateStringToDate("/Date(" + ds[0].data[ds[0].data.length - 1][0] + ")/").getTime();
                datestr = startdate + one_Month;
            }
        }

        //Display graph
        var options = {
            tooltipOpts: {
                content: "<span>%x - %y</span>",
                dateFormat: "%b %y",
                defaultTheme: false
            },
            xaxis: {
                min: ds[0].data.length == 0 ? 0 : (parseInt(ds[0].data[0][0])),
                max: ds[0].data.length == 0 ? 0 : (datestr == 0 ? (parseInt(ds[0].data[ds[0].data.length - 1][0])) : datestr),
                mode: "time",
                panRange: [ds[0].data.length == 0 ? 0 : ds[0].data[0][0], ds[0].data.length == 0 ? 0 : (ds[0].data[ds[0].data.length - 1][0] + one_Month)],
                timeformat: "%b %y", //"%d/%m/%y",
                tickSize: [1, "month"],
                tickDecimals: 0,
                tickLength: 0,
                axisLabel: axisLabel,
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 11,
                axisLabelFontFamily: 'sans-serif',
                axisLabelPadding: 15
            }
        };
        return options;
    }

    //--Chart year wise configuration function.
    var PlotChartYearWise = function (response) {
        var ds = response["ds"];
        var datediff = response["datediff"];
        var axisLabel = response["axisLabel"];
        var one_year = 1000 * 60 * 60 * 24 * 365;

        var datestr = 0;

        if (ds.length > 0) {
            if (ds[0].data.length > 0 && datediff <= 1) {
                var startdate = JSON.dateStringToDate("/Date(" + ds[0].data[0][0] + ")/").getTime();
                datestr = startdate + (one_year * 1);
            }
            if (ds[0].data.length > 0 && datediff > 11) {
                var startdate = JSON.dateStringToDate("/Date(" + ds[0].data[0][0] + ")/").getTime();
                datestr = startdate + (one_year * 7);
            }
        }

        //Display graph
        var options = {
            tooltipOpts: {
                content: "<span>%x - %y</span>",
                dateFormat: "%y",
                defaultTheme: false
            },
            xaxis: {
                min: ds[0].data.length == 0 ? 0 : (parseInt(ds[0].data[0][0])),
                max: ds[0].data.length == 0 ? 0 : (datestr == 0 ? (parseInt(ds[0].data[ds[0].data.length - 1][0])) : datestr),
                mode: "time",
                panRange: [ds[0].data.length == 0 ? 0 : ds[0].data[0][0], ds[0].data.length == 0 ? 0 : (ds[0].data[ds[0].data.length - 1][0] + one_year)],
                timeformat: "%y", //"%d/%m/%y",
                tickSize: [1, "year"],
                tickDecimals: 0,
                tickLength: 0,
                axisLabel: axisLabel,
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 11,
                axisLabelFontFamily: 'sans-serif',
                axisLabelPadding: 15
            }
        };
        return options;
    }

    //-- Form the Option to get the Xaxis Config based on the date mode.
    var FormOptions = function (request) {
        var Options = {};

        if (myInstance.datediff > 60 && myInstance.datediff < 366) {
            request["axisLabel"] = "Conducted Month";
            Options = PlotChartMonthWise(request);
        }
        else if (myInstance.datediff >= 366) {
            request["axisLabel"] = "Conducted Year";
            request["datediff"] = result.length;
            Options = PlotChartYearWise(request);
        }
        else {
            request["axisLabel"] = "Conducted Date";
            request["datediff"] = myInstance.datediff;
            Options = PlotChartDayWise(request);
        }
        return Options;
    }

    //-- Form the Option to get the data based on the date mode.
    var FormDataBasedOnServiceData = function (result, data, KeyValue) {
        if (myInstance.ChartType.toLowerCase() == "line-datewise" || myInstance.ChartType.toLowerCase() == "bar-datewise") {
            if (myInstance.datediff > 60 && myInstance.datediff < 366) {
                var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
                var monthNumber = {}
                for (var i = 0; i < monthNames.length; ++i) {
                    monthNumber[monthNames[i]] = i;
                }
                for (var i = 0; i < result.length; i += 1) {
                    var monthStr = result[i].DCDate.split("-");
                    var monthDate = new Date(parseInt(monthStr[1]), parseInt(monthNumber[monthStr[0]]), 1);
                    if (myInstance.IsSingleSeries)
                        data.push([Date.parse(monthDate.toDateString()), parseInt(result[i][KeyValue])]);
                    else {
                        if (!myInstance.MultiSeriesConfig.IsXAxisMultiSeries)
                            data.push([Date.parse(monthDate.toDateString()), parseInt(result[i][KeyValue])]);
                        else
                            data.push([parseInt(result[i][KeyValue]), Date.parse(monthDate.toDateString())]);
                    }
                }
            }
            else if (myInstance.datediff >= 366) {
                for (var i = 0; i < result.length; i += 1) {
                    var monthDate = new Date(parseInt(result[i].DCDate), 0, 1);
                    //data1.push([Date.parse(monthDate.toDateString()), parseInt(result[i].yAxisValue)]);
                    if (myInstance.IsSingleSeries)
                        data.push([Date.parse(monthDate.toDateString()), parseInt(result[i][KeyValue])]);
                    else {
                        if (!myInstance.MultiSeriesConfig.IsXAxisMultiSeries)
                            data.push([Date.parse(monthDate.toDateString()), parseInt(result[i][KeyValue])]);
                        else
                            data.push([parseInt(result[i][KeyValue]), Date.parse(monthDate.toDateString())]);
                    }
                }
            }
            else {
                for (var i = 0; i < result.length; i += 1) {
                    //data1.push([Date.parse(new Date(result[i].xAxisValue).toDateString()), parseInt(result[i].yAxisValue)]);

                    //int dd-MM-yyyy HH:mm:ss
                    //need date

                    var ipDateString = result[i].DCDate;

                    //var dateSplit = ipDateString.split(' ');
                    //var oDate = dateSplit[0].split('-');
                    //var oTime = dateSplit[1].split(':');
                    //  var OutPut = new Date(oDate[2], (parseInt(oDate[1]) - 1), oDate[0], oTime[0], oTime[1], oTime[2]);
                    //alert('OutPut :' + OutPut);
                    //data1.push([Date.parse(JSON.stringToFormatedDate(ipDateString).toDateString()), parseInt(result[i].yAxisValue)]);
                    if (myInstance.IsSingleSeries)
                        data.push([Date.parse(JSON.stringToFormatedDate(ipDateString).toDateString()), parseInt(result[i][KeyValue])]);
                    else {
                        if (!myInstance.MultiSeriesConfig.IsXAxisMultiSeries)
                            data.push([Date.parse(JSON.stringToFormatedDate(ipDateString).toDateString()), parseInt(result[i][KeyValue])]);
                        else
                            data.push([parseInt(result[i][KeyValue]), Date.parse(JSON.stringToFormatedDate(ipDateString).toDateString())]);
                    }
                    //data1.push([Date.parse(moment(result[i].xAxisValue, 'dd-MM-yyyy HH:mm:ss')._d.toDateString()), parseInt(result[i].yAxisValue)]);
                }
            }
        }
        else if (myInstance.ChartType.toLowerCase() == "line-stringwise" || myInstance.ChartType.toLowerCase() == "bar-stringwise") {
            if (myInstance.IsSingleSeries) {
                for (var i = 0; i < result.length; i++) {
                    data.push([i, parseInt(result[i].yAxisValue)]);
                    if (myInstance.xAxisLabels.length != result.length)
                        myInstance.xAxisLabels.push(result[i][myInstance.SingleSeriesConfig.xAxisValueKey]);
                }
            }
            else {
                for (var i = 0; i < result.length; i++) {
                    if (result[i].yAxisValue[KeyValue] != null && result[i].yAxisValue[KeyValue] != undefined && result[i].yAxisValue[KeyValue] != '' && !isNaN(result[i].yAxisValue[KeyValue]))
                        data.push([i, parseInt(result[i].yAxisValue[KeyValue])]);
                    else
                        data.push([i, 0]);
                    if (myInstance.xAxisLabels.length != result.length)
                        myInstance.xAxisLabels.push(result[i][myInstance.MultiSeriesConfig.xAxisValueKey[0]]);
                }
            }
        }
        else if (myInstance.ChartType.toLowerCase() == "pie-multi") {
            for (var i = 0; i < result.length; i++) {
                for (var j = 0; j < myInstance.MultiSeriesConfig.SeriesCount; j++) {
                    data.push({
                        label: myInstance.MultiSeriesConfig.yAxisLegents[j], data: result[i].yAxisValue[myInstance.MultiSeriesConfig.yAxisValueKey[j]]
                    });
                }
            }
        }
        else if (myInstance.ChartType.toLowerCase() == "pie") {
            for (var i = 0; i < result.length; i++) {
                data.push({
                    label: result[i].xAxisValue, data: result[i].yAxisValue
                });
            }
        }
        else if (myInstance.ChartType.toLowerCase() == "morris-bar") {
            if (myInstance.IsSingleSeries) {
                var startLength = 0;
                var MaxLength = 0;
                var displayStartFrom = 0;
                var oChartLeftArrow = document.getElementById('ChartLeftArrow');
                var oChartRightArrow = document.getElementById('ChartRightArrow');
                if (oChartRightArrow != undefined && oChartRightArrow != null) {
                    var displayStartFromAttr = oChartRightArrow.getAttribute('displayStartFrom');
                    if (displayStartFromAttr == 'first')
                        displayStartFrom = 0;
                    else
                        displayStartFrom = -1;
                }
                if (displayStartFrom < 0) {
                    if (result.length - 4 < 0)
                        startLength = 0
                    else
                        startLength = result.length - 4;
                    MaxLength = result.length;
                    oChartLeftArrow.setAttribute('leftValue', startLength);
                    oChartRightArrow.setAttribute('rightValue', MaxLength);
                    oChartRightArrow.setAttribute('displayStartFrom', 'first');
                }
                else {
                    if (oChartLeftArrow != undefined && oChartLeftArrow != null) {
                        startLength = oChartLeftArrow.getAttribute('leftValue');
                        if (startLength != undefined && startLength != null && startLength != '')
                            startLength = parseInt(startLength);
                        else
                            startLength = 0;
                    }
                    if (oChartRightArrow != undefined && oChartRightArrow != null) {
                        MaxLength = oChartRightArrow.getAttribute('rightValue');
                        if (MaxLength != undefined && MaxLength != null && MaxLength != '')
                            MaxLength = parseInt(MaxLength);
                        else
                            MaxLength = 0;
                    }
                    if (startLength <= 0) {
                        startLength = 0;
                        oChartLeftArrow.setAttribute('leftValue', startLength);
                    }
                    if (MaxLength <= 0) {
                        MaxLength = 4;
                        oChartRightArrow.setAttribute('rightValue', MaxLength);
                    }
                    else if (startLength >= result.length && MaxLength > result.length) {
                        startLength = startLength - 4;
                        MaxLength = result.length;
                        oChartLeftArrow.setAttribute('leftValue', startLength);
                        oChartRightArrow.setAttribute('rightValue', MaxLength);
                    }
                    else if (startLength < result.length && MaxLength > result.length) {
                        MaxLength = result.length;
                        oChartRightArrow.setAttribute('rightValue', MaxLength);
                    }
                }
                for (var i = startLength; i < MaxLength; i++) {
                    data.push({ 'x': result[i].xAxisValue, 'y': parseInt(result[i].yAxisValue), 'PeriodId': result[i].PeriodId });
                }
            }
        }
    }

    var GetDataSetForCharts = function (ds, result) {
        var barWidth = 0;
        if (myInstance.datediff > 60 && myInstance.datediff < 366) {
            barWidth = 24 * 60 * 60 * 5000;
        }
        else if (myInstance.datediff >= 366) {
            barWidth = 1000 * 60 * 60 * 24 * 50;
        }
        else {
            barWidth = 24 * 60 * 60 * 300;
        }
        if (myInstance.IsSingleSeries) {
            var data = [];
            FormDataBasedOnServiceData(result, data, myInstance.SingleSeriesConfig.yAxisValueKey[itr]);
            var _extents = false;
            var _extentdata = [];
            if (data.length == 0) {
                _extentdata = [
                { label: 'No records available', start: 0, end: 1 }];
                _extents = true;
            }
            else {
                _extentdata = [];
                _extents = false;
            }
            var series = {};
            series = {
                extents: { show: _extents },
                extentdata: _extentdata,
                data: data
            };
            if (myInstance.ChartType.toLowerCase() == "line-datewise" || myInstance.ChartType.toLowerCase() == "line-stringwise") { //-- For Line Chart
                series["lines"] = {
                    show: true,
                    lineWidth: 2,
                    fill: true,
                    fillColor: {
                        colors: [{
                            opacity: 0.1
                        }, {
                            opacity: 0.15
                        }]
                    }
                };
                series["points"] = {
                    show: true
                };
            }
            else if (myInstance.ChartType.toLowerCase() == "bar-datewise") { //-- For Bar Chart
                series["bars"] = {
                    show: true,
                    align: "left",
                    barWidth: barWidth
                };
            }
            else if (myInstance.ChartType.toLowerCase() == "bar-stringwise") { //-- For Bar Chart
                series["bars"] = {
                    show: true,
                    align: "left",
                    barWidth: 0.8
                };
            }
            else if (myInstance.ChartType.toLowerCase() == "pie") { //-- For Pie Chart
                series["pie"] = {
                    show: true,
                    label: {
                        show: true,
                        radius: 0.8,
                        formatter: function (label, series) {
                            return '<div style="border:1px solid grey;font-size:8pt;text-align:center;padding:5px;color:white;">' +
                            label + ' : ' +
                            Math.round(series.percent) +
                            '%</div>';
                        },
                        background: {
                            opacity: 0.8,
                            color: '#000'
                        }
                    }
                };
                series["colors"] = ["#005CDE", "#00A36A", "#7D0096", "#992B00", "#DE000F", "#BD362F", "#7e9d3a", "#FF9F01", "#6595b4", "#E24913"];
            }
            if (myInstance.ChartType.toLowerCase() != "" && myInstance.ChartType.toLowerCase() != "morris-bar")
                ds.push(series);
            else if (myInstance.ChartType.toLowerCase() == "morris-bar")
                ds = data;

        }
        else {
            var SeriesCount = myInstance.MultiSeriesConfig.SeriesCount;
            for (var itr = 0; itr < SeriesCount; itr++) {
                var data = [];
                if (myInstance.MultiSeriesConfig.IsXAxisMultiSeries)
                    FormDataBasedOnServiceData(result, data, myInstance.MultiSeriesConfig.xAxisValueKey[itr]);
                else
                    FormDataBasedOnServiceData(result, data, myInstance.MultiSeriesConfig.yAxisValueKey[itr]);
                var _extents = false;
                var _extentdata = [];
                if (data.length == 0) {
                    _extentdata = [
                    { label: 'No records available', start: 0, end: 1 }];
                    _extents = true;
                }
                else {
                    _extentdata = [];
                    _extents = false;
                }
                var series = {};
                if (itr == 0) {
                    series = {
                        extents: { show: _extents },
                        extentdata: _extentdata,
                        data: data,
                        outputResult : result,
                        label: (myInstance.MultiSeriesConfig.IsXAxisMultiSeries ? myInstance.MultiSeriesConfig.yAxisLegents[itr] : myInstance.MultiSeriesConfig.yAxisLegents[itr])
                    };
                }
                else {
                    series = {
                        data: data,
                        outputResult: result,
                        label: (myInstance.MultiSeriesConfig.IsXAxisMultiSeries ? myInstance.MultiSeriesConfig.yAxisLegents[itr] : myInstance.MultiSeriesConfig.yAxisLegents[itr])
                    };
                }
                if (myInstance.MultiSeriesConfig.SeriesType[itr].toLowerCase() == "line") {
                    series["lines"] = {
                        show: true,
                        lineWidth: 2,
                        fill: true,
                        fillColor: {
                            colors: [{
                                opacity: 0.1
                            }, {
                                opacity: 0.15
                            }]
                        }
                    };
                    series["points"] = {
                        show: true
                    };
                }
                else if (myInstance.ChartType.toLowerCase() == "bar-datewise") {
                    series["bars"] = {
                        show: true,
                        align: "left",
                        barWidth: barWidth
                    };
                    if (data != undefined && data != null && data.length != 0)
                        series["bars"]["order"] = itr;
                }
                else if (myInstance.ChartType.toLowerCase() == "bar-stringwise") {
                    if (myInstance.MultiSeriesConfig.SeriesCount == 1) {
                        barWidth = 0.8;
                    }
                    else {
                        var calc = Math.round(1 / myInstance.MultiSeriesConfig.SeriesCount * 1000) / 1000;
                        if (calc >= 0.5)
                            barWidth = calc - 0.1;
                        else
                            barWidth = calc - 0.005;
                    }
                    series["bars"] = {
                        show: true,
                        align: "left",
                        barWidth: barWidth
                    };
                    if (data != undefined && data != null && data.length != 0)
                        series["bars"]["order"] = itr;
                }
                else if (myInstance.ChartType.toLowerCase() == "pie") { //-- For Pie Chart
                    series["pie"] = {
                        show: true,
                        label: {
                            show: true,
                            radius: 0.8,
                            formatter: function (label, series) {
                                return '<div style="border:1px solid grey;font-size:8pt;text-align:center;padding:5px;color:white;">' +
                                label + ' : ' +
                                Math.round(series.percent) +
                                '%</div>';
                            },
                            background: {
                                opacity: 0.8,
                                color: '#000'
                            }
                        }
                    };
                    series["colors"] = ["#005CDE", "#00A36A", "#7D0096", "#992B00", "#DE000F", "#BD362F", "#7e9d3a", "#FF9F01", "#6595b4", "#E24913"];
                }
                ds.push(series);
            }
        }
        return ds;
    }

    var GetMaxValueOfYAxis = function (ds) {
        var ymaxvalue = 0;
        var ymax = 0;

        for (var itr = 0; itr < ds.length; itr++) {
            for (var item in ds[itr].data) {
                if (ymaxvalue < ds[itr].data[item][1])
                    ymaxvalue = parseInt(ds[itr].data[item][1]);
            }
        }

        //if (ymaxvalue >= 0 && ymaxvalue <= 30)
        //    ymax = 30;
        //else if (ymaxvalue >= 20 && ymaxvalue <= 50)
        //    ymax = 50;
        //else if (ymaxvalue >= 50 && ymaxvalue <= 100)
        //    ymax = 100;
        //else if (ymaxvalue >= 100 && ymaxvalue <= 1000)
        //    ymax = 500;
        //else if (ymaxvalue >= 1000 && ymaxvalue <= 10000)
        //    ymax = 5000;
        //else if (ymaxvalue >= 10000 && ymaxvalue <= 100000)
        //    ymax = 50000;
        //else if (ymaxvalue >= 100000 && ymaxvalue <= 1000000)
        //    ymax = 500000;
        //else
        ymax = ymaxvalue + 10;

        return [ymax, ymaxvalue];
    }

    var aSyncAjaxCall = function (Url) {
        var result;
        $.ajax({
            url: Url,
            contentType: 'application/json; charset=utf-8',
            type: 'POST',
            dataType: 'json',
            data: JSON.stringify(GetFilterParamForCharts()),
            async: myInstance.async,
            success: function (response) {
                result = response;
                if (myInstance.args != null && myInstance.args.success != null && myInstance.args.success != "" && navigator.onLine) {
                    myInstance.args.success(myInstance.args.sender, response)
                }
                else if (navigator != undefined && navigator != null && !navigator.onLine) {
                    ShowMessage("IN-ER-ALP-001 :: Please Check Your Internet Connectivity", 4);
                    removeLoadingPan(myInstance.LodingDivId);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                if (myInstance.args != null && myInstance.args.error != null && myInstance.args.error != "" && navigator.onLine) {
                    myInstance.args.error(myInstance.args.sender, XMLHttpRequest, textStatus, errorThrown);
                    removeLoadingPan(myInstance.LodingDivId);
                }
                else if (navigator != undefined && navigator != null && !navigator.onLine) {
                    ShowMessage("IN-ER-ALP-001 :: Please Check Your Internet Connectivity", 4);
                    removeLoadingPan(myInstance.LodingDivId);
                }
            }
        });
        return result;
    }

    var GetFilterParamForCharts = function () {
        var param = {};
        var daterange;
        var filterControlIds = myInstance.FilterControlId;
        if (filterControlIds.length > 0) {
            if (document.getElementById(filterControlIds[0]) != undefined)
                daterange = document.getElementById(filterControlIds[0]).getElementsByTagName("span")[0].innerHTML;

            var one_day = 1000 * 60 * 60 * 24;
            var fromdate = new Date();
            var todate = new Date();

            if (document.getElementById(filterControlIds[0]) != undefined) {
                fromdate = $("#" + filterControlIds[0]).data().daterangepicker.startDate._d;
                todate = $("#" + filterControlIds[0]).data().daterangepicker.endDate._d;
            }

            //-- Selected Date range differance.
            myInstance.datediff = Math.round((todate.getTime() - fromdate.getTime()) / one_day);

            param["FromDate"] = daterange;
            param["datediff"] = myInstance.datediff;
            if (filterControlIds[1] != '' && filterControlIds[1] != undefined && filterControlIds[1] != null) {
                if (document.getElementById(filterControlIds[1]) != undefined && document.getElementById(filterControlIds[1]) != null)
                    param["Template"] = (document.getElementById(filterControlIds[1]).value != '' ? document.getElementById(filterControlIds[1]).value : 0);
            }
            if (filterControlIds[2] != '' && filterControlIds[2] != undefined && filterControlIds[2] != null) {
                if (document.getElementById(filterControlIds[2]) != undefined && document.getElementById(filterControlIds[2]) != null)
                    param["Place"] = (document.getElementById(filterControlIds[2]).value != '' ? document.getElementById(filterControlIds[2]).value : 0);
            }
            if (filterControlIds[3] != '' && filterControlIds[3] != undefined && filterControlIds[3] != null) {
                if (document.getElementById(filterControlIds[3]) != undefined && document.getElementById(filterControlIds[3]) != null)
                    param["PlaceDimension"] = (document.getElementById(filterControlIds[3]).value != '' ? document.getElementById(filterControlIds[3]).value : 0);
            }

            param = JSON.stringify(param);
            param = { request: param };
        }
        else if (myInstance.BaseFilterParam != undefined && myInstance.BaseFilterParam != null && myInstance.BaseFilterParam.length > 0) {
            var parameter = {};
            for (var j = 0; j < myInstance.BaseFilterParam.length; j++) {
                if (myInstance.BaseFilterParam[j].ControlId != '' && document.getElementById(myInstance.BaseFilterParam[j].ControlId) != undefined && document.getElementById(myInstance.BaseFilterParam[j].ControlId) != null) {
                    var value;
                    var lcontrol = document.getElementById(myInstance.BaseFilterParam[j].ControlId);
                    if (lcontrol != null && lcontrol != undefined) {
                        if (lcontrol.multiple) {
                            for (var item in lcontrol.children) {
                                if (lcontrol.children[item].selected && value != lcontrol.children[item].value.toString()) {
                                    if (value == undefined) {
                                        value = [];
                                        value.push(lcontrol.children[item].value.toString());
                                    }
                                    else {
                                        var index = value.indexOf(lcontrol.children[item].value.toString());
                                        if (index == -1)
                                            value.push(lcontrol.children[item].value.toString());
                                    }
                                }
                            }
                        }
                        else
                            value = lcontrol.value;
                        param[myInstance.BaseFilterParam[j].ParamName] = (value == undefined || value == null || value == '' ? '-1' : value);
                    }
                }
                else if (myInstance.BaseFilterParam[j].ControlId == "") {
                    if (typeof (myInstance.BaseFilterParam[j].Value) == 'string')
                        param[myInstance.BaseFilterParam[j].ParamName] = myInstance.BaseFilterParam[j].Value;
                    else if (typeof (myInstance.BaseFilterParam[j].Value) == 'object')
                        param[myInstance.BaseFilterParam[j].ParamName] = JSON.stringify(myInstance.BaseFilterParam[j].Value);
                }
            }

            param = JSON.stringify(param);
            param = { request: param };
        }
        return param;
    }
}

//--Signature Pad Initialize function.
function SignaturePadInitialize()
{
    var wrapper = document.getElementById("signature-pad"),
    canvas = wrapper.querySelector("canvas"),
    signaturePad;

    // Adjust canvas coordinate space taking into account pixel ratio,
    // to make it look crisp on mobile devices.
    // This also causes canvas to be cleared.
    function resizeCanvas() {
        var ratio = window.devicePixelRatio || 1;
        canvas.width = canvas.offsetWidth * ratio;
        canvas.height = canvas.offsetHeight * ratio;
        canvas.getContext("2d").scale(ratio, ratio);
    }

    //window.onresize = resizeCanvas;
    resizeCanvas();

    signaturePad = new SignaturePad(canvas);

    //signaturePad.clear();

    return signaturePad;
}

//--Dropdown load function.
function DataLoadEvent() {
    var defaultValue = false;
    this.Async = false;
    this.BaseFilterParam = [];
    this.defaultSelect = true;
    var myInstance = this;
    var result = {};
    this.DropDownLoad = function (BaseUrl, ChildUrl, BaseControlId, ChildControlId, defaultValue) {
        if (BaseUrl != "") {
            var param = {}, parameter = {};
            for (var j = 0; j < myInstance.BaseFilterParam.length; j++) {
                if (myInstance.BaseFilterParam[j].ControlId != '' && document.getElementById(myInstance.BaseFilterParam[j].ControlId) != undefined && document.getElementById(myInstance.BaseFilterParam[j].ControlId) != null) {
                    var value;
                    var lcontrol = document.getElementById(myInstance.BaseFilterParam[j].ControlId);
                    if (lcontrol != null && lcontrol != undefined) {
                        if (lcontrol.multiple) {
                            for (var item in lcontrol.children) {
                                if (lcontrol.children[item].selected && value != lcontrol.children[item].value.toString()) {
                                    if (value == undefined) {
                                        value = [];
                                        value.push(lcontrol.children[item].value.toString());
                                    }
                                    else {
                                        var index = value.indexOf(lcontrol.children[item].value.toString());
                                        if (index == -1)
                                            value.push(lcontrol.children[item].value.toString());
                                    }
                                }
                            }
                        }
                        else if (lcontrol.className == "input reportrange") {
                            if (lcontrol.getElementsByTagName("span").length > 0)
                                value = lcontrol.getElementsByTagName("span")[0].innerHTML;
                            else
                                value = '';
                        }
                        else
                            value = lcontrol.value;
                        param[myInstance.BaseFilterParam[j].ParamName] = (value == undefined || value == null || value == '' ? '-1' : value);
                    }
                }
                else if (myInstance.BaseFilterParam.length > 0 && myInstance.BaseFilterParam[j].ControlId == "") {
                    if (typeof (myInstance.BaseFilterParam[j].Value) == 'string')
                        parameter[myInstance.BaseFilterParam[j].ParamName] = myInstance.BaseFilterParam[j].Value;
                    else if(typeof (myInstance.BaseFilterParam[j].Value) == 'object')
                        parameter[myInstance.BaseFilterParam[j].ParamName] = JSON.stringify(myInstance.BaseFilterParam[j].Value);
                }
            }
            parameter["request"] = JSON.stringify(param);
            $.ajax({
                url: BaseUrl,
                contentType: 'application/json; charset=utf-8',
                type: 'POST',
                dataType: 'json',
                data: JSON.stringify(parameter),
                async: myInstance.Async,
                success: function (response) {
                    if (response == "Session Failure") {
                        window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
                        result = [];
                        return false;
                    }
                    else {
                        //result = JSON.parse(response.d);
                        result = response;
                        var ClientIDs = BaseControlId;
                        for (var i = 0; i < ClientIDs.length; i++) {
                            var ddlCombo = document.getElementById(ClientIDs[i].ControlId);
                            //remove existing elements
                            if (ddlCombo.options) {
                                while (ddlCombo.options.length > 0) {
                                    ddlCombo.remove(0);
                                }
                            }

                            if (response.length > 0 && defaultValue) {
                                //-- Add default elements.
                                var optn = document.createElement("OPTION");
                                optn.text = "ALL";
                                optn.value = 0;
                                ddlCombo.options.add(optn);
                            }
                            if ($("#" + ClientIDs[i].ControlId).data().select2 != undefined) {
                                $("#" + ClientIDs[i].ControlId).data().select2.updateSelection();
                                $("#" + ClientIDs[i].ControlId).data().select2.initSelection();
                            }

                            //add elements
                            for (var j = 0; j < response.length; j++) {
                                var data = response[j];
                                var selected = false;
                                //if (response.length == 1)
                                //    selected = true;
                                optn = document.createElement("OPTION");
                                optn.text = data["Name"];
                                optn.value = data["Id"];
                                optn.selected = selected
                                ddlCombo.options.add(optn);
                                if (j == 0) {
                                    if ($("#" + ClientIDs[i].ControlId).data().select2 != undefined)
                                        $("#" + ClientIDs[i].ControlId).data().select2.initSelection();
                                }
                            }
                            if (!myInstance.defaultSelect) {
                                if ($("#" + ClientIDs[i].ControlId).data().select2 != undefined) {
                                    if ($("#" + ClientIDs[i].ControlId).data().select2.clear != undefined)
                                        $("#" + ClientIDs[i].ControlId).data().select2.clear();
                                }
                            }
                        }
                    }
                },
                error: function (result) {
                    ShowMessage("AjaxError.", 4);
                }
            });
        }

        if (ChildUrl != "") {
            var FilterControl = BaseControlId;
            var ClientIDs = ChildControlId;
            for (var i = 0; i < ClientIDs.length; i++) {
                var parameter = {};
                for (var j = 0; j < FilterControl.length; j++) {
                    if (document.getElementById(FilterControl[j].ControlId) != undefined && document.getElementById(FilterControl[j].ControlId) != null) {
                        var lControl = document.getElementById(FilterControl[j].ControlId);
                        var value = '';
                        if (lControl.className == "input reportrange") {
                            if (lControl.getElementsByTagName("span").length > 0)
                                value = lControl.getElementsByTagName("span")[0].innerHTML;
                            else
                                value = '';
                        }
                        else
                            value = document.getElementById(FilterControl[j].ControlId).value;
                        parameter[FilterControl[j].ParamName] = (value == undefined || value == null || value == '' ? '-1' : value);
                    }
                }
                parameter = { request: JSON.stringify(parameter) };
                var ContolId = ClientIDs[i];
                $.ajax({
                    url: ChildUrl,
                    contentType: 'application/json; charset=utf-8',
                    type: 'POST',
                    dataType: 'json',
                    data: JSON.stringify(parameter),
                    async: myInstance.Async,
                    success: function (response) {
                        if (response == "Session Failure") {
                            window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
                            result = [];
                            return false;
                        }
                        else {
                            //result = JSON.parse(response.d);
                            result = response;
                            var ddlCombo = document.getElementById(ContolId);
                            //remove existing elements
                            if (ddlCombo.options) {
                                while (ddlCombo.options.length > 0) {
                                    ddlCombo.remove(0);
                                }
                            }

                            if (response.length > 0 && defaultValue) {
                                //-- Add default elements.
                                var optn = document.createElement("OPTION");
                                optn.text = "ALL";
                                optn.value = 0;
                                ddlCombo.options.add(optn);
                            }
                            if ($("#" + ContolId).data().select2 != undefined) {
                                $("#" + ContolId).data().select2.updateSelection();
                                $("#" + ContolId).data().select2.initSelection();
                            }

                            //add elements
                            for (var i = 0; i < response.length; i++) {
                                var data = response[i];
                                var optn = document.createElement("OPTION");
                                optn.text = data["Name"];
                                optn.value = data["Id"];
                                ddlCombo.options.add(optn);
                                if (i == 0) {
                                    if ($("#" + ContolId).data().select2 != undefined) {
                                        $("#" + ContolId).data().select2.updateSelection();
                                        $("#" + ContolId).data().select2.initSelection();
                                    }
                                }
                            }
                        }
                    },
                    error: function (result) {
                        ShowMessage("AjaxError.", 4);
                    }
                });
            }
        }
    }

    this.checkBoxConfig = function (Url, ControlId) {
        CheckBoxConfig = {
            GetServiceUrl: Url,
            ControlId: ControlId
        };
        return CheckBoxConfig;
    }

    this.checkBokListLoad = function (CheckBoxConfigLst) {
        for (var i = 0; i < CheckBoxConfigLst.length; i++) {

        }
    }

    this.getData = function (ParentNode) {
        if (ParentNode != undefined) {
            for (var i = 0; i < ParentNode.childNodes.length; i++) {
                if (ParentNode.childNodes[i].tagName == "SELECT") {
                    result[ParentNode.childNodes[i].id] = ParentNode.childNodes[i].value;
                }
                else if (ParentNode.childNodes[i].tagName == "INPUT" && ParentNode.childNodes[i].type == "checkbox") {
                    if (ParentNode.childNodes[i].name == "checkbox-inline")
                        result[ParentNode.childNodes[i].id] = ParentNode.childNodes[i].checked;
                    else
                    {
                        var group = document.getElementsByName(ParentNode.childNodes[i].name)
                        if (result[ParentNode.childNodes[i].name] == undefined) {
                            for (var k = 0; k < group.length; k++) {
                                if (group[k].checked) {
                                    if (result[ParentNode.childNodes[i].name] != undefined)
                                        result[ParentNode.childNodes[i].name] = result[ParentNode.childNodes[i].name] + "," + group[k].value;
                                    else
                                        result[ParentNode.childNodes[i].name] = group[k].value;
                                }
                            }
                        }
                    }
                }
                else if (ParentNode.childNodes[i].tagName == "INPUT" && ParentNode.childNodes[i].type == "radio") {
                    var group = document.getElementsByName(ParentNode.childNodes[i].name)
                    for (var k = 0; k < group.length; k++) {
                        if (group[k].checked) {
                            result[ParentNode.childNodes[i].name] = group[k].value;
                        }
                    }
                }
                else if (ParentNode.childNodes[i].tagName == "INPUT" && ParentNode.childNodes[i].type == "hidden") {
                    result[ParentNode.childNodes[i].id] = ParentNode.childNodes[i].value;
                }
                else if (ParentNode.childNodes[i].tagName == "LABEL") {
                    this.getData(ParentNode.childNodes[i]);
                }
                else if (ParentNode.childNodes[i].tagName == "DIV") {
                    this.getData(ParentNode.childNodes[i]);
                }
                else if (ParentNode.childNodes[i].tagName == "SECTION") {
                    this.getData(ParentNode.childNodes[i]);
                }
                else if (ParentNode.childNodes[i].tagName == "INPUT" &&  ParentNode.childNodes[i].type == "text") {
                    result[ParentNode.childNodes[i].id] = ParentNode.childNodes[i].value;
                }
            }
        }
        return result;
    }
}

function AdvDataLoadEvent() {
    this.Async = false;
    this.Url = "";
    this.ControlIds = [];
    this.successFunction = null;
    this.FilterParam = [];
    this.defaultValue = false;
    this.selectValue = false;
    this.forcefullySelectValue = false;
    this.DataLoad = true;
    this.DATType = 0;
    var myInstance = this;
    this.DropDownLoad = function () {
        if (myInstance.Url != "") {
            var param = {}, parameter = {};
            for (var j = 0; j < myInstance.FilterParam.length; j++) {
                if (myInstance.FilterParam[j].ControlId != '' && document.getElementById(myInstance.FilterParam[j].ControlId) != undefined && document.getElementById(myInstance.FilterParam[j].ControlId) != null) {
                    var value;
                    var lcontrol = document.getElementById(myInstance.FilterParam[j].ControlId);
                    if (lcontrol != null && lcontrol != undefined) {
                        if (lcontrol.multiple) {
                            for (var item in lcontrol.children) {
                                if (lcontrol.children[item].selected && value != lcontrol.children[item].value.toString()) {
                                    if (value == undefined) {
                                        value = [];
                                        value.push(lcontrol.children[item].value.toString());
                                    }
                                    else {
                                        var index = value.indexOf(lcontrol.children[item].value.toString());
                                        if (index == -1)
                                            value.push(lcontrol.children[item].value.toString());
                                    }
                                }
                            }
                        }
                        else if (lcontrol.className == "input reportrange") {
                            if (lcontrol.getElementsByTagName("span").length > 0)
                                value = lcontrol.getElementsByTagName("span")[0].innerHTML;
                            else
                                value = '';
                        }
                        else
                            value = lcontrol.value;
                        param[myInstance.FilterParam[j].ParamName] = (value == undefined || value == null || value == '' ? '-1' : value);
                    }
                }
                else if (myInstance.FilterParam.length > 0 && myInstance.FilterParam[j].ControlId == "") {
                    if (typeof (myInstance.FilterParam[j].Value) == 'string')
                        param[myInstance.FilterParam[j].ParamName] = myInstance.FilterParam[j].Value;
                    else if (typeof (myInstance.FilterParam[j].Value) == 'object')
                        param[myInstance.FilterParam[j].ParamName] = JSON.stringify(myInstance.FilterParam[j].Value);
                }
            }
        }
        parameter["request"] = JSON.stringify(param);
        if (myInstance.DATType != undefined && myInstance.DATType != null && myInstance.DATType > 0)
            parameter["DATType"] = myInstance.DATType;
        parameter = JSON.stringify(parameter);
        SyncAjaxCall(parameter);
    }

    var SyncAjaxCall = function (parameterToLoadData) {
        var result;
        $.ajax({
            url: myInstance.Url,
            contentType: 'application/json; charset=utf-8',
            type: 'POST',
            dataType: 'json',
            data: parameterToLoadData,
            async: myInstance.Async,
            success: function (response) {
                if (response == "Session Failure") {
                    window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
                    result = [];
                    return false;
                }
                else {
                    result = response;
                    if (myInstance.DataLoad) {
                        for (var i = 0; i < myInstance.ControlIds.length; i++) {
                            var ddlCombo = document.getElementById(myInstance.ControlIds[i].ControlId);
                            //remove existing elements
                            if (ddlCombo.options) {
                                while (ddlCombo.options.length > 0) {
                                    ddlCombo.remove(0);
                                }
                            }

                            if (response.length > 0 && myInstance.defaultValue) {
                                //-- Add default elements.
                                var optn = document.createElement("OPTION");
                                optn.text = "ALL";
                                optn.value = 0;
                                optn.selected = true;
                                ddlCombo.options.add(optn);
                            }
                            if ($("#" + myInstance.ControlIds[i].ControlId).data().select2 != undefined) {
                                $("#" + myInstance.ControlIds[i].ControlId).data().select2.updateSelection();
                                $("#" + myInstance.ControlIds[i].ControlId).data().select2.initSelection();
                            }

                            //add elements
                            for (var j = 0; j < response.length; j++) {
                                var data = response[j];
                                var selected = false;
                                if (response.length == 1 && myInstance.selectValue && !myInstance.defaultValue)
                                    selected = true;
                                else if (myInstance.forcefullySelectValue)
                                    selected = true;
                                optn = document.createElement("OPTION");
                                optn.text = data["Name"];
                                optn.value = data["Id"];
                                optn.selected = selected
                                ddlCombo.options.add(optn);
                                if (j == 0) {
                                    if ($("#" + myInstance.ControlIds[i].ControlId).data().select2 != undefined)
                                        $("#" + myInstance.ControlIds[i].ControlId).data().select2.initSelection();
                                }
                            }
                            if (!myInstance.selectValue) {
                                if ($("#" + myInstance.ControlIds[i].ControlId).data().select2 != undefined) {
                                    if ($("#" + myInstance.ControlIds[i].ControlId).data().select2.clear != undefined)
                                        $("#" + myInstance.ControlIds[i].ControlId).data().select2.clear();
                                }
                            }
                        }
                    }
                    if (myInstance.successFunction != null) {
                        myInstance.successFunction(result);
                    }
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                ShowMessage(errorThrown, 4);
            }
        });
        return result;
    }
}

//--Dashboard dropdown load function.
function DashBoardDropDownLoad(TeplateUrl, PlaceUrl, TemplateControlId, PlaceControlId)
{
    if (TeplateUrl != "") {
        $.ajax({
            url: TeplateUrl,
            contentType: 'application/json; charset=utf-8',
            type: 'POST',
            dataType: 'json',
            //data: JSON.stringify(parameter),
            async: true,
            success: function (response) {
                if (response == "Session Failure") {
                    window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
                    result = [];
                    return false;
                }
                else {
                    //result = JSON.parse(response.d);
                    result = response;
                    var ClientIDs = TemplateControlId;
                    for (var i = 0; i < ClientIDs.length; i++) {
                        var ddlCombo = document.getElementById(ClientIDs[i]);
                        //remove existing elements
                        if (ddlCombo.options) {
                            while (ddlCombo.options.length > 0) {
                                ddlCombo.remove(0);
                            }
                        }

                        if (response.length > 0) {
                            //-- Add default elements.
                            var optn = document.createElement("OPTION");
                            optn.text = "ALL";
                            optn.value = 0;
                            ddlCombo.options.add(optn);
                        }
                        if ($("#" + ClientIDs[i]).data().select2 != undefined) {
                            $("#" + ClientIDs[i]).data().select2.updateSelection();
                            $("#" + ClientIDs[i]).data().select2.initSelection();
                        }

                        //add elements
                        for (var j = 0; j < response.length; j++) {
                            var data = response[j];
                            optn = document.createElement("OPTION");
                            optn.text = data["Name"];
                            optn.value = data["Id"];
                            ddlCombo.options.add(optn);
                            if (j == 0) {
                                if ($("#" + ClientIDs[j]).data().select2 != undefined)
                                    $("#" + ClientIDs[j]).data().select2.initSelection();
                            }
                        }
                    }
                }

                if (PlaceUrl != "") {
                    var FilterControl = TemplateControlId;
                    var ClientIDs = PlaceControlId;
                    for (var i = 0; i < ClientIDs.length; i++) {
                        parameter = { ddlTempName: document.getElementById(FilterControl[i]).value };
                        parameter = { request: JSON.stringify(parameter) };
                        var ContolId = ClientIDs[i];
                        $.ajax({
                            url: PlaceUrl,
                            contentType: 'application/json; charset=utf-8',
                            type: 'POST',
                            dataType: 'json',
                            data: JSON.stringify(parameter),
                            async: false,
                            success: function (response) {
                                if (response == "Session Failure") {
                                    window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
                                    result = [];
                                    return false;
                                }
                                else {
                                    //result = JSON.parse(response.d);
                                    result = response;
                                    var ddlCombo = document.getElementById(ContolId);
                                    //remove existing elements
                                    if (ddlCombo.options) {
                                        while (ddlCombo.options.length > 0) {
                                            ddlCombo.remove(0);
                                        }
                                    }

                                    if (response.length > 0) {
                                        //-- Add default elements.
                                        var optn = document.createElement("OPTION");
                                        optn.text = "ALL";
                                        optn.value = 0;
                                        ddlCombo.options.add(optn);
                                    }
                                    if ($("#" + ContolId).data().select2 != undefined) {
                                        $("#" + ContolId).data().select2.updateSelection();
                                        $("#" + ContolId).data().select2.initSelection();
                                    }

                                    //add elements
                                    for (var i = 0; i < response.length; i++) {
                                        var data = response[i];
                                        var optn = document.createElement("OPTION");
                                        optn.text = data["Name"];
                                        optn.value = data["Id"];
                                        ddlCombo.options.add(optn);
                                        if (i == 0) {
                                            if ($("#" + ContolId).data().select2 != undefined) {
                                                $("#" + ContolId).data().select2.updateSelection();
                                                $("#" + ContolId).data().select2.initSelection();
                                            }
                                        }
                                    }
                                }
                            },
                            error: function (result) {
                                ShowMessage("AjaxError.", 4);
                            }
                        });
                    }
                }
            },
            error: function (result) {
                ShowMessage("AjaxError.", 4);
            }
        });
    }
}

function ExportClick(GridConfigUrl, GridDataUrl, oModel, redirectURL, fileName, TypeOfExport) {
    if ($(".SmallBox").length > 0) {
        $(".SmallBox").remove();
    }
    var oModel = oModel != "" ? JSON.parse(oModel) : oModel;
    var target = $('#target');
    if (target.hasClass('loading')) {
        target.loadingOverlay('remove');
    } else {
        target.loadingOverlay();
    };
    var filestring = "";
        
    if (TypeOfExport == 'Excel') {
        $('#param2').val('');
        $('#param2').val('0');
        filestring = ExcellentExport.excel(window.location, oModel, "Sheet1", GridConfigUrl, GridDataUrl);
    }
    else if (TypeOfExport == 'Pdf') {
        $('#param2').val('');
        $('#param2').val('1');
        filestring = ExcellentExport.pdf(window.location, oModel, "Sheet1", GridConfigUrl, GridDataUrl);
    }

    if (filestring != undefined && filestring != null && filestring !== '' && filestring != false) {
        $('#param1').val('');
        $('#param1').val(filestring);
        $('#param3').val('');
        $('#param3').val(redirectURL);
        $('#param4').val('');
        $('#param4').val(fileName);
        $('#modal-form').submit();
    }
    else {
        ShowMessage("IN-ER-EXP-001 :: Error while export!", 4);
    }
    if (target.hasClass('loading')) {
        target.loadingOverlay('remove');
    } else {
        target.loadingOverlay();
    };
}

var controlIds = [];

//-- Approval Level TextBox Change.
function ApprovalLevelTextBoxChange(controlConfig, pageConfig)
{
    var ControlConfig = controlConfig;
    var PageConfig = pageConfig;

    this.onchange = function () {
        var target = $('#target');
        if (target.hasClass('loading')) {
            target.loadingOverlay('remove');
        } else {
            target.loadingOverlay();
        };
        var control = document.getElementById(ControlConfig.ClientID);
        var formfieldSet = document.getElementById("form-fieldSet");

        //-- If User changes the Textbox and if already the Row added means then we deleted the Existing node and controlconfig.
        removeExistingNodes(control, formfieldSet, controlIds);

        controlIds = [];
        if (control != null) {
            //-- Add new Nodes based on User entered Approval Level
            addNewNodes(formfieldSet, control, controlIds);

            //-- Append New controls to Existing Control Config.
            appendControlCofig(controlIds);
            ModelUpdate = PageConfig;
        }
        control.oldValue = control.value;
        if (target.hasClass('loading')) {
            target.loadingOverlay('remove');
        } else {
            target.loadingOverlay();
        };
    }

    var addNewNodes = function (formfieldSet, control, controlIds) {
        for (var i = 1; i <= parseInt(control.value) ; i++) {
            var div = createElement("div", ("ApprovalLevelRow" + i), [{ name: "class", value: "row" }]);
            appendInnerHtml(div, '', controlIds, i);
            var legend = createElement("LEGEND", ("Level" + i), [], ('Level ' + i));
            formfieldSet.appendChild(legend);
            formfieldSet.appendChild(div);
        }
        select2ComboBoxInit(controlIds);
    }

    var createElement = function (tagName, elementId, elementAttribute, content) {
        var element = document.createElement(tagName);
        element.id = elementId;
        if (elementAttribute.length > 0)
            element.setAttribute(elementAttribute[0].name, elementAttribute[0].value);
        if (content != '' && content != undefined)
            element.innerHTML = content;
        return element;
    }

    var appendInnerHtml = function (element, controlStr, controlIds, i) {
        controlStr += '<section class="col col-xs-6 col-sm-6 col-md-3" id="' + PageConfig.HTMLPageID + '_' + (i + 2) + '211"><label class="label" id="' + PageConfig.HTMLPageID + '_lblRoleOrUser' + i + '">Role / User</label>';
        controlStr += '<div class="inline-group"><label class="radio"><input type="radio" name="group_' + PageConfig.HTMLPageID + '_RoleOrUser' + i + '" checked = "checked" value="1" /><i></i>Role Wise</label>';
        controlStr += '<label class="radio"><input type="radio" name="group_' + PageConfig.HTMLPageID + '_RoleOrUser' + i + '" value="2" /><i></i>User Wise</label>';
        controlStr += '</div></section>';
        controlStr += '<section class="col col-xs-6 col-sm-6 col-md-3" id="' + PageConfig.HTMLPageID + '_' + (i + 2) + '221">' +
            '<label class="label" id="' + PageConfig.HTMLPageID + '_lblRole' + i + '">Level ' + i + ' Role</label><select id="' + PageConfig.HTMLPageID + '_ddlRole' + i +
            '" style="width:100%" class="select2"><option></option></select></section>';
        controlStr += '<section class="col col-xs-6 col-sm-6 col-md-3" id="' + PageConfig.HTMLPageID + '_' + (i + 2) + '231"><label class="label" id="' + PageConfig.HTMLPageID + '_lblUser' + i + '">Level ' + i + ' User</label><select id="' + PageConfig.HTMLPageID + '_ddlUser' + i +
            '" style="width:100%" class="select2"><option></option></select></section>';
        controlStr += '<section class="col col-xs-6 col-sm-6 col-md-3" id="' + PageConfig.HTMLPageID + '_' + (i + 2) + '241">' +
            '<label class="label" id="' + PageConfig.HTMLPageID + '_lblApproveBy' + i + '">Approve By</label><select id="' + PageConfig.HTMLPageID + '_ddlApproveBy' + i +
            '" style="width:100%" class="select2"><option></option></select></section>';
        controlStr += '<section class="col col-xs-6 col-sm-6 col-md-5" id="' + PageConfig.HTMLPageID + '_' + (i + 2) + '251"><label class="label" id="' + PageConfig.HTMLPageID + '_lblApprovalMode' + i + '">Approval Mode</label><div class="inline-group" id="' +
            PageConfig.HTMLPageID + '_Chk_ApprovalMode' + i + '"></div></section>';
        controlStr += '<section class="col col-xs-6 col-sm-6 col-md-3" id="' + PageConfig.HTMLPageID + '_' + (i + 2) + '261"><label class="checkbox"><input type="checkbox" id="' + PageConfig.HTMLPageID + '_Chk_IsAnonymousUser' + i + '" name="checkbox-inline" /><i></i>Is Anonymous User</label></section>';
        var RoleLoadParamControlList = [PageConfig.HTMLPageID + "_ddlOperationContext"];
        var UserLoadParamControlList = [PageConfig.HTMLPageID + "_ddlOperationContext", PageConfig.HTMLPageID + '_ddlRole' + i];
        var RoleClientSideEventsDict = {"onchange":{"JobList":{"onchange":{"ImplicitRefreshControlDict":{"1":PageConfig.HTMLPageID + '_ddlUser' + i},
                "ExplicitRefreshControlDict":{},
                "RefreshControlServiceURL":"../Profile/GetAllUser",
                "ParametersForRefreshService":[PageConfig.HTMLPageID + "_ddlOperationContext"],
                "ExplicitRefreshNeeded":true,"JobType":"RefreshControlJob"}},
                "EventName":0}};
        controlIds.push({ ClientID: PageConfig.HTMLPageID + '_RoleOrUser' + i, ContainerId: PageConfig.HTMLPageID + '_' + (i + 2) + '211', ControlID: 'RoleOrUser' + i, GetServiceURL: "", ControlTypeName: "RadioButton", LoadParamControlList: [], ClientSideEventsDict: {} });
        //controlIds.push({ ClientID: PageConfig.HTMLPageID + '_lblRole' + i, ContainerId: PageConfig.HTMLPageID + '_3211', ControlID: 'lblRole' + i, GetServiceURL: "", ControlTypeName: "Label", LoadParamControlList: [], ClientSideEventsDict: {} });
        controlIds.push({ ClientID: PageConfig.HTMLPageID + '_ddlRole' + i, ContainerId: PageConfig.HTMLPageID + '_' + (i + 2) + '221', ControlID: 'ddlRole' + i, GetServiceURL: "../Profile/GetAllRole", ControlTypeName: "ComboBox", LoadParamControlList: RoleLoadParamControlList, ClientSideEventsDict: RoleClientSideEventsDict });
        //controlIds.push({ ClientID: PageConfig.HTMLPageID + '_lblUser' + i, ContainerId: PageConfig.HTMLPageID + '_3211', ControlID: 'lblUser' + i, GetServiceURL: "", ControlTypeName: "Label", LoadParamControlList: [], ClientSideEventsDict: {} });
        controlIds.push({ ClientID: PageConfig.HTMLPageID + '_ddlUser' + i, ContainerId: PageConfig.HTMLPageID + '_' + (i + 2) + '231', ControlID: 'ddlUser' + i, GetServiceURL: "../Profile/GetAllUser", ControlTypeName: "ComboBox", LoadParamControlList: UserLoadParamControlList, ClientSideEventsDict: {} });
        //controlIds.push({ ClientID: PageConfig.HTMLPageID + '_lblApproveBy' + i, ContainerId: PageConfig.HTMLPageID + '_3211', ControlID: 'lblApproveBy' + i, GetServiceURL: "", ControlTypeName: "Label", LoadParamControlList: [], ClientSideEventsDict: {} });
        controlIds.push({ ClientID: PageConfig.HTMLPageID + '_ddlApproveBy' + i, ContainerId: PageConfig.HTMLPageID + '_' + (i + 2) + '241', ControlID: 'ddlApproveBy' + i, GetServiceURL: "../Profile/GetApprovalTypesEnum", ControlTypeName: "ComboBox", LoadParamControlList: [], ClientSideEventsDict: {} });
        //controlIds.push({ ClientID: PageConfig.HTMLPageID + '_lblApprovalMode' + i, ContainerId: PageConfig.HTMLPageID + '_3211', ControlID: 'lblApprovalMode' + i, GetServiceURL: "", ControlTypeName: "Label", LoadParamControlList: [], ClientSideEventsDict: {} });
        controlIds.push({ ClientID: PageConfig.HTMLPageID + '_Chk_ApprovalMode' + i, ContainerId: PageConfig.HTMLPageID + '_' + (i + 2) + '251', ControlID: 'Chk_ApprovalMode' + i, GetServiceURL: "../Profile/GetApprovalModeEnum", ControlTypeName: "CheckBoxList", LoadParamControlList: [], ClientSideEventsDict: {} });
        controlIds.push({ ClientID: PageConfig.HTMLPageID + '_Chk_IsAnonymousUser' + i, ContainerId: PageConfig.HTMLPageID + '_' + (i + 2) + '261', ControlID: 'Chk_IsAnonymousUser' + i, GetServiceURL: "", ControlTypeName: "CheckBox", LoadParamControlList: [], ClientSideEventsDict: {} });
        element.innerHTML = controlStr;
    }

    var select2ComboBoxInit = function (controlIds) {
        for (var item in controlIds) {
            if (typeof (controlIds[item]) != 'function' && controlIds[item].ControlTypeName == "ComboBox") {
                $("#" + controlIds[item].ClientID).select2();
            }
        }
    }

    var removeExistingNodes = function (control, formfieldSet, controlIds) {
        //if (document.getElementById(rowId) != null && document.getElementById(rowId) != undefined) {
            for (var i = 0; i < controlIds.length; i++) {
                if (ModelUpdate.ControlGroupConfigLst[0].ControlConfigDict[controlIds[i].ClientID] != null) {
                    if (controlIds[i].ControlTypeName == "ComboBox") {
                        delete ModelUpdate.ControlGroupConfigLst[0].ControlConfigDict[controlIds[i].ClientID];
                        var _ImplicitRefreshControl = ModelUpdate.ControlGroupConfigLst[0].ControlConfigDict[PageConfig.HTMLPageID + "_ddlOperationContext"].ClientSideEventsDict["onchange"].JobList["onchange"].ImplicitRefreshControlDict;
                        for (var item in _ImplicitRefreshControl) {
                            if (_ImplicitRefreshControl[item] == controlIds[i].ClientID)
                                delete ModelUpdate.ControlGroupConfigLst[0].ControlConfigDict[PageConfig.HTMLPageID + "_ddlOperationContext"].ClientSideEventsDict["onchange"].JobList["onchange"].ImplicitRefreshControlDict[item];
                        }
                    }
                    else if (controlIds[i].ControlTypeName == "RadioButton")
                        delete ModelUpdate.ControlGroupConfigLst[0].ControlConfigDict[controlIds[i].ClientID];
                    else if (controlIds[i].ControlTypeName == "CheckBox")
                        delete ModelUpdate.ControlGroupConfigLst[0].ControlConfigDict[controlIds[i].ClientID];
                }
            }
            if (control.oldValue != undefined) {
                for (var i = 0; i < parseInt(control.oldValue) ; i++) {
                    formfieldSet.removeChild(document.getElementById("ApprovalLevelRow" + (i + 1)));
                    formfieldSet.removeChild(document.getElementById("Level" + (i + 1)))
                }
            }
            //else
            //    formfieldSet.removeChild(document.getElementById("ApprovalLevelRow"));
        //}
    }

    var appendControlCofig = function (controlIds) {
        for (var item in controlIds) {
            if (typeof (controlIds[item]) != 'function') {
                if (controlIds[item].ControlTypeName == "ComboBox") {
                    comboBoxControlConfig(item);
                }
                else if (controlIds[item].ControlTypeName == "RadioButton") {
                    radioButtonControlConfig(item);
                }
                else if (controlIds[item].ControlTypeName == "CheckBoxList") {
                    checkBoxControlConfig(item);
                }
                else if (controlIds[item].ControlTypeName == "CheckBox") {
                    checkBoxControlConfig(item);
                }
            }
        }
        for (var item in controlIds) {
            if (typeof (controlIds[item]) != 'function') {
                if (controlIds[item].ControlTypeName == "ComboBox") {
                    loadDataToComboBox(controlIds[item].ClientID, item + 1);
                }
                else if (controlIds[item].ControlTypeName == "RadioButton") {
                    loadRadioButton(controlIds[item].ClientID);
                }
                else if (controlIds[item].ControlTypeName == "CheckBoxList") {
                    if (controlIds[item].GetServiceURL != "")
                        loadCheckBox(controlIds[item].ClientID);
                }
                else if (controlIds[item].ControlTypeName == "CheckBox") {
                    if (controlIds[item].GetServiceURL != "")
                        loadCheckBox(controlIds[item].ClientID);
                }
            }
        }
    }

    var comboBoxControlConfig = function(item)
    {
        PageConfig.ControlGroupConfigLst[0].ControlConfigDict[controlIds[item].ClientID] = {
            "_LoadParamControlList": controlIds[item].LoadParamControlList,
            "ComboTypeName": "DefaultCombo",
            "ComboType": 0,
            "ComboName": 0,
            "Page": 0,
            "Module": 0,
            "comboDefaultSelect": 0,
            "comboDefaultSelectString": "",
            "isStaticListItem": false,
            "DefaultListItem": [], //{ "Selected": true, "Text": "ALL", "Value": "-1", "Id": "-1" }
            "DefaultValue": null,
            "IsFKUpdate": false,
            "ControlID": controlIds[item].ControlID,
            "ClientID": controlIds[item].ClientID,
            "ContainerId": "",
            "ControlTypeName": "ComboBox",
            "Enabled": true,
            "Style": null,
            "GetServiceURL": controlIds[item].GetServiceURL,
            "async": true,
            "LoadParamControlList": controlIds[item].LoadParamControlList,
            "ClientSideEventsDict": controlIds[item].ClientSideEventsDict,
            "Name": null,
            "Value": null
        };
    }

    var radioButtonControlConfig = function (item) {
        PageConfig.ControlGroupConfigLst[0].ControlConfigDict[controlIds[item].ClientID] = {
            "_ValidateControlLst": [controlIds[(parseInt(item) + 1).toString()].ClientID, controlIds[(parseInt(item) + 2).toString()].ClientID, controlIds[(parseInt(item) + 3).toString()].ClientID, controlIds[(parseInt(item) + 4).toString()].ClientID],
            "_LoadParamControlList": [],
            "isStaticListItem": true,
            "DefaultListItem": [{ "Selected": true, "Text": "Role Wise", "Value": "1", "Id": "1" }, { "Selected": false, "Text": "User Wise", "Value": "2", "Id": "2" }],
            "ValidateControlLst": [controlIds[(parseInt(item) + 1).toString()].ClientID, controlIds[(parseInt(item) + 2).toString()].ClientID, controlIds[(parseInt(item) + 3).toString()].ClientID, controlIds[(parseInt(item) + 4).toString()].ClientID],
            "TextAlign": 0,
            "Checked": false,
            "RadioButtonTypeName": "Default",
            "RadioButtonType": 0,
            "IsFKUpdate": false,
            "ControlID": controlIds[item].ControlID,
            "ClientID": controlIds[item].ClientID,
            "ContainerId": controlIds[item].ContainerId,
            "ControlTypeName": "RadioButton",
            "Enabled": true,
            "Style": null,
            "GetServiceURL": null,
            "async": false,
            "LoadParamControlList": [],
            "ClientSideEventsDict": { "onchange": { "JobList": { "onchange": { "CustomJobFunctionName": "RoleUserWiseChange", "JobType": "CustomJob" } }, "EventName": 0 } },
            "Name": null,
            "Value": null
        };
    }

    var checkBoxControlConfig = function (item) {
        PageConfig.ControlGroupConfigLst[0].ControlConfigDict[controlIds[item].ClientID] = {
            "_LoadParamControlList": [],
            "isStaticListItem": controlIds[item].GetServiceURL == "" ? true : false,
            "DefaultListItem": null,
            "Checked": false,
            "CheckBoxTypeName": controlIds[item].ControlTypeName == "CheckBoxList" ? "CheckBoxList" : "Default",
            "CheckBoxType": controlIds[item].ControlTypeName == "CheckBoxList" ? 1 : 0,
            "IsFKUpdate": false,
            "ControlID": controlIds[item].ControlID,
            "ClientID": controlIds[item].ClientID,
            "ContainerId": controlIds[item].ClientID,
            "ControlTypeName": "CheckBox",
            "Enabled": true,
            "Style": null,
            "GetServiceURL": controlIds[item].GetServiceURL,
            "async": true,
            "LoadParamControlList": [],
            "ClientSideEventsDict": {},
            "Name": null,
            "Value": null
        };
    }

    var loadDataToComboBox = function (ClientID, index) {
        var _DynamicPage = new DynamicPage(PageConfig);
        _DynamicPage.LoadComboboxControl(PageConfig.ControlGroupConfigLst[0].ControlConfigDict[ClientID]);

        var _ImplicitRefreshControl = PageConfig.ControlGroupConfigLst[0].ControlConfigDict[PageConfig.HTMLPageID + "_ddlOperationContext"].ClientSideEventsDict["onchange"].JobList["onchange"].ImplicitRefreshControlDict;
        var RefreshControllength = getLengthImplicitRefreshControl(_ImplicitRefreshControl);

        PageConfig.ControlGroupConfigLst[0].ControlConfigDict[PageConfig.HTMLPageID + "_ddlOperationContext"].ClientSideEventsDict["onchange"].JobList["onchange"].ImplicitRefreshControlDict[RefreshControllength + 1] = ClientID;
    }

    var loadRadioButton = function (ClientID) {
        var _DynamicPage = new DynamicPage(PageConfig);
        _DynamicPage.LoadRadioButtonControl(PageConfig.ControlGroupConfigLst[0].ControlConfigDict[ClientID]);

        //var _ImplicitRefreshControl = PageConfig.ControlConfigDict["DcApprovalPage_Master_Default_ddlOperationContext"].ClientSideEventsDict["onchange"].JobList["onchange"].ImplicitRefreshControlDict;
        //var RefreshControllength = getLengthImplicitRefreshControl(_ImplicitRefreshControl);

        //PageConfig.ControlConfigDict["DcApprovalPage_Master_Default_ddlOperationContext"].ClientSideEventsDict["onchange"].JobList["onchange"].ImplicitRefreshControlDict[RefreshControllength + 1] = ClientID;
    }

    var loadCheckBox = function (ClientID) {
        var _DynamicPage = new DynamicPage(PageConfig);
        _DynamicPage.LoadCheckBoxControl(PageConfig.ControlGroupConfigLst[0].ControlConfigDict[ClientID]);
    }

    var getLengthImplicitRefreshControl = function (_ImplicitRefreshControl)
    {
        var RefreshControllength = 0;
        for (var item in _ImplicitRefreshControl) {
            if (typeof (_ImplicitRefreshControl[item]) != 'function')
                RefreshControllength += 1;
        }
        return RefreshControllength;
    }
}

//-- User Name and Password TextBox KeyPress.
function TextBoxkeypress(controlConfig, pageConfig) {
    var ControlConfig = controlConfig;
    var PageConfig = pageConfig;

    this.onkeypress = function () {
        var keycode = KeyEvent.keyCode ? KeyEvent.keyCode : KeyEvent.charCode;

        if (keycode >= 48 && keycode <= 57)
            return true;
        else if ((keycode >= 63 && keycode <= 90) || (keycode >= 97 && keycode <= 122))
            return true;
        else if (keycode == 95 || keycode == 45 || keycode == 46 || keycode == 47 || keycode == 60 || keycode == 62 || keycode == 13 || keycode == 8 || keycode == 9)
            return true;
        else if ((keycode >= 36 && keycode <= 38) || (keycode >= 40 && keycode <= 43) || keycode == 32 || keycode == 61 || keycode == 33 || keycode == 58)
            return true;
        else
            return false;
        var target = $('#target');
        target.loadingOverlay('remove');
    }
}

//-- Role / User Wise Change.
function RoleUserWiseChange(controlConfig, pageConfig)
{
    var ControlConfig = controlConfig;
    var PageConfig = pageConfig;

    this.onchange = function () {
        var control = document.getElementsByName("group_" + ControlConfig.ClientID);
        if (control.item(0).checked) {
            $("#s2id_" + ControlConfig.ValidateControlLst[1]).parent().addClass("hide");
        }
        else {
            $("#s2id_" + ControlConfig.ValidateControlLst[1]).parent().removeClass("hide");
        }
    }
}

//-- View Records Wise Change.
function RecDisplayChange(controlConfig, pageConfig) {
    var ControlConfig = controlConfig;
    var PageConfig = pageConfig;

    this.onchange = function () {
        var control = document.getElementsByName("group_" + ControlConfig.ClientID);
        if (control.item(0).checked) {
            for (var itr = 0; itr < ControlConfig.ValidateControlLst.length; itr++) {
                if (pageConfig.ControlConfigDict != undefined) {
                    if (pageConfig.ControlConfigDict[ControlConfig.ValidateControlLst[itr]].ControlTypeName == "RadioButton") {
                        $('input[name=group_' + ControlConfig.ValidateControlLst[itr] + ']').parent().parent().parent().removeClass("hide");
                    }
                }
                else {
                    if (pageConfig.ControlGroupConfigLst != undefined && pageConfig.ControlGroupConfigLst.length > 0 && pageConfig.ControlGroupConfigLst[0].ControlConfigDict[ControlConfig.ValidateControlLst[itr]].ControlTypeName == "RadioButton") {
                        $('input[name=group_' + ControlConfig.ValidateControlLst[itr] + ']').parent().parent().parent().removeClass("hide");
                    }
                }
            }
        }
        else if (control.item(1).checked || control.item(2).checked) {
            for (var itr = 0; itr < ControlConfig.ValidateControlLst.length; itr++) {
                if (pageConfig.ControlConfigDict != undefined) {
                    if (pageConfig.ControlConfigDict[ControlConfig.ValidateControlLst[itr]].ControlTypeName == "RadioButton") {
                        $('input[name=group_' + ControlConfig.ValidateControlLst[itr] + ']').parent().parent().parent().addClass("hide");
                    }
                }
                else {
                    if (pageConfig.ControlGroupConfigLst != undefined && pageConfig.ControlGroupConfigLst.length > 0 && pageConfig.ControlGroupConfigLst[0].ControlConfigDict[ControlConfig.ValidateControlLst[itr]].ControlTypeName == "RadioButton") {
                        $('input[name=group_' + ControlConfig.ValidateControlLst[itr] + ']').parent().parent().parent().addClass("hide");
                    }
                }
            }
        }
    }
}

function DcDimensionChange(controlConfig, pageConfig) {
    var ControlConfig = controlConfig;
    var PageConfig = pageConfig;

    this.onchange = function () {
        var DynamicPageObj = new DynamicPage(pageConfig)
        var control = document.getElementById(ControlConfig.ClientID);
        var ddlUnit = document.getElementById(pageConfig.HTMLPageID + "_ddlUnit");

        for (var itr = 0; itr < ControlConfig.ValidateControlLst.length; itr++) {
            var controlconfig = PageConfig.ControlGroupConfigLst[0].ControlConfigDict[ControlConfig.ValidateControlLst[itr]];
            if (controlconfig != undefined && controlconfig != null && controlconfig.ControlTypeName == 'ComboBox') {
                if (control.value == '203' || control.value == '213' || control.value == '205') {
                    $(ddlUnit).parent().removeClass("hide");
                    controlconfig.GetServiceURL = "../Profile/GetAllChildByTypeFilterByParent";
                    if (control.value == '205')
                        controlconfig.ComboDATType = 204;
                    DynamicPageObj.LoadControlsWithData(controlconfig);
                }
                else {
                    $(ddlUnit).parent().addClass("hide");
                    controlconfig.GetServiceURL = "../Profile/GetAllPlace";
                    DynamicPageObj.LoadControlsWithData(controlconfig);
                }
                var label = $("#" + controlconfig.ClientID).parent().find(".label");
                if (label != undefined && label != null && label.length) {
                    if (control.options[control.selectedIndex] != undefined)
                        label[0].innerHTML = control.options[control.selectedIndex].text;
                }
            }
            else if(controlconfig != undefined && controlconfig != null) {
                var label = document.getElementById(ControlConfig.ValidateControlLst[itr]);
                if (label != undefined && label != null) {
                    if (control.options[control.selectedIndex] != undefined)
                        label.innerHTML = control.options[control.selectedIndex].text;
                }
            }
        }
    }
}

//-- Dash Board Smart Widget Load
function DashBoardSmartWidgetLoad()
{
    this.WidgetType = "";
    this.index = 0;
    this.args = null;
    this.ControlId = "";
    this.NameKey = "";
    var myInstance = this;

    this.onDashBoardSmartWidgetLoad = function (Url, divId, spanId, IdList) {
        $.ajax({
            url: Url,
            contentType: 'application/json; charset=utf-8',
            type: 'POST',
            dataType: 'json',
            //data: parameterToLoadData,
            async: true,
            success: function (response) {
                result = response;
                if (document.getElementById(spanId) != null && document.getElementById(spanId) != undefined) {
                    if ($("#" + spanId).hasClass("easy-pie-chart")) {
                        //document.getElementById(spanId).setAttribute("data-percent", (parent.Number(result[1]) / 100 * 100) + 1);
                        if ($("#" + spanId + " span").length > 0)
                            $("#" + spanId + " span")[0].outerHTML = result[1];
                        if (IdList.length > 0) {
                            if (document.getElementById(IdList[0]) != undefined && document.getElementById(IdList[0]) != null)
                                document.getElementById(IdList[0]).innerHTML += result[2]["DCCount"];
                            if (document.getElementById(IdList[1]) != undefined && document.getElementById(IdList[1]) != null)
                                document.getElementById(IdList[1]).innerHTML += result[2]["NCCount"];
                        }
                    }
                    else {
                        document.getElementById(spanId).innerHTML = document.getElementById(spanId).innerHTML.replace("0", "") + result[1];
                        //document.getElementById(spanId).innerHTML = result[1];
                        if (IdList != undefined && IdList.length > 0) {
                            if (document.getElementById(IdList[0]) != undefined && document.getElementById(IdList[0]) != null)
                                document.getElementById(IdList[0]).innerHTML += result[2]["DCCount"];
                            if (document.getElementById(IdList[1]) != undefined && document.getElementById(IdList[1]) != null)
                                document.getElementById(IdList[1]).innerHTML += result[2]["NCCount"];
                        }
                    }
                }
                var plotValues = "";
                if (result[0].length > 0) {
                    for (var itrcnt = 0; itrcnt < result[0].length; itrcnt++) {
                        if (plotValues == "")
                            plotValues = result[0][itrcnt].yAxisValue.toString();
                        else
                            plotValues = plotValues + ", " + result[0][itrcnt].yAxisValue.toString();
                    }
                }
                else
                    plotValues = "0,0,0,0,0,0,0";
                if (document.getElementById(divId) != null && document.getElementById(divId) != undefined)
                    document.getElementById(divId).innerHTML = plotValues;

                if (document.getElementById(spanId) != null && document.getElementById(spanId) != undefined) {
                    if ($("#" + spanId).hasClass("easy-pie-chart")) {
                        sparklineChartInitialize(divId);
                        //easypiechartInitialize(spanId);
                    }
                    else
                        sparklineChartInitialize(divId);
                }
            },
            error: function (result) {
                ShowMessage("AjaxError.", 4);
                removeLoadingPan(divId);
            }
        });
    }

    this.onDashBoardFlightWiseWidgetLoad = function (Url, divId) {
        $.ajax({
            url: Url,
            contentType: 'application/json; charset=utf-8',
            type: 'POST',
            dataType: 'json',
            //data: parameterToLoadData,
            async: true,
            success: function (response) {
                result = response;

                var innerHtml = "";
                if (document.getElementById(divId) != null && document.getElementById(divId) != undefined) {
                    var div = document.getElementById(divId);
                    for (var i = 0; i < div.childNodes.length; i) {
                        document.getElementById(divId).removeChild(div.childNodes[i]);
                    }
                }
                if (result.length > 0) {
                    for (var itrcnt = 0; itrcnt < result.length; itrcnt++) {
                        //var element = document.createElement("div");
                        //element.setAttribute("class", "slider-content");
                        if (result[itrcnt].DCCount > 0) {
                            innerHtml += '<div class="slider-content">' + ' <div class="silder-head"><i class="fa fa-lg fa-plane"></i> ' + result[itrcnt].Airline + '</div> ' +
                                    '<div class="tbl"> <div class="date"> ' + result[itrcnt].DCDate + '</div>' +
                            '<div class="count">' +
                            '<div>Total Records: <strong>' + result[itrcnt].DCCount + '</strong></div>' +
                            '<div>NC Count: <strong>' + result[itrcnt].NCCount + '</strong></div>' +
                            '</div></div></div>';
                            //element.innerHTML = innerHtml;
                        }
                    }
                }
                else {
                    innerHtml = '<div class="slider-content">' +
                            ' <div class="silder-head"><i class="fa fa-lg fa-plane"></i> Airline </div> ' +
                            '<div class="tbl"> ' +
                            '<div class="date"> ' + new Date().getDate().toString()+"-"+(new Date().getMonth()+1).toString()+"-"+new Date().getFullYear().toString() + '</div>' +
                    '<div class="count">' +
                    '<div>Total Records: <strong>0</strong></div>' +
                    '<div>NC Count: <strong>0</strong></div>' +
                    '</div></div></div>';
                }
                if (document.getElementById(divId) != null && document.getElementById(divId) != undefined)
                    document.getElementById(divId).innerHTML = innerHtml;
                myInstance.sliderInitialize(divId);
            },
            error: function (result) {
                ShowMessage("AjaxError.", 4);
                removeLoadingPan(divId);
            }
        });
    }

    this.onLoadDashBoardSmartWidget = function (Url) {
        myInstance.args = {
            success: onLoadDashBoardSmartWidgetSuccess,
            error: onLoadDashBoardSmartWidgetError,
            sender: this
        }
        aSyncAjaxCall(Url);
    }

    this.onLoadJustGaugeWidget = function (options) {
        var JustGaugeWidget = new JustGage(options);
    }

    this.onLoadJqueryGaugeWidget = function (ConrtrolId, options, Value) {
        var GaugeControl = $("#" + ConrtrolId);
        if (GaugeControl != undefined && GaugeControl != null && GaugeControl.length > 0)
            GaugeControl.gauge(options).gauge('setValue', Value);
    }

    var onLoadDashBoardSmartWidgetSuccess = function (sender, response) {
        if (myInstance.WidgetType.toLowerCase() == "processwise") {
            ProcessWiseWidgetLoad(myInstance.ControlId, response);
        }
        else if (myInstance.WidgetType.toLowerCase() == "activeuser") {
            WellWidgetWithDivLoad(myInstance.ControlId, response, myInstance.index)
        }
        else
            WellWidgetWithDivLoad(myInstance.ControlId, response, myInstance.index)
        removeLoadingPan(myInstance.ControlId);
    }

    var onLoadDashBoardSmartWidgetError = function (sender, Request, textStatus, errorThrown) {
        ShowMessage(errorThrown, 4);
        removeLoadingPan(myInstance.ControlId);
    }

    var ProcessWiseWidgetLoad = function (ControlId, response) {
        var result = response;
        if (document.getElementById(ControlId) != null && document.getElementById(ControlId) != undefined) {
            var div = document.getElementById(ControlId);
            if (div != undefined && div != null && result != undefined && result != null && result.length > 0) {
                var articleChilldren = $(div).find("article");
                if (articleChilldren.length > 0) {
                    for (var i = 0; i < articleChilldren.length; i++) {
                        var sparklineDiv = $(articleChilldren[i]).find(".sparkline");
                        var DCcountSpan = $(articleChilldren[i]).find(".well-count");
                        var NCcountSpan = $(articleChilldren[i]).find(".nc-count");
                        var OBScountSpan = $(articleChilldren[i]).find(".obs-count");
                        if (sparklineDiv.length > 0) {
                            var datewiselst = result[1].Value[i + 1];
                            if (datewiselst != undefined && datewiselst != null && datewiselst.length > 0) {
                                var sparklineinnerHtml = "";
                                for (var itr = 0; itr < datewiselst.length; itr++) {
                                    if (sparklineinnerHtml == "")
                                        sparklineinnerHtml = datewiselst[itr].DCCount + ":" + datewiselst[itr].NCCount;
                                    else
                                        sparklineinnerHtml = sparklineinnerHtml + ", " + datewiselst[itr].DCCount + ":" + datewiselst[itr].NCCount;
                                }
                                if (sparklineinnerHtml != "")
                                    sparklineDiv[0].innerHTML = sparklineinnerHtml;
                                else
                                    sparklineDiv[0].innerHTML = "0:0, 0:0, 0:0, 0:0, 0:0, 0:0, 0:0";
                            }
                            else if (datewiselst != undefined && datewiselst != null && datewiselst.length == 0) {
                                sparklineDiv[0].innerHTML = "0:0, 0:0, 0:0, 0:0, 0:0, 0:0, 0:0";
                            }
                            else
                                sparklineDiv[0].innerHTML = "0:0, 0:0, 0:0, 0:0, 0:0, 0:0, 0:0";
                            sparklineChartInitialize(sparklineDiv);
                        }
                        if (DCcountSpan.length > 0) {
                            if (result[0].Value.length > 0 && result[0].Value[i] != undefined && result[0].Value[i] != null)
                                DCcountSpan[0].innerHTML = result[0].Value[i].DCCount;
                        }
                        if (NCcountSpan.length > 0) {
                            var spanNC = NCcountSpan.find("span");
                            if (spanNC.length > 0) {
                                if (result[0].Value.length > 0 && result[0].Value[i] != undefined && result[0].Value[i] != null)
                                    spanNC[0].innerHTML = result[0].Value[i].NCCount;
                            }
                        }
                        if (OBScountSpan.length > 0) {
                            var spanNC = OBScountSpan.find("span");
                            if (spanNC.length > 0) {
                                if (result[0].Value.length > 0 && result[0].Value[i] != undefined && result[0].Value[i] != null)
                                    spanNC[0].innerHTML = result[0].Value[i].ObservationCount;
                            }
                        }
                    }
                }
            }
        }
    }

    var WellWidgetWithDivLoad = function (ControlId, response, index) {
        if (document.getElementById(ControlId) != null && document.getElementById(ControlId) != undefined) {
            var div = document.getElementById(ControlId);
            if (div != undefined && div != null && response != undefined && response != null && response.length > 0 && index >= 0 && index < response.length) {
                var aleft = $(div).find("a.left");
                var aright = $(div).find("a.right");
                if (myInstance.WidgetType.toLowerCase() == "activeuser") {
                    ActiveUserWiseWidgetLoad(div, response, index);
                }
                else {
                    EquipmentWiseWidgetLoad(div, response, index);
                }
                if (div.DivIndex == undefined || div.DivIndex == null) {
                    if (aleft.length > 0) {
                        aleft.click(function () {
                            WellWidgetWithDivLoad(myInstance.ControlId, response, (div.DivIndex - 1));
                        });
                    }
                    if (aright.length > 0) {
                        aright.click(function () {
                            WellWidgetWithDivLoad(myInstance.ControlId, response, (div.DivIndex + 1));
                        });
                    }
                }
                div.DivIndex = index;
            }
        }
    }

    var EquipmentWiseWidgetLoad = function (parentElement, response, index) {
        if (index >= 0 && index < response.length) {
            var h4element = $(parentElement).find("h4");
            var empnameelement = $(parentElement).find(".empname");
            var DCcountSpan = $(parentElement).find(".font-xl");
            var NCcountSpan = $(parentElement).find(".label-danger");
            var OBScountSpan = $(parentElement).find(".label-warning");
            if (h4element.length > 0) {
                if (response[index][myInstance.NameKey] != undefined && response[index][myInstance.NameKey] != null) {
                    if (response[index][myInstance.NameKey] == "")
                        h4element[0].innerHTML = "</br>";
                    else
                        h4element[0].innerHTML = response[index][myInstance.NameKey];
                }
                else
                    h4element[0].innerHTML = '';
            }
            if (empnameelement.length > 0) {
                if (response[index][myInstance.NameKey] != undefined && response[index][myInstance.NameKey] != null) {
                    if (response[index][myInstance.NameKey] == "")
                        empnameelement[0].innerHTML = "</br>";
                    else
                        empnameelement[0].innerHTML = response[index][myInstance.NameKey];
                }
                else
                    empnameelement[0].innerHTML = '';
            }
            if (DCcountSpan.length > 0) {
                if (response[index] != undefined && response[index] != null) {
                    if (response[index].DCCount != undefined && response[index].DCCount != null)
                        DCcountSpan[0].innerHTML = response[index].DCCount;
                }
                else
                    DCcountSpan[0].innerHTML = '0';
            }
            if (NCcountSpan.length > 0) {
                var spanNC = NCcountSpan.find("span");
                if (spanNC.length > 0) {
                    if (response[index] != undefined && response[index] != null) {
                        if (response[index].NCCount != undefined && response[index].NCCount != null)
                            spanNC[0].innerHTML = response[index].NCCount;
                    }
                    else
                        spanNC[0].innerHTML = '0';
                }
            }
            if (OBScountSpan.length > 0) {
                var spanNC = OBScountSpan.find("span");
                if (spanNC.length > 0) {
                    if (response[index] != undefined && response[index] != null) {
                        if (response[index].ObservationCount != undefined && response[index].ObservationCount != null)
                            spanNC[0].innerHTML = response[index].ObservationCount;
                    }
                    else
                        spanNC[0].innerHTML = '0';
                }
            }
        }
    }

    var ActiveUserWiseWidgetLoad = function (parentElement, response, index) {
        if (index >= 0 && index < response.length) {
            var h4element = $(parentElement).find("h4");
            var DownloadSpan = $(parentElement).find(".font-xl");
            var UploadSpan = $(parentElement).find(".label-danger");
            var UpgradeSpan = $(parentElement).find(".label-warning");
            if (h4element.length > 0) {
                if (response[index][myInstance.NameKey] != undefined && response[index][myInstance.NameKey] != null) {
                    if (response[index][myInstance.NameKey] == "")
                        h4element[0].innerHTML = "</br>";
                    else
                        h4element[0].innerHTML = response[index][myInstance.NameKey];
                }
                else
                    h4element[0].innerHTML = "</br>";
            }

            if (response[index].OperationalCategoryLogSummaryResponceLst != undefined && response[index].OperationalCategoryLogSummaryResponceLst != null) {
                var _OperationalCategoryLogSummaryLst = response[index].OperationalCategoryLogSummaryResponceLst;
                var internalFlag = [];
                for (var itr = 0; itr < _OperationalCategoryLogSummaryLst.length; itr++) {
                    if (_OperationalCategoryLogSummaryLst[itr].OperationLogCategoryEnumId == "2") {
                        DownloadSpan[0].innerHTML = _OperationalCategoryLogSummaryLst[itr].Count;
                        internalFlag.push(2);
                    }
                    if (_OperationalCategoryLogSummaryLst[itr].OperationLogCategoryEnumId == "3") {
                        var spanUpload = UploadSpan.find("span");
                        if (spanUpload.length > 0) {
                            spanUpload[0].innerHTML = _OperationalCategoryLogSummaryLst[itr].Count;
                            internalFlag.push(3);
                        }
                    }
                    if (_OperationalCategoryLogSummaryLst[itr].OperationLogCategoryEnumId == "5") {
                        var spanUpgrade = UpgradeSpan.find("span");
                        if (spanUpgrade.length > 0) {
                            spanUpgrade[0].innerHTML = _OperationalCategoryLogSummaryLst[itr].Count;
                            internalFlag.push(5);
                        }
                    }
                }
                for (var itr = 0; itr < internalFlag.length; itr++) {
                    if (internalFlag.indexOf(2) == -1)
                        DownloadSpan[0].innerHTML = "0";
                    else if (internalFlag.indexOf(3) == -1) {
                        var spanUpload = UploadSpan.find("span");
                        if (spanUpload.length > 0) {
                            spanUpload[0].innerHTML = "0";
                        }
                    }
                    else if (internalFlag.indexOf(5) == -1) {
                        var spanUpgrade = UpgradeSpan.find("span");
                        if (spanUpgrade.length > 0) {
                            spanUpgrade[0].innerHTML = "0";
                        }
                    }
                }
            }
        }
    }

    var aSyncAjaxCall = function (Url) {
        var result;
        $.ajax({
            url: Url,
            contentType: 'application/json; charset=utf-8',
            type: 'POST',
            dataType: 'json',
            async: true,
            success: function (response) {
                result = response;
                if (myInstance.args != null && myInstance.args.success != null && myInstance.args.success != "" && navigator.onLine) {
                    myInstance.args.success(myInstance.args.sender, response)
                }
                else if (navigator != undefined && navigator != null && !navigator.onLine) {
                    ShowMessage("IN-ER-ALP-001 :: Please Check Your Internet Connectivity", 4);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                if (myInstance.args != null && myInstance.args.error != null && myInstance.args.error != "" && navigator.onLine) {
                    myInstance.args.error(myInstance.args.sender, XMLHttpRequest, textStatus, errorThrown);
                }
                else if (navigator != undefined && navigator != null && !navigator.onLine) {
                    ShowMessage("IN-ER-ALP-001 :: Please Check Your Internet Connectivity", 4);
                }
            }
        });
        return result;
    }

    var easypiechartInitialize = function (divId)
    {
        var $this = $("#" + divId);
        var barColor = $this.css('color') || $this.data('pie-color'), trackColor = $this.data('pie-track-color') || '#eeeeee', size = parseInt($this.data('pie-size')) || 25;
        $this.easyPieChart({
            barColor: barColor,
            trackColor: trackColor,
            scaleColor: false,
            lineCap: 'butt',
            lineWidth: parseInt(size / 8.5),
            animate: 1500,
            rotate: -90,
            size: size,
            onStep: function (value) {
                this.$el.find('span').text(~~value);
            }
        });
    }

    this.sliderInitialize = function (divId) {
        var mct1_Options = {
            sliderId: divId,
            direction: "horizontal",
            scrollInterval: 3400,
            scrollDuration: 100,
            hoverPause: true,
            autoAdvance: true,
            scrollByEachThumb: true,
            circular: true,
            largeImageSlider: null,
            inSyncWithLargeImageSlider: true,
            license: "mylicense"
        };
        ThumbnailSlider(mct1_Options);
        //thumbnailSlider.reload();
    }

    var sparklineChartInitialize = function (divId)
    {
        var $this = typeof (divId) == 'string' ? $("#" + divId) : $(divId);
        var sparklineType = $this.data('sparkline-type') || 'bar';

        // BAR CHART
        if (sparklineType == 'bar') {

            var barColor = $this.data('sparkline-bar-color') || $this.css('color') || '#0000f0', sparklineHeight = $this.data('sparkline-height') || '26px', sparklineBarWidth = $this.data('sparkline-barwidth') || 5, sparklineBarSpacing = $this.data('sparkline-barspacing') || 2, sparklineNegBarColor = $this.data('sparkline-negbar-color') || '#A90329', sparklineStackedColor = $this.data('sparkline-barstacked-color') || ["#A90329", "#0099c6", "#98AA56", "#da532c", "#4490B1", "#6E9461", "#990099", "#B4CAD3"];

            $this.sparkline('html', {
                type: 'bar',
                barColor: barColor,
                type: sparklineType,
                height: sparklineHeight,
                barWidth: sparklineBarWidth,
                barSpacing: sparklineBarSpacing,
                stackedBarColor: sparklineStackedColor,
                negBarColor: sparklineNegBarColor,
                zeroAxis: 'false'
            });

        }

        //LINE CHART
        if (sparklineType == 'line') {

            var sparklineHeight = $this.data('sparkline-height') || '20px', sparklineWidth = $this.data('sparkline-width') || '90px', thisLineColor = $this.data('sparkline-line-color') || $this.css('color') || '#0000f0', thisLineWidth = $this.data('sparkline-line-width') || 1, thisFill = $this.data('fill-color') || '#c0d0f0', thisSpotColor = $this.data('sparkline-spot-color') || '#f08000', thisMinSpotColor = $this.data('sparkline-minspot-color') || '#ed1c24', thisMaxSpotColor = $this.data('sparkline-maxspot-color') || '#f08000', thishighlightSpotColor = $this.data('sparkline-highlightspot-color') || '#50f050', thisHighlightLineColor = $this.data('sparkline-highlightline-color') || 'f02020', thisSpotRadius = $this.data('sparkline-spotradius') || 1.5;
            thisChartMinYRange = $this.data('sparkline-min-y') || 'undefined', thisChartMaxYRange = $this.data('sparkline-max-y') || 'undefined', thisChartMinXRange = $this.data('sparkline-min-x') || 'undefined', thisChartMaxXRange = $this.data('sparkline-max-x') || 'undefined', thisMinNormValue = $this.data('min-val') || 'undefined', thisMaxNormValue = $this.data('max-val') || 'undefined', thisNormColor = $this.data('norm-color') || '#c0c0c0', thisDrawNormalOnTop = $this.data('draw-normal') || false;

            $this.sparkline('html', {
                type: 'line',
                width: sparklineWidth,
                height: sparklineHeight,
                lineWidth: thisLineWidth,
                lineColor: thisLineColor,
                fillColor: thisFill,
                spotColor: thisSpotColor,
                minSpotColor: thisMinSpotColor,
                maxSpotColor: thisMaxSpotColor,
                highlightSpotColor: thishighlightSpotColor,
                highlightLineColor: thisHighlightLineColor,
                spotRadius: thisSpotRadius,
                chartRangeMin: thisChartMinYRange,
                chartRangeMax: thisChartMaxYRange,
                chartRangeMinX: thisChartMinXRange,
                chartRangeMaxX: thisChartMaxXRange,
                normalRangeMin: thisMinNormValue,
                normalRangeMax: thisMaxNormValue,
                normalRangeColor: thisNormColor,
                drawNormalOnTop: thisDrawNormalOnTop

            });

        }

        //PIE CHART
        if (sparklineType == 'pie') {

            var pieColors = $this.data('sparkline-piecolor') || ["#B4CAD3", "#4490B1", "#98AA56", "#da532c", "#6E9461", "#0099c6", "#990099", "#717D8A"], pieWidthHeight = $this.data('sparkline-piesize') || 90, pieBorderColor = $this.data('border-color') || '#45494C', pieOffset = $this.data('sparkline-offset') || 0;

            $this.sparkline('html', {
                type: 'pie',
                width: pieWidthHeight,
                height: pieWidthHeight,
                tooltipFormat: '<span style="color: {{color}}">&#9679;</span> ({{percent.1}}%)',
                sliceColors: pieColors,
                offset: 0,
                borderWidth: 1,
                offset: pieOffset,
                borderColor: pieBorderColor
            });

        }

        //BOX PLOT
        if (sparklineType == 'box') {

            var thisBoxWidth = $this.data('sparkline-width') || 'auto', thisBoxHeight = $this.data('sparkline-height') || 'auto', thisBoxRaw = $this.data('sparkline-boxraw') || false, thisBoxTarget = $this.data('sparkline-targetval') || 'undefined', thisBoxMin = $this.data('sparkline-min') || 'undefined', thisBoxMax = $this.data('sparkline-max') || 'undefined', thisShowOutlier = $this.data('sparkline-showoutlier') || true, thisIQR = $this.data('sparkline-outlier-iqr') || 1.5, thisBoxSpotRadius = $this.data('sparkline-spotradius') || 1.5, thisBoxLineColor = $this.css('color') || '#000000', thisBoxFillColor = $this.data('fill-color') || '#c0d0f0', thisBoxWhisColor = $this.data('sparkline-whis-color') || '#000000', thisBoxOutlineColor = $this.data('sparkline-outline-color') || '#303030', thisBoxOutlineFill = $this.data('sparkline-outlinefill-color') || '#f0f0f0', thisBoxMedianColor = $this.data('sparkline-outlinemedian-color') || '#f00000', thisBoxTargetColor = $this.data('sparkline-outlinetarget-color') || '#40a020';

            $this.sparkline('html', {
                type: 'box',
                width: thisBoxWidth,
                height: thisBoxHeight,
                raw: thisBoxRaw,
                target: thisBoxTarget,
                minValue: thisBoxMin,
                maxValue: thisBoxMax,
                showOutliers: thisShowOutlier,
                outlierIQR: thisIQR,
                spotRadius: thisBoxSpotRadius,
                boxLineColor: thisBoxLineColor,
                boxFillColor: thisBoxFillColor,
                whiskerColor: thisBoxWhisColor,
                outlierLineColor: thisBoxOutlineColor,
                outlierFillColor: thisBoxOutlineFill,
                medianColor: thisBoxMedianColor,
                targetColor: thisBoxTargetColor

            })

        }

        //BULLET
        if (sparklineType == 'bullet') {

            var thisBulletHeight = $this.data('sparkline-height') || 'auto', thisBulletWidth = $this.data('sparkline-width') || 2, thisBulletColor = $this.data('sparkline-bullet-color') || '#ed1c24', thisBulletPerformanceColor = $this.data('sparkline-performance-color') || '#3030f0', thisBulletRangeColors = $this.data('sparkline-bulletrange-color') || ["#d3dafe", "#a8b6ff", "#7f94ff"]

            $this.sparkline('html', {

                type: 'bullet',
                height: thisBulletHeight,
                targetWidth: thisBulletWidth,
                targetColor: thisBulletColor,
                performanceColor: thisBulletPerformanceColor,
                rangeColors: thisBulletRangeColors

            })

        }

        //DISCRETE
        if (sparklineType == 'discrete') {

            var thisDiscreteHeight = $this.data('sparkline-height') || 26, thisDiscreteWidth = $this.data('sparkline-width') || 50, thisDiscreteLineColor = $this.css('color'), thisDiscreteLineHeight = $this.data('sparkline-line-height') || 5, thisDiscreteThrushold = $this.data('sparkline-threshold') || 'undefined', thisDiscreteThrusholdColor = $this.data('sparkline-threshold-color') || '#ed1c24';

            $this.sparkline('html', {

                type: 'discrete',
                width: thisDiscreteWidth,
                height: thisDiscreteHeight,
                lineColor: thisDiscreteLineColor,
                lineHeight: thisDiscreteLineHeight,
                thresholdValue: thisDiscreteThrushold,
                thresholdColor: thisDiscreteThrusholdColor

            })

        }

        //TRISTATE
        if (sparklineType == 'tristate') {

            var thisTristateHeight = $this.data('sparkline-height') || 26, thisTristatePosBarColor = $this.data('sparkline-posbar-color') || '#60f060', thisTristateNegBarColor = $this.data('sparkline-negbar-color') || '#f04040', thisTristateZeroBarColor = $this.data('sparkline-zerobar-color') || '#909090', thisTristateBarWidth = $this.data('sparkline-barwidth') || 5, thisTristateBarSpacing = $this.data('sparkline-barspacing') || 2, thisZeroAxis = $this.data('sparkline-zeroaxis') || false;

            $this.sparkline('html', {

                type: 'tristate',
                height: thisTristateHeight,
                posBarColor: thisBarColor,
                negBarColor: thisTristateNegBarColor,
                zeroBarColor: thisTristateZeroBarColor,
                barWidth: thisTristateBarWidth,
                barSpacing: thisTristateBarSpacing,
                zeroAxis: thisZeroAxis

            })

        }

        //COMPOSITE: BAR
        if (sparklineType == 'compositebar') {

            var sparklineHeight = $this.data('sparkline-height') || '20px', sparklineWidth = $this.data('sparkline-width') || '100%', sparklineBarWidth = $this.data('sparkline-barwidth') || 3, thisLineWidth = $this.data('sparkline-line-width') || 1, thisLineColor = $this.data('sparkline-color-top') || '#ed1c24', thisBarColor = $this.data('sparkline-color-bottom') || '#333333'

            $this.sparkline($this.data('sparkline-bar-val'), {

                type: 'bar',
                width: sparklineWidth,
                height: sparklineHeight,
                barColor: thisBarColor,
                barWidth: sparklineBarWidth
                //barSpacing: 5

            })

            $this.sparkline($this.data('sparkline-line-val'), {

                width: sparklineWidth,
                height: sparklineHeight,
                lineColor: thisLineColor,
                lineWidth: thisLineWidth,
                composite: true,
                fillColor: false

            })

        }

        //COMPOSITE: LINE
        if (sparklineType == 'compositeline') {

            var sparklineHeight = $this.data('sparkline-height') || '20px', sparklineWidth = $this.data('sparkline-width') || '90px', sparklineValue = $this.data('sparkline-bar-val'), sparklineValueSpots1 = $this.data('sparkline-bar-val-spots-top') || null, sparklineValueSpots2 = $this.data('sparkline-bar-val-spots-bottom') || null, thisLineWidth1 = $this.data('sparkline-line-width-top') || 1, thisLineWidth2 = $this.data('sparkline-line-width-bottom') || 1, thisLineColor1 = $this.data('sparkline-color-top') || '#333333', thisLineColor2 = $this.data('sparkline-color-bottom') || '#ed1c24', thisSpotRadius1 = $this.data('sparkline-spotradius-top') || 1.5, thisSpotRadius2 = $this.data('sparkline-spotradius-bottom') || thisSpotRadius1, thisSpotColor = $this.data('sparkline-spot-color') || '#f08000', thisMinSpotColor1 = $this.data('sparkline-minspot-color-top') || '#ed1c24', thisMaxSpotColor1 = $this.data('sparkline-maxspot-color-top') || '#f08000', thisMinSpotColor2 = $this.data('sparkline-minspot-color-bottom') || thisMinSpotColor1, thisMaxSpotColor2 = $this.data('sparkline-maxspot-color-bottom') || thisMaxSpotColor1, thishighlightSpotColor1 = $this.data('sparkline-highlightspot-color-top') || '#50f050', thisHighlightLineColor1 = $this.data('sparkline-highlightline-color-top') || '#f02020', thishighlightSpotColor2 = $this.data('sparkline-highlightspot-color-bottom') || thishighlightSpotColor1, thisHighlightLineColor2 = $this.data('sparkline-highlightline-color-bottom') || thisHighlightLineColor1, thisFillColor1 = $this.data('sparkline-fillcolor-top') || 'transparent', thisFillColor2 = $this.data('sparkline-fillcolor-bottom') || 'transparent';

            $this.sparkline(sparklineValue, {

                type: 'line',
                spotRadius: thisSpotRadius1,

                spotColor: thisSpotColor,
                minSpotColor: thisMinSpotColor1,
                maxSpotColor: thisMaxSpotColor1,
                highlightSpotColor: thishighlightSpotColor1,
                highlightLineColor: thisHighlightLineColor1,

                valueSpots: sparklineValueSpots1,

                lineWidth: thisLineWidth1,
                width: sparklineWidth,
                height: sparklineHeight,
                lineColor: thisLineColor1,
                fillColor: thisFillColor1

            })

            $this.sparkline($this.data('sparkline-line-val'), {

                type: 'line',
                spotRadius: thisSpotRadius2,

                spotColor: thisSpotColor,
                minSpotColor: thisMinSpotColor2,
                maxSpotColor: thisMaxSpotColor2,
                highlightSpotColor: thishighlightSpotColor2,
                highlightLineColor: thisHighlightLineColor2,

                valueSpots: sparklineValueSpots2,

                lineWidth: thisLineWidth2,
                width: sparklineWidth,
                height: sparklineHeight,
                lineColor: thisLineColor2,
                composite: true,
                fillColor: thisFillColor2

            })
        }
    }
}

function LoadingImage() {
    RemoveMessage();
    var target = $(".parentdiv");
    target.removeClass('hide');
    target.find('.preloader-wrapper').addClass('active');
    return target;
}

function RemoveLoadingImage(target) {
    target.addClass('hide');
    target.find('.preloader-wrapper').removeClass('active');
}

function loadingPan(TargetControl) {
    // add the overlay with loading image to the page
    var over = '<div id="' + TargetControl + 'overlay_Widget" class = "overlayLoading">' +
        '<img id="loading_Widget" src="' + GetRelativeUrl("/img/loading.gif") + '">' +
        '<span id="loading_Widget_text">Loading...</span>' +
        '</div>';
    var div = $("#" + TargetControl);
    $(over).appendTo(div);

    // click on the overlay to remove it
    //$('#overlay_Widget').click(function () {
    //    $(this).remove();
    //});

    // hit escape to close the overlay
    //$(document).keyup(function (e) {
    //    if (e.which === 27) {
    //        $('#overlay').remove();
    //    }
    //});
}

function removeLoadingPan(TargetControl) {
    if (typeof (TargetControl) == 'string')
        $('#' + TargetControl + 'overlay_Widget').remove();
}

//--Validation FrameWork.
function ValidationFrameWork(Model) {
    var defaultValue = false;
    var result = {};
    var PageConfig = Model;
    var itrCnt = 0;

    this.validateControl = function () {
        if (PageConfig.ControlConfigDict != undefined) {
            for (var item in PageConfig.ControlConfigDict) {
                if (typeof (PageConfig.ControlConfigDict[item]) != 'function') {
                    this.validateAllControl(PageConfig.ControlConfigDict[item], true);
                }
            }
        }
        else if (PageConfig.ControlGroupConfigLst != undefined)
        {
            for (var item in PageConfig.ControlGroupConfigLst) {
                if (typeof (PageConfig.ControlGroupConfigLst[item]) != 'function') {
                    var ControlConfigDict = PageConfig.ControlGroupConfigLst[item].ControlConfigDict;
                    for (var control in ControlConfigDict) {
                        this.validateAllControl(ControlConfigDict[control], true);
                    }
                }
            }
        }
        if (itrCnt > 0)
            return false;
        else
            return true;
    }
    this.removeValidate = function () {
        if (PageConfig != null && PageConfig != undefined) {
            if (PageConfig.ControlConfigDict != undefined) {
                for (var item in PageConfig.ControlConfigDict) {
                    if (typeof (PageConfig.ControlConfigDict[item]) != 'function') {
                        this.validateAllControl(PageConfig.ControlConfigDict[item], false);
                    }
                }
            }
            else if (PageConfig.ControlGroupConfigLst != undefined) {
                for (var item in PageConfig.ControlGroupConfigLst) {
                    if (typeof (PageConfig.ControlGroupConfigLst[item]) != 'function') {
                        var ControlConfigDict = PageConfig.ControlGroupConfigLst[item].ControlConfigDict;
                        for (var control in ControlConfigDict) {
                            this.validateAllControl(ControlConfigDict[control], false);
                        }
                    }
                }
            }
        }
    }
    this.validateAllControl = function (ControlConfig, validate) {
        if (ControlConfig.ControlTypeName == "TextBox" && ControlConfig.IsMandatory) {
            var element = document.getElementById(ControlConfig.ClientID);
            if (element != undefined && element != null && element.value == "" && validate) {
                //element.required = true;
                element.setAttribute("class", "invalid");
                element.parentNode.setAttribute("class", "input state-error");
                element.onkeyup = onkeyup;
                element.onfocusout = onfocusout;
                if (itrCnt == 0)
                    ShowMessage("MN-RQ-ALP-001 :: Please enter " + ControlConfig.Name, 4);
                itrCnt += 1;
            }
            else {
                element.setAttribute("class", "");
                element.parentNode.setAttribute("class", "input");
                element.onkeyup = null;
                element.onfocusout = null;
            }
        }
        if (ControlConfig.ControlTypeName == "DatePicker" && ControlConfig.IsMandatory) {
            var element = document.getElementById(ControlConfig.ClientID);
            var datePickerSpan = $(element).find('span');
            if (datePickerSpan != undefined && datePickerSpan != null && datePickerSpan.html() == "" && validate) {
                //element.required = true;
                $(element).addClass("invalid");
                if (itrCnt == 0)
                    ShowMessage("MN-RQ-ALP-001 :: Please enter " + ControlConfig.Name, 4);
                itrCnt += 1;
            }
            else {
                $(element).removeClass("invalid");
                element.onkeyup = null;
                element.onfocusout = null;
            }
        }
        else if (ControlConfig.ControlTypeName == "ComboBox" && ControlConfig.IsMandatory && ControlConfig.ComboType == 1) {
            var element = document.getElementById(ControlConfig.ClientID);
            var elementvalidate = true;
            for (var i = 0; i < element.options.length; i++) {
                if (element.options[i].selected) {
                    elementvalidate = false;
                    break;
                }
            }
            if (element != undefined && element != null && element.value == "" && validate && elementvalidate) {
                element.classList.add("state-error");
                if (itrCnt == 0)
                    ShowMessage("MN-RQ-ALP-001 :: Please select " + ControlConfig.Name, 4);
                itrCnt += 1;
            }
            else {
                element.classList.remove("state-error");
            }
        }
        else if (ControlConfig.ControlTypeName == "ComboBox" && ControlConfig.IsMandatory && ControlConfig.ComboType == 0) {
            var element = document.getElementById(ControlConfig.ClientID);
            var elementvalidate = true;
            for (var i = 0; i < element.options.length; i++) {
                if (element.options[i].selected) {
                    elementvalidate = false;
                    break;
                }
            }
            if (element != undefined && element != null && element.value == "" && validate && elementvalidate) {
                element.classList.add("state-error");
                if (itrCnt == 0)
                    ShowMessage("MN-RQ-ALP-001 :: Please select " + ControlConfig.Name, 4);
                itrCnt += 1;
            }
            else {
                element.classList.remove("state-error");
            }
        }
    }
    var onfocusout = function () {
        if (this.value === "") {
            this.setAttribute("class", "invalid");
            this.parentNode.setAttribute("class", "input state-error");
        } else {
            this.setAttribute("class", "");
            this.parentNode.setAttribute("class", "input");
        }
    }
    var onkeyup = function () {
        if (this.value === "") {
            this.setAttribute("class", "invalid");
            this.parentNode.setAttribute("class", "input state-error");
        } else {
            this.setAttribute("class", "");
            this.parentNode.setAttribute("class", "input");
        }
    }
}

//-- Form Save Functions
function Save()
{
    this.GridConfigUrl = "";
    this.GridDataUrl = "";
    this.SaveUrl = "";
    this.SuccsessMessage = "";
    this.ControlId = "";
    this.parameterForGridLoad = "";
    var myInstance = this;
    this.SaveOperation = function (TypeOperation) {
        if (TypeOperation == "ManualFollowUp" || TypeOperation == "ManualFollowUpDetail_HydeHousing") {
            var result = SyncAjaxCall(this.SaveUrl, myInstance.parameterForGridLoad, this.SuccsessMessage);
            if (result == true) {
                GridColumnDataLoad((this.ControlId == "" ? "datatable_ApprovalProf" : this.ControlId), this.GridConfigUrl, this.GridDataUrl, TypeOperation);
            }
        }
        else {
            var _oValidationFrameWork = new ValidationFrameWork(ModelUpdate);
            if (_oValidationFrameWork.validateControl()) {
                var result = SyncAjaxCall(this.SaveUrl, createparameterToLoadData(ModelUpdate), this.SuccsessMessage);
                if (result == true) {
                    GridColumnDataLoad((this.ControlId == "" ? "datatable_ApprovalProf" : this.ControlId), this.GridConfigUrl, this.GridDataUrl, TypeOperation);
                    var _LoadControlData = new LoadControlData(ModelUpdate);
                    if (_LoadControlData.Load != undefined)
                        _LoadControlData.Load();
                    else
                        LoadControlData(ModelUpdate);
                }
            }
        }
    }

    this.Clear = function (TypeOperation) {
        if ($(".SmallBox").length > 0) {
            $(".SmallBox").remove();
        }
        var target = $('#target');
        if (target.hasClass('loading')) {
            target.loadingOverlay('remove');
        } else {
            target.loadingOverlay();
        };
        var delay = 1;
        var oModel;
        setTimeout(function () {
            var _oValidationFrameWork = new ValidationFrameWork(ModelUpdate);
            _oValidationFrameWork.removeValidate();
            GridColumnDataLoad((myInstance.ControlId == "" ? "datatable_ApprovalProf" : myInstance.ControlId), myInstance.GridConfigUrl, myInstance.GridDataUrl, TypeOperation);
            var _LoadControlData = new LoadControlData(ModelUpdate);
            if (_LoadControlData.Load != undefined)
                _LoadControlData.Load();
            else
                LoadControlData(ModelUpdate);
            if (target.hasClass('loading')) {
                target.loadingOverlay('remove');
            } else {
                target.loadingOverlay();
            };
        });
    }

    this.Delete = function (TypeOperation) {
        if ($(".SmallBox").length > 0) {
            $(".SmallBox").remove();
        }
        var target = $('#target');
        if (target.hasClass('loading')) {
            target.loadingOverlay('remove');
        } else {
            target.loadingOverlay();
        };
        if (selected.length > 0) {
            var delay = 1;
            setTimeout(function () {
                var result = SyncAjaxCall(myInstance.SaveUrl, createparameterToLoadData(ModelUpdate), myInstance.SuccsessMessage, myInstance.ErrorMessage);
                if (result == true) {
                    GridColumnDataLoad(myInstance.ControlId, myInstance.GridConfigUrl, myInstance.GridDataUrl, TypeOperation);
                    LoadControlData(ModelUpdate);
                }
                if (target.hasClass('loading')) {
                    target.loadingOverlay('remove');
                } else {
                    target.loadingOverlay();
                };
            }, delay);
        }
        else {
            if ($('#' + myInstance.ControlId).DataTable().fnGetNodes().length == 0) {
                ShowMessage("There are no Records to Delete.", 2);
            }
            else {
                ShowMessage("Please select the Records to Delete.", 3);
            }
            if (target.hasClass('loading')) {
                target.loadingOverlay('remove');
            } else {
                target.loadingOverlay();
            };
        }
    }

    var GridColumnDataLoad = function (controlId, GridConfigUrl, GridDataUrl, TypeOperation) {
        var oTable = $('#' + controlId).DataTable();

        if (ModelUpdate != undefined && ModelUpdate != null) {
            oTable.fnClearTable(true);

            var oTableSetting = $('#' + controlId).DataTable().fnSettings();
            var oModel = null;
            oModel = ModelUpdate;
            if (TypeOperation != "ManualFollowUp") {
                LoadDcGridData(GridConfigUrl, GridDataUrl, oModel, controlId, "");

                oTable.fnDestroy(false);
            }

            if (TypeOperation == "Role" || TypeOperation == "User") {
                var oRoleUserMasterGridInit = new RoleUserMasterGridInit();
                oRoleUserMasterGridInit.GridConfigUrl = GridConfigUrl;
                oRoleUserMasterGridInit.GridDataUrl = GridDataUrl;
                oRoleUserMasterGridInit.lControlId = controlId;
                oRoleUserMasterGridInit.execute();
            }
            else if (TypeOperation == "MasterPageGridControl") {
                var oOneViewDataTableComponent = new OneViewDataTableComponent();
                oOneViewDataTableComponent.Initialize("MasterPageGridControl");
            }
            var tableId = controlId;
            $('<div style="width: 100%; overflow: auto"></div>').append($('#' + tableId)).insertAfter($('#' + tableId + '_wrapper div').first());
        }
        else if (TypeOperation == "ManualFollowUp") {
            $("#tallModal").modal("hide");
            UpdatePlanWiseDetailListGrid();
        }
        else if (TypeOperation == "ManualFollowUpDetail_HydeHousing") {
            $("#tallModal").modal("hide");
            UpdatePlanWiseDetailListGrid_HydeHousing();
        }
    }

    var createparameterToLoadData = function(ModelUpdate)
    {
        var _DynamicPage = null;
        var PageParam = [];
        var parameterToLoadData = null;
        var Model = ModelUpdate;
        if (Model._HTMLPageConfigLst != undefined) {
            for (var i = 0; i < Model._HTMLPageConfigLst.length; i++) {
                var GridLoadParameters = [];
                var model = Model._HTMLPageConfigLst[i];
                _DynamicPage = new DynamicPage(model);
                if (model.ControlConfigDict != undefined) {
                    for (var item in model.ControlConfigDict) {
                        if (model.ControlConfigDict[item].ControlTypeName != "Label")
                            GridLoadParameters.push(model.ControlConfigDict[item].ClientID)
                    }
                    if (PageParam.length == 0)
                        PageParam.push(_DynamicPage.GetLoadParameterList(GridLoadParameters));
                    else
                        PageParam.push(_DynamicPage.GetLoadParameterList(GridLoadParameters));
                }
            }
        }
        else {
            var GridLoadParameters = [];
            _DynamicPage = new DynamicPage(Model);
            if (Model.ControlConfigDict != undefined) {
                for (var item in Model.ControlConfigDict) {
                    if (Model.ControlConfigDict[item].ControlTypeName != "Label")
                        GridLoadParameters.push(Model.ControlConfigDict[item].ClientID)
                }
            }
            else if (Model.ControlConfigDict == undefined) {
                GridLoadParameters = getGridLoadParameters(Model.ControlGroupConfigLst);
            }
            PageParam = _DynamicPage.GetLoadParameterList(GridLoadParameters);
        }
        parameterToLoadData = JSON.stringify(PageParam);
        parameterToLoadData = { request: parameterToLoadData, DATType: ModelUpdate.DATType };
        parameterToLoadData = JSON.stringify(parameterToLoadData);
        return parameterToLoadData;
    }

    var SyncAjaxCall = function (Url, parameterToLoadData, Message) {
        var result;
        $.ajax({
            url: Url,
            contentType: 'application/json; charset=utf-8',
            type: 'POST',
            dataType: 'json',
            data: parameterToLoadData,
            async: false,
            success: function (response) {
                result = response;
                if (result == true)
                    ShowMessage(Message, 1);
                else if (navigator != undefined && navigator != null && !navigator.onLine)
                    ShowMessage("IN-ER-ALP-001 :: Please Check Your Internet Connectivity", 4);
                else
                    ShowMessage(result, 4);
            },
            error: function (result, textStatus, errorThrown) {
                if (navigator != undefined && navigator != null && !navigator.onLine)
                    ShowMessage("IN-ER-ALP-001 :: Please Check Your Internet Connectivity", 4);
                else
                    ShowMessage('IN-ER-OHI-001 :: Error in current operation.', 4);
            }
        });
        return result;
    }
}

//-- Form Dynamic Master Operation Functions
function DynamicMasterOperation() {
    this.GridConfigUrl = "";
    this.GridDataUrl = "";
    this.SaveUrl = "";
    this.SuccsessMessage = "";
    this.ControlId = "";
    var myInstance = this;
    this.SaveOperation = function (TypeOperation) {
        var _oValidationFrameWork = new ValidationFrameWork(ModelUpdate);
        if (_oValidationFrameWork.validateControl()) {
            var result = SyncAjaxCall(this.SaveUrl, createparameterToLoadData(ModelUpdate), this.SuccsessMessage);
            GridColumnDataLoad((myInstance.ControlId == "" ? "datatable_ApprovalProf" : myInstance.ControlId), myInstance.GridConfigUrl, myInstance.GridDataUrl, "MasterPageGridControl");
            return result;
        }
    }

    this.Clear = function (TypeOperation) {
        var _oValidationFrameWork = new ValidationFrameWork(ModelUpdate);
        _oValidationFrameWork.removeValidate();
        GridColumnDataLoad((myInstance.ControlId == "" ? "datatable_ApprovalProf" : myInstance.ControlId), myInstance.GridConfigUrl, myInstance.GridDataUrl, TypeOperation);
        var _LoadControlData = new LoadControlData(ModelUpdate);
        if (_LoadControlData.Load != undefined)
            _LoadControlData.Load();
        else
            LoadControlData(ModelUpdate);
    }

    this.Delete = function (TypeOperation) {
        if (selected.length > 0) {
            var result = SyncAjaxCall(myInstance.SaveUrl, createparameterToLoadData(ModelUpdate), myInstance.SuccsessMessage, myInstance.ErrorMessage);
            if (result == "true") {
                GridColumnDataLoad(myInstance.ControlId, myInstance.GridConfigUrl, myInstance.GridDataUrl, TypeOperation);
                var _LoadControlData = new LoadControlData(ModelUpdate);
                _LoadControlData.Load();
            }
        }
        else {
            if ($('#' + myInstance.ControlId).DataTable().fnGetNodes().length == 0) {
                ShowMessage("IN-WN-AHI-002 :: There are no Records to Delete.", 2);
            }
            else {
                ShowMessage("IN-IN-AHI-002 :: Please select the Records to Delete.", 3);
            }
            if (target.hasClass('loading')) {
                target.loadingOverlay('remove');
            } else {
                target.loadingOverlay();
            };
        }
    }

    var GridColumnDataLoad = function (controlId, GridConfigUrl, GridDataUrl, TypeOperation) {
        var oTable = $('#' + controlId).DataTable();

        if (ModelUpdate != undefined && ModelUpdate != null) {
            oTable.fnClearTable(true);

            var oTableSetting = $('#' + controlId).DataTable().fnSettings();
            var oModel = null;
            oModel = ModelUpdate;
            LoadDcGridData(GridConfigUrl, GridDataUrl, oModel, controlId, "");

            oTable.fnDestroy(false);

            var oGridTableInitialize = new GridTableInitialize();
            if (TypeOperation == "Role")
                oGridTableInitialize.OrgHierRoleGridInit(oModel);
            else if (TypeOperation == "User")
                oGridTableInitialize.OrgHierUserGridInit(oModel);
            else if (TypeOperation == "MasterPageGridControl") {
                var oOneViewDataTableComponent = new OneViewDataTableComponent();
                oOneViewDataTableComponent.Initialize("MasterPageGridControl");
            }
            else {
                var oOneViewDataTableComponent = new OneViewDataTableComponent();
                oOneViewDataTableComponent.Initialize(TypeOperation);
            }
            var tableId = controlId;
            $('<div style="width: 100%; overflow: auto"></div>').append($('#' + tableId)).insertAfter($('#' + tableId + '_wrapper div').first());
        }
    }

    var createparameterToLoadData = function (ModelUpdate) {
        var _DynamicPage = null;
        var PageParam = [];
        var parameterToLoadData = null;
        var Model = ModelUpdate;
        if (Model._HTMLPageConfigLst != undefined) {
            for (var i = 0; i < Model._HTMLPageConfigLst.length; i++) {
                var GridLoadParameters = [];
                var model = Model._HTMLPageConfigLst[i];
                _DynamicPage = new DynamicPage(model);
                if (model.ControlConfigDict != undefined) {
                    for (var item in model.ControlConfigDict) {
                        if (model.ControlConfigDict[item].ControlTypeName != "Label")
                            GridLoadParameters.push(model.ControlConfigDict[item].ClientID)
                    }
                    if (PageParam.length == 0)
                        PageParam.push(_DynamicPage.GetLoadParameterList(GridLoadParameters));
                    else
                        PageParam.push(_DynamicPage.GetLoadParameterList(GridLoadParameters));
                }
            }
        }
        else {
            var GridLoadParameters = [];
            _DynamicPage = new DynamicPage(Model);
            if (Model.ControlConfigDict != undefined) {
                for (var item in Model.ControlConfigDict) {
                    if (Model.ControlConfigDict[item].ControlTypeName != "Label")
                        GridLoadParameters.push(Model.ControlConfigDict[item].ClientID)
                }
            }
            else if (Model.ControlConfigDict == undefined) {
                GridLoadParameters = getGridLoadParameters(Model.ControlGroupConfigLst);
            }
            PageParam = _DynamicPage.GetLoadParameterList(GridLoadParameters);
        }
        parameterToLoadData = JSON.stringify(PageParam);
        parameterToLoadData = { request: parameterToLoadData, DATType: ModelUpdate.DATType };
        parameterToLoadData = JSON.stringify(parameterToLoadData);
        return parameterToLoadData;
    }

    var SyncAjaxCall = function (Url, parameterToLoadData, Message) {
        var result;
        $.ajax({
            url: Url,
            contentType: 'application/json; charset=utf-8',
            type: 'POST',
            dataType: 'json',
            data: parameterToLoadData,
            async: false,
            success: function (response) {
                result = response;
                if (result == "Session Failure") {
                    window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
                    return false;
                }
                if (result == "true")
                    ShowMessage(Message, 1);
                else if (navigator != undefined && navigator != null && !navigator.onLine)
                    ShowMessage("IN-ER-ALP-001 :: Please Check Your Internet Connectivity", 4);
                else
                    ShowMessage(result, 4);
            },
            error: function (result) {
                if (navigator != undefined && navigator != null && !navigator.onLine)
                    ShowMessage("IN-ER-ALP-001 :: Please Check Your Internet Connectivity", 4);
                else
                    ShowMessage('IN-ER-AHI-002 :: Error in current operation.', 4);
            }
        });
        return result;
    }
}

//-- Form Online DC Operation Functions.
function OnlineDcOperation() {
    this.GridConfigUrl = "";
    this.GridDataUrl = "";
    this.SaveUrl = "";
    this.SuccsessMessage = "";
    this.ControlId = "";
    this.args = null;
    var myInstance = this;
    this.SaveOperation = function (TypeOperation) {
        var result = SyncAjaxCall(this.SaveUrl, createparameterToLoadData(ModelUpdate), this.SuccsessMessage);
        if (result == true && myInstance.args == null) {
            GridColumnDataLoad((this.ControlId == "" ? "datatable_ApprovalProf" : this.ControlId), this.GridConfigUrl, this.GridDataUrl, TypeOperation);
            var _LoadControlData = new LoadControlData(ModelUpdate);
            if (_LoadControlData.Load != undefined)
                _LoadControlData.Load();
            else
                LoadControlData(ModelUpdate);
        }
    }

    var GridColumnDataLoad = function (controlId, GridConfigUrl, GridDataUrl, TypeOperation) {
        var oTable = $('#' + controlId).DataTable();

        if (ModelUpdate != undefined && ModelUpdate != null) {
            oTable.fnClearTable(true);

            var oTableSetting = $('#' + controlId).DataTable().fnSettings();
            var oModel = null;
            oModel = ModelUpdate;
            var params = GetParameter(GridConfigUrl, ModelUpdate);
            LoadDcGridData(GridConfigUrl, GridDataUrl, oModel, controlId, "", params);

            oTable.fnDestroy(false);

            var oOneViewDataTableComponent = new OneViewDataTableComponent();
            oOneViewDataTableComponent.Initialize(TypeOperation);
            var tableId = controlId;
            $('<div style="width: 100%; overflow: auto"></div>').append($('#' + tableId)).insertAfter($('#' + tableId + '_wrapper div').first());
            ListViewModel = {};
        }
    }

    var createparameterToLoadData = function (ModelUpdate) {
        var _DynamicPage = null;
        var PageParam = [];
        var parameterToLoadData = null;
        var Model = ModelUpdate;
        if (Model._HTMLPageConfigLst != undefined) {
            for (var i = 0; i < Model._HTMLPageConfigLst.length; i++) {
                var GridLoadParameters = [];
                var model = Model._HTMLPageConfigLst[i];
                _DynamicPage = new DynamicPage(model);
                if (model.ControlConfigDict != undefined) {
                    for (var item in model.ControlConfigDict) {
                        if (model.ControlConfigDict[item].ControlTypeName != "Label")
                            GridLoadParameters.push(model.ControlConfigDict[item].ClientID)
                    }
                    if (PageParam.length == 0)
                        PageParam.push(_DynamicPage.GetRequestParamOnlineDCList(GridLoadParameters));
                    else
                        PageParam.push(_DynamicPage.GetRequestParamOnlineDCList(GridLoadParameters));
                }
            }
        }
        else {
            var GridLoadParameters = [];
            _DynamicPage = new DynamicPage(Model);
            if (Model.ControlConfigDict != undefined) {
                for (var item in Model.ControlConfigDict) {
                    if (Model.ControlConfigDict[item].ControlTypeName != "Label")
                        GridLoadParameters.push(Model.ControlConfigDict[item].ClientID)
                }
            }
            else if (Model.ControlConfigDict == undefined) {
                GridLoadParameters = getGridLoadParameters(Model.ControlGroupConfigLst);
            }
            PageParam = _DynamicPage.GetRequestParamOnlineDCList(GridLoadParameters);
        }
        var ddlTempName = document.getElementById("ddlTempName");
        var ddlPlaceName = document.getElementById("ddlPlaceName");
        var ddl_ObservationType = document.getElementById("ddl_ObservationType");
        var DatFromDate = document.getElementById("DatFromDate");
        if (ddlTempName != undefined && ddlTempName != null)
            PageParam["ddlTempName"] = ddlTempName.value;
        if (ddlPlaceName != undefined && ddlPlaceName != null)
            PageParam["ddlPlaceName"] = ddlPlaceName.value;
        if (ddl_ObservationType != undefined && ddl_ObservationType != null)
            PageParam["ddl_ObservationType"] = ddl_ObservationType.value;
        if (DatFromDate != undefined && DatFromDate != null)
            PageParam["DatFromDate"] = DatFromDate.getElementsByTagName("span")[0].innerHTML;
        parameterToLoadData = JSON.stringify(PageParam);
        parameterToLoadData = { request: parameterToLoadData, DataCaptureId: ForUpdateId.length > 0 ? ForUpdateId[0] : 0, DATType: ModelUpdate.DATType };
        parameterToLoadData = JSON.stringify(parameterToLoadData);
        return parameterToLoadData;
    }

    var SyncAjaxCall = function (Url, parameterToLoadData, Message) {
        var result;
        $.ajax({
            url: Url,
            contentType: 'application/json; charset=utf-8',
            type: 'POST',
            dataType: 'json',
            data: parameterToLoadData,
            async: false,
            success: function (response) {
                result = response;
                if (myInstance.args != null && myInstance.args.success != null && myInstance.args.success != "") {
                    myInstance.args.success(myInstance.args.sender, response)
                }
                else {
                    if (result == "Session Failure") {
                        window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
                        return false;
                    }
                    if (result == true) {
                        if (Message != null && Message != undefined && Message != '')
                            ShowMessage(Message, 1);
                    }
                    else if (navigator != undefined && navigator != null && !navigator.onLine)
                        ShowMessage("IN-ER-ALP-001 :: Please Check Your Internet Connectivity", 4);
                    else
                        ShowMessage("Error while approving the record.", 4);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                if (myInstance.args != null && myInstance.args.error != null && myInstance.args.error != "") {
                    myInstance.args.error(myInstance.args.sender, XMLHttpRequest, textStatus, errorThrown);
                }
                else {
                    if (navigator != undefined && navigator != null && !navigator.onLine)
                        ShowMessage("IN-ER-ALP-001 :: Please Check Your Internet Connectivity", 4);
                    else
                        ShowMessage('IN-ER-AHI-002 :: Error in current operation.', 4);
                }
            }
        });
        return result;
    }
}

//-- Profile Screen Save, Delete and Clear Operations.
function ProfileOperations()
{
    this.GridConfigUrl = "";
    this.GridDataUrl = "";
    this.OperationUrl = "";
    this.SuccsessMessage = "";
    this.ErrorMessage = "";
    this.SaveOperation = function (TypeOperation) {
        var _oValidationFrameWork = new ValidationFrameWork(ModelUpdate);
        if (_oValidationFrameWork.validateControl()) {
            var result = SyncAjaxCall(this.OperationUrl, createparameterToLoadData(ModelUpdate), this.SuccsessMessage, this.ErrorMessage);
            if (result == true) {
                GridColumnDataLoad("datatable_ApprovalProf", this.GridConfigUrl, this.GridDataUrl, TypeOperation);
                //LoadControlData(ModelUpdate);
            }
        }
    }

    this.Delete = function(TypeOperation)
    {
        if ($(".SmallBox").length > 0) {
            $(".SmallBox").remove();
        }
        var target = $('#target');
        gridConfigUrl = this.GridConfigUrl;
        gridDataUrl = this.GridDataUrl;
        operationUrl = this.OperationUrl;
        succsessMessage = this.SuccsessMessage;
        errorMessage = this.ErrorMessage;
        if (selected.length > 0) {
            var delay=1;
            setTimeout(function () {
                var parameterToLoadData = null;
                parameterToLoadData = { ObjectId: selected };
                parameterToLoadData = JSON.stringify(parameterToLoadData);

                var result = SyncAjaxCall(operationUrl, parameterToLoadData, succsessMessage, errorMessage);
                if (result == true) {
                    GridColumnDataLoad("datatable_ApprovalProf", gridConfigUrl, gridDataUrl, TypeOperation);
                    var _LoadControlData = new LoadControlData(ModelUpdate);
                    if (_LoadControlData.Load != undefined)
                        _LoadControlData.Load();
                    else
                        LoadControlData(ModelUpdate);
                }
                if (target.hasClass('loading')) {
                    target.loadingOverlay('remove');
                } else {
                    target.loadingOverlay();
                };
            }, delay);
        }
        else {
            if ($('.full-width').DataTable().fnGetNodes().length == 0) {
                ShowMessage("IN-WN-PRO-001 :: There are no Records to Delete.", 2);
            }
            else {
                ShowMessage("IN-IN-PRO-001 :: Please select the Records to Delete.", 3);
            }

            if (target.hasClass('loading')) {
                target.loadingOverlay('remove');
            } else {
                target.loadingOverlay();
            };
        }
    }

    this.Clear = function (TypeOperation) {
        if ($(".SmallBox").length > 0) {
            $(".SmallBox").remove();
        }
        var target = $('#target');
        if (target.hasClass('loading')) {
            target.loadingOverlay('remove');
        } else {
            target.loadingOverlay();
        };
        var delay = 1;
        gridConfigUrl = this.GridConfigUrl;
        gridDataUrl = this.GridDataUrl;
        var oModel;
        setTimeout(function () {
            var _oValidationFrameWork = new ValidationFrameWork(ModelUpdate);
            _oValidationFrameWork.removeValidate();
            GridColumnDataLoad("datatable_ApprovalProf", gridConfigUrl, gridDataUrl, TypeOperation);
            var _LoadControlData = new LoadControlData(ModelUpdate);
            if (_LoadControlData.Load != undefined)
                _LoadControlData.Load();
            else
                LoadControlData(ModelUpdate);
            if (target.hasClass('loading')) {
                target.loadingOverlay('remove');
            } else {
                target.loadingOverlay();
            };
        });
    }

    var GridColumnDataLoad = function (controlId, GridConfigUrl, GridDataUrl, TypeOperation) {
        var oTable = $('#' + controlId).DataTable();

        if (ModelUpdate != undefined && ModelUpdate != null) {
            oTable.fnClearTable(true);

            var oTableSetting = $('#' + controlId).DataTable().fnSettings();
            var oModel = null;
            oModel = ModelUpdate;
            LoadDcGridData(GridConfigUrl, GridDataUrl, oModel, controlId, "");

            oTable.fnDestroy(false);

            var oGridTableInitialize = new GridTableInitialize();
            if (TypeOperation == "DataCaptureProfile")
                oGridTableInitialize.DataCaptureProfileGridInit(GridConfigUrl, GridDataUrl, oModel);
            else if (TypeOperation == "HandOverProfile")
                oGridTableInitialize.HandoverProfileGridInit(GridConfigUrl, GridDataUrl, oModel);
            else if (TypeOperation == "ApprovalProfile")
                oGridTableInitialize.ApprovalProfileGridInit(GridConfigUrl, GridDataUrl, oModel);
            else if (TypeOperation == "MonitorProfile")
                oGridTableInitialize.MonitorProfileGridInit(GridConfigUrl, GridDataUrl, oModel);
            else if (TypeOperation == "SamplePlanningGridInit") {
                var parameter = GetParameterForPlanningView();
                var params = [parameter, JSON.stringify({ param1: GridConfigUrl.substring(GridConfigUrl.lastIndexOf("/") + 1, GridConfigUrl.length), request: JSON.stringify(parameter) })];
                oGridTableInitialize.SamplePlanningGridInit(GridConfigUrl, GridDataUrl, params);
            }
            else if (TypeOperation == "OnlineDataCapture") {
                var oOneViewDataTableComponent = new OneViewDataTableComponent();
                oOneViewDataTableComponent.Initialize("OnlineDataCapture");
            }
            var tableId = controlId;
            $('<div style="width: 100%; overflow: auto"></div>').append($('#' + tableId)).insertAfter($('#' + tableId + '_wrapper div').first());
        }
    }

    var createparameterToLoadData = function (ModelUpdate) {
        var _DynamicPage = null;
        var PageParam = [];
        var parameterToLoadData = null;
        var Model = ModelUpdate;
        if (Model._HTMLPageConfigLst != undefined) {
            for (var i = 0; i < Model._HTMLPageConfigLst.length; i++) {
                var GridLoadParameters = [];
                var model = Model._HTMLPageConfigLst[i];
                _DynamicPage = new DynamicPage(model);
                if (model.ControlConfigDict != undefined) {
                    for (var item in model.ControlConfigDict) {
                        if (model.ControlConfigDict[item].ControlTypeName != "Label")
                            GridLoadParameters.push(model.ControlConfigDict[item].ClientID)
                    }
                    if (PageParam.length == 0)
                        PageParam.push(_DynamicPage.GetLoadParameterList(GridLoadParameters));
                    else
                        PageParam.push(_DynamicPage.GetLoadParameterList(GridLoadParameters));
                }
            }
        }
        else {
            var GridLoadParameters = [];
            _DynamicPage = new DynamicPage(Model);
            if (Model.ControlConfigDict != undefined) {
                for (var item in Model.ControlConfigDict) {
                    if (Model.ControlConfigDict[item].ControlTypeName != "Label")
                        GridLoadParameters.push(Model.ControlConfigDict[item].ClientID)
                }
            }
            else if (Model.ControlConfigDict == undefined) {
                GridLoadParameters = getGridLoadParameters(Model.ControlGroupConfigLst);
            }
            PageParam = _DynamicPage.GetLoadParameterList(GridLoadParameters);
        }
        parameterToLoadData = JSON.stringify(PageParam);
        parameterToLoadData = { request: parameterToLoadData };
        parameterToLoadData = JSON.stringify(parameterToLoadData);
        return parameterToLoadData;
    }

    var SyncAjaxCall = function (Url, parameterToLoadData, Message, errorMessage) {
        var result;
        $.ajax({
            url: Url,
            contentType: 'application/json; charset=utf-8',
            type: 'POST',
            dataType: 'json',
            data: parameterToLoadData,
            async: false,
            success: function (response) {
                result = JSON.parse(response);
                if (result == true) {
                    ShowMessage(Message, 1);
                }
                else if (result != null && result != undefined && result == "Session Failure") {
                    window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
                    return false;
                }
                else if (navigator != undefined && navigator != null && !navigator.onLine)
                    ShowMessage("IN-ER-ALP-001 :: Please Check Your Internet Connectivity", 4);
                else {
                    ShowMessage(errorMessage, 4);
                }
            },
            error: function (result) {
                if (navigator != undefined && navigator != null && !navigator.onLine)
                    ShowMessage("IN-ER-ALP-001 :: Please Check Your Internet Connectivity", 4);
                else
                    ShowMessage("IN-ER-PRO-001 :: Error in current operation.", 4);
            }
        });
        return result;
    }
}

//-- Throw Ajax call downlopad file
function ajax_download(url, data) {
    var $iframe,
        iframe_doc,
        iframe_html;

    if (($iframe = $('#download_iframe')).length === 0) {
        $iframe = $("<iframe id='download_iframe'" +
                    " style='display: none' src='about:blank'></iframe>"
                   ).appendTo("body");
    }

    iframe_doc = $iframe[0].contentWindow || $iframe[0].contentDocument;
    if (iframe_doc.document) {
        iframe_doc = iframe_doc.document;
    }

    iframe_html = "<html><head></head><body><form method='POST' action='" +
                  url + "'>"

    Object.keys(data).forEach(function (key) {
        iframe_html += "<input type='hidden' name='" + key + "' value='" + data[key] + "'>";

    });

    iframe_html += "</form></body></html>";

    iframe_doc.open();
    iframe_doc.write(iframe_html);
    $(iframe_doc).find('form').submit();
}

//-- Control Append Function for Radio button Control
function ControlAppend(inputControl, outputControl) {
    if (inputControl != undefined && inputControl != null) {
        for (var itrCnt = 0; itrCnt < inputControl.children.length; itrCnt++) {
            var childnode = inputControl.children[itrCnt];
            inputControl.removeChild(childnode);
        }
        if (outputControl != undefined && outputControl != null) {
            for (var itrCnt = 0; itrCnt < outputControl.children.length;) {
                var childnode = outputControl.children[itrCnt];
                //var item = childnode.cloneNode(true);
                inputControl.appendChild(childnode);
            }
        }
    }
}

function ShiftReportChangeEvent(controlConfig, pageConfig)
{
    var ControlConfig = controlConfig;
    var PageConfig = pageConfig;

    this.onchange = function () {
        if (ControlConfig != undefined && ControlConfig != null) {
            if (ControlConfig.ControlTypeName == "RadioButton" && ControlConfig.ControlID == "497") {
                var control = document.getElementsByName("group_" + ControlConfig.ClientID);
                if (control != undefined && control != null) {
                    if (control.item(0).checked) {
                        for (var itr = 0; itr < ControlConfig.ValidateControlLst.length; itr++) {
                            var validateControl = pageConfig.ControlGroupConfigLst[0].ControlConfigDict[ControlConfig.ValidateControlLst[itr]];
                            if (validateControl != undefined && validateControl != null) {
                                if (itr < 6)
                                    $("#" + validateControl.ContainerId).addClass("hide");
                                else
                                    $("#" + validateControl.ContainerId).removeClass("hide");
                                this.clear(validateControl);
                            }
                        }
                    }
                    else if (control.item(1).checked) {
                        for (var itr = 0; itr < ControlConfig.ValidateControlLst.length; itr++) {
                            var validateControl = pageConfig.ControlGroupConfigLst[0].ControlConfigDict[ControlConfig.ValidateControlLst[itr]];
                            if (validateControl != undefined && validateControl != null) {
                                if (itr < 6)
                                    $("#" + validateControl.ContainerId).removeClass("hide");
                                else
                                    $("#" + validateControl.ContainerId).addClass("hide");
                                this.clear(validateControl);
                            }
                        }
                    }
                    else {
                        for (var itr = 0; itr < ControlConfig.ValidateControlLst.length; itr++) {
                            var validateControl = pageConfig.ControlGroupConfigLst[0].ControlConfigDict[ControlConfig.ValidateControlLst[itr]];
                            if (validateControl != undefined && validateControl != null) {
                                //if (itr < 6)
                                //    $("#" + validateControl.ContainerId).addClass("hide");
                                //else
                                    $("#" + validateControl.ContainerId).addClass("hide");
                                this.clear(validateControl);
                            }
                        }
                    }
                }
            }
            else if (ControlConfig.ControlTypeName == "ComboBox") {
                var control = document.getElementById(ControlConfig.ClientID);
                if (control != undefined && control != null) {
                    var _dynamciPage = new DynamicPage(pageConfig);
                    _dynamciPage.LoadControlsWithData(pageConfig.ControlGroupConfigLst[0].ControlConfigDict[ControlConfig.ValidateControlLst[ControlConfig.ValidateControlLst.length - 1]]);
                    //var Source_497 = pageConfig.ControlGroupConfigLst[0].ControlConfigDict[pageConfig.HTMLPageID + "_497"];
                    //if (Source_497 != undefined && Source_497 != null)
                    //    _dynamciPage.LoadControlsWithData(Source_497);
                    if (control.value == '1') {
                        for (var itr = 0; itr < ControlConfig.ValidateControlLst.length - 1; itr++) {
                            var validateControl = pageConfig.ControlGroupConfigLst[0].ControlConfigDict[ControlConfig.ValidateControlLst[itr]];
                            if (validateControl != undefined && validateControl != null) {
                                if (itr <= 2) {
                                    //if (itr == 0) {
                                    //    if ($("#" + validateControl.ContainerId).hasClass("hide"))
                                    //        $("#" + validateControl.ContainerId).removeClass("hide");
                                    //}
                                    $("#" + validateControl.ContainerId).removeClass("hide");
                                }
                                else if (itr > 11 && itr < 14) {
                                    $("#" + validateControl.ContainerId).addClass("hide");
                                }
                                else if (itr >= 14) {
                                    //if (itr == 14)
                                    //    $("#" + validateControl.ContainerId).addClass("hide");
                                    $("#" + validateControl.ContainerId).addClass("hide");
                                }
                                this.clear(validateControl);
                            }
                        }
                    }
                    else if (control.value == '2') {
                        for (var itr = 0; itr < ControlConfig.ValidateControlLst.length - 1; itr++) {
                            var validateControl = pageConfig.ControlGroupConfigLst[0].ControlConfigDict[ControlConfig.ValidateControlLst[itr]];
                            if (validateControl != undefined && validateControl != null) {
                                if (itr < 15) {
                                    //if (itr == 0)
                                    //    $("#" + validateControl.ContainerId).parent().addClass("hide");
                                    $("#" + validateControl.ContainerId).addClass("hide");
                                }
                                else {
                                    //if (itr == 14) {
                                    //    if ($("#" + validateControl.ContainerId).parent().hasClass("hide"))
                                    //        $("#" + validateControl.ContainerId).parent().removeClass("hide");
                                    //}
                                    $("#" + validateControl.ContainerId).removeClass("hide");
                                }
                                this.clear(validateControl);
                            }
                        }
                    }
                    else if (control.value == '21') {
                        for (var itr = 0; itr < ControlConfig.ValidateControlLst.length - 1; itr++) {
                            var validateControl = pageConfig.ControlGroupConfigLst[0].ControlConfigDict[ControlConfig.ValidateControlLst[itr]];
                            if (validateControl != undefined && validateControl != null) {
                                if (itr < 13) {
                                    //if (itr == 0) {
                                    //    if ($("#" + validateControl.ContainerId).parent().hasClass("hide"))
                                    //        $("#" + validateControl.ContainerId).parent().removeClass("hide");
                                    //}
                                    $("#" + validateControl.ContainerId).addClass("hide");
                                }
                                else if (itr < 15) {
                                    $("#" + validateControl.ContainerId).removeClass("hide");
                                }
                                else {
                                    //if (itr == 14)
                                    //    $("#" + validateControl.ContainerId).parent().addClass("hide");
                                    $("#" + validateControl.ContainerId).addClass("hide");
                                }
                                this.clear(validateControl);
                            }
                        }
                    }
                    else if ((control.value != '1' && control.value != '2' && control.value != '21') || control.value == '' || control.value == null || control.value == undefined) {
                        //var lvalue = 0;
                        //for (var itr = 0; itr < ControlConfig.ValidateControlLst.length - 1; itr++) {
                        //    var validateControl = pageConfig.ControlGroupConfigLst[0].ControlConfigDict[ControlConfig.ValidateControlLst[itr]];
                        //    if (validateControl != undefined && validateControl != null) {
                        //        if (itr == 0) {
                        //            $("#" + validateControl.ContainerId).addClass("hide");
                        //            lvalue = lvalue + 1;
                        //        }
                        //        if (itr == 14) {
                        //            $("#" + validateControl.ContainerId).addClass("hide");
                        //            lvalue = lvalue + 1;
                        //        }
                        //        if (lvalue == 2)
                        //            break;
                        //    }
                        //}
                    }
                }
            }
        }
    }

    this.onclick = function () {
        if (ControlConfig != undefined && ControlConfig != null) {
            if (ControlConfig.ControlTypeName == "LinkControl" && ControlConfig.ControlID == "LnkObservationTypeDetails") {
                if ($(".ObservationType").length > 0) {
                    var ObservationTypeDetails = $(".ObservationType")[0];
                    if (ObservationTypeDetails.attributes.length > 0 && (ObservationTypeDetails.attributes.getNamedItem('role') == null || ObservationTypeDetails.attributes.getNamedItem('role') == undefined)) {
                        var chilsNodes = ObservationTypeDetails.children;
                        var formtag = document.getElementById('frmOBS');
                        for (var itr = 0; itr < chilsNodes.length; itr++) {
                            $(formtag).append(chilsNodes[itr]);
                        }
                    }
                    if (ControlConfig.ValidateControlLst.length > 0) {
                        var validateControl = pageConfig.ControlGroupConfigLst[0].ControlConfigDict[ControlConfig.ValidateControlLst[0]];
                        if (validateControl != undefined && validateControl != null && validateControl.ControlTypeName == "ComboBox") {
                            var combo = document.getElementById(validateControl.ClientID);
                            if ((combo != undefined && combo != null) && combo.value != '' && combo.value != null && combo.value != undefined && (combo.value == '1' || combo.value == '2' || combo.value == '21')) {
                                $("#myModalOBS").modal("show");
                                var enforceModalFocusFn = $.fn.modal.Constructor.prototype.enforceFocus;

                                $.fn.modal.Constructor.prototype.enforceFocus = function () { };

                                try {
                                    if ($confModal) {
                                        $confModal.on('hidden', function () {
                                            $.fn.modal.Constructor.prototype.enforceFocus = enforceModalFocusFn;
                                        });

                                        $confModal.modal({ backdrop: false });
                                    }
                                }
                                catch (ex) {

                                }
                            }
                            else if ((combo != undefined && combo != null) && (combo.value == '' || combo.value == null || combo.value == undefined))
                                ShowMessage("Please select the Observation Type.", 2);
                            else
                                ShowMessage("Selected Observation Type has no details.", 2);
                        }
                        //var validateControl1 = pageConfig.ControlGroupConfigLst[0].ControlConfigDict[ControlConfig.ValidateControlLst[1]];
                        //var DynamicPageObj = new DynamicPage(PageConfig);
                        //DynamicPageObj.LoadControlsWithData(validateControl1);
                    }
                }
            }
        }
    }

    this.clear = function (validateControl) {
        var _dynamciPage = new DynamicPage(pageConfig);
        if (validateControl.ControlTypeName == "TextBox")
            _dynamciPage.SetData(validateControl, '');
        else if (validateControl.ControlTypeName == "RadioButton" && ControlConfig.RadioButtonTypeName == "ListGroup")
            _dynamciPage.SetData(validateControl, '1');
        else if (validateControl.ControlTypeName == "RadioButton" && ControlConfig.RadioButtonTypeName == "Default")
            _dynamciPage.SetData(validateControl, '');
    }
}

function ClearStorage() {
    if (window.localStorage.getItem("LoginSuccess") == undefined || window.localStorage.getItem("LoginSuccess") == null || window.localStorage.getItem("LoginSuccess") == '0') {
        //window.localStorage.clear();
        //window.location.reload();
        window.localStorage.setItem("LoginSuccess", '1');
    }
}

function ClearLocalStorage() {
    if (window.localStorage != undefined && window.localStorage != null) {
        window.localStorage.removeItem('CurrentMenuId');
        window.localStorage.removeItem('LoginSuccess');
        window.localStorage.removeItem('ServiceId');
        window.localStorage.removeItem('DCPageCriteria');
        window.localStorage.removeItem('WorkFlowPageCriteria');
    }
}

function TextBoxControlValidations() {
    this.onkeypress = function (event) {
        var keycode = event.keyCode ? event.keyCode : event.charCode;

        if (keycode >= 48 && keycode <= 57)
            return true;
        else if ((keycode >= 64 && keycode <= 90) || (keycode >= 97 && keycode <= 122))
            return true;
        else if (keycode == 95 || keycode == 45 || keycode == 46 || keycode == 47 || keycode == 60 || keycode == 62 || keycode == 13 || keycode == 8 || keycode == 9)
            return true;
        else if ((keycode >= 36 && keycode <= 38) || (keycode >= 40 && keycode <= 43) || keycode == 32 || keycode == 61 || keycode == 33 || keycode == 58)
            return true;
        else
            return false;
    }

    this.onkeydown = function (event) {
        var keycode = event.keyCode ? event.keyCode : event.charCode;

        if (keycode >= 48 && keycode <= 57)
            return true;
        else if ((keycode >= 64 && keycode <= 90) || (keycode >= 97 && keycode <= 122))
            return true;
        else if (keycode == 95 || keycode == 45 || keycode == 46 || keycode == 47 || keycode == 60 || keycode == 62 || keycode == 13 || keycode == 8 || keycode == 9)
            return true;
        else if ((keycode >= 36 && keycode <= 38) || (keycode >= 40 && keycode <= 43) || keycode == 32 || keycode == 61 || keycode == 33 || keycode == 58)
            return true;
        else
            return false;
    }

    this.onkeyup = function (event) {

    }
}

function SelectAllClickEvent(controlConfig, pageConfig)
{
    var ControlConfig = controlConfig;
    var PageConfig = pageConfig;

    this.onclick = function () {
        if (ControlConfig != undefined && ControlConfig != null) {
            if (ControlConfig.ControlTypeName == "LinkControl") {
                for (var itr = 0; itr < ControlConfig.ValidateControlLst.length; itr++) {
                    var validateControl = pageConfig.ControlGroupConfigLst[0].ControlConfigDict[ControlConfig.ValidateControlLst[itr]];
                    if (validateControl != undefined && validateControl != null) {
                        if (validateControl.ControlTypeName == "ComboBox")
                        {
                            var ControlDet = $("#" + validateControl.ClientID);
                            if (ControlDet != undefined && ControlDet != null && ControlDet.length > 0) {
                                for (var opt = 0; opt < ControlDet[0].options.length; opt++) {
                                    ControlDet[0].options[opt].selected = true;
                                }
                                if ($("#" + validateControl.ClientID).data().select2 != undefined) {
                                    $("#" + validateControl.ClientID).data().select2.updateSelection();
                                    $("#" + validateControl.ClientID).data().select2.initSelection();
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

function TemplateGroupSelectedIndexChange(controlConfig, pageConfig) {
    var ControlConfig = controlConfig;
    var PageConfig = pageConfig;

    this.onchange = function () {
        if (ControlConfig != undefined && ControlConfig != null) {
            var control = document.getElementById(ControlConfig.ClientID);
            var DynamicPageObj = new DynamicPage(PageConfig);
            for (var itr = 0; itr < ControlConfig.ValidateControlLst.length; itr++) {
                var validateControl = pageConfig.ControlGroupConfigLst[0].ControlConfigDict[ControlConfig.ValidateControlLst[itr]];
                if (validateControl != undefined && validateControl != null) {
                    if (validateControl.ControlTypeName == "ComboBox") {
                        if (control != undefined && control != null && control.value != '' && control.value != null && control.value != undefined) {
                            if (itr == 0) {
                                if (control.value == "8529" || control.value == "8530" || control.value == "8531" || control.value == "8532") {
                                    var defaultItemLst = [{ Id: "0", Selected: false, Text: "ALL", Value: "0" }];
                                    validateControl.DefaultListItem = [];
                                    validateControl.DefaultListItem = defaultItemLst;
                                }
                                else
                                    validateControl.DefaultListItem = [];
                            }
                            DynamicPageObj.LoadControlsWithData(validateControl);
                        }
                    }
                    else if (validateControl.ControlTypeName == "RadioButton") {
                        if (control != undefined && control != null && control.value != '' && control.value != null && control.value != undefined) {
                            if (control.value == "8529" || control.value == "8530" || control.value == "8531" || control.value == "8532") {
                                var defaultItemLst = [{ Id: "0", Selected: false, Text: "ALL", Value: "0" }, { Id: "1", Selected: false, Text: "Action", Value: "1" }, { Id: "3", Selected: true, Text: "No-Action", Value: "3" },
                                    { Id: "4", Selected: false, Text: "NC", Value: "4" }];
                                validateControl.DefaultListItem = [];
                                validateControl.DefaultListItem = defaultItemLst;
                            }
                            else {
                                var defaultItemLst = [{ Id: "0", Selected: false, Text: "ALL", Value: "0" }, { Id: "1", Selected: false, Text: "Action", Value: "1" }, { Id: "3", Selected: true, Text: "No-Action", Value: "3" }];
                                validateControl.DefaultListItem = [];
                                validateControl.DefaultListItem = defaultItemLst;
                            }
                        }
                        DynamicPageObj.LoadControlsWithData(validateControl);
                    }
                }
            }
        }
    }
}

/* OneView Message Box */
function OneViewMessageBox() {
    var myInstance = this;

    this.ConfirmMessage = function (HeaderKey, MessageKey, buttonsConfig) {
        var HeaderName = '';
        if (_GetGlobalization != undefined && _GetGlobalization != null)
            HeaderName = _GetGlobalization.GetGlobalizationValue(HeaderKey);
        $("#id_ConfirmationMessageHeader").html(HeaderName);
        var Message = '';
        if (_GetGlobalization != undefined && _GetGlobalization != null)
            Message = _GetGlobalization.GetGlobalizationValue(MessageKey);
        $("#id_ConfirmationMessageContent").html(Message);
        if (buttonsConfig != undefined && buttonsConfig != null && buttonsConfig.length > 0) {
            $("#id_ConfirmationMessageFooter").html('');
            for (var itr = 0; itr < buttonsConfig.length; itr++) {
                var buttonName = '';
                if (_GetGlobalization != undefined && _GetGlobalization != null)
                    buttonName = _GetGlobalization.GetGlobalizationValue(buttonsConfig[itr].Name);
                if (buttonName != '') {
                    var aTag = document.createElement('a');
                    aTag.className = "modal-action modal-close waves-effect waves-green btn-flat";
                    aTag.href = "javascript:void(0);";
                    aTag.innerHTML = buttonName;
                    if (buttonsConfig[itr].EventHandler != undefined && buttonsConfig[itr].EventHandler != null && buttonsConfig[itr].EventHandler != '')
                        aTag.onclick = buttonsConfig[itr].EventHandler;
                    $("#id_ConfirmationMessageFooter").append(aTag);
                }
            }
        }
        $('.modal').modal({
            dismissible: false
        });
        $("#id_ConfirmationMessage").modal('open');
    }

    this.SyncConfirmMessage = function (MessageKey) {
        var Message = '';
        if (_GetGlobalization != undefined && _GetGlobalization != null)
            Message = _GetGlobalization.GetGlobalizationValue(MessageKey);
        confirm(Message);
    }

    this.ShowNotification = function (Message, MessageType) {
        myInstance.RemoveNotification();
        var color = "";
        var iconSmall = "";
        if (MessageType == 1) { //-- Success
            color = "#739E73";
            iconSmall = "mdi mdi-checkbox-marked-outline";
        }
        else if (MessageType == 2) { //-- Warning
            color = "#C79121";
            iconSmall = "mdi mdi-security mdi-36px";
        }
        else if (MessageType == 3) { //-- Info
            color = "#3276B1";
            iconSmall = "mdi mdi-bell-ring mdi-36px";
        }
        else if (MessageType == 4) { //-- Error
            color = "#C46A69";
            iconSmall = "mdi mdi-alert mdi-36px";
        }
        else {
            color = "#739E73";
            iconSmall = "mdi mdi-checkbox-marked-outline mdi-36px";
        }
        $.smallBox({
            title: Message,
            //content: "<i class='fa fa-clock-o'></i> <i>2 seconds ago...</i>",
            color: color,
            sound: false,
            //timeout: 8000,
            iconSmall: iconSmall,
            timeout: 4000
        });
        //Materialize.toast(Message, 4000);
    }

    this.RemoveNotification = function () {
        if ($(".SmallBox").length > 0) {
            $(".SmallBox").remove();
        }
    }
}

function LoadStaticGridDetails() {
    this.GridDataURL = "";
    this.parameterToFilterData = {};
    this.layoutId = "";
    this.DetailKey = "";
    this.gridResultData = [];
    var myInstance = this;

    this.Load = function () {
        if (myInstance.layoutId != undefined && myInstance.layoutId != null && myInstance.layoutId != "") {
            var GridLayout = $('#' + myInstance.layoutId);
            if (GridLayout != undefined && GridLayout != null && GridLayout.length > 0) {
                GridLayout.html('');
                var parameterToLoadData = {};
                if (myInstance.parameterToFilterData != undefined && myInstance.parameterToFilterData != null)
                    parameterToLoadData = myInstance.parameterToFilterData;
                var resultData = AjaxCall(myInstance.GridDataURL, JSON.stringify(parameterToLoadData), false);
                if (resultData == undefined || resultData == null)
                    resultData = [];
                if (resultData["TotalCount"] != undefined && resultData["TotalCount"] != null)
                    TotalRecCount = resultData["TotalCount"];
                if (CurrentPageNo == 1)
                    UpdateGridViewFooter();
                if (resultData["ResponceLst"] != undefined && resultData["ResponceLst"] != null && resultData["ResponceLst"].length > 0) {
                    myInstance.gridResultData = resultData["ResponceLst"];
                    var layoutInnerHtml = '';
                    if (myInstance.DetailKey == 'PlanWiseDetail')
                        layoutInnerHtml = LoadPlanWiseDetailsData(myInstance.gridResultData);
                    else if(myInstance.DetailKey == 'PlanDetail')
                        layoutInnerHtml = LoadPlanDetailsData(myInstance.gridResultData);
                    else if (myInstance.DetailKey == 'ManualFollowUpDetail')
                        layoutInnerHtml = LoadManualFollowUpDetailsData(myInstance.gridResultData);
                    else if (myInstance.DetailKey == 'ManualFollowUpDetail_HydeHousing')
                        layoutInnerHtml = LoadManualFollowUpDetailsData_HydeHousing(myInstance.gridResultData);
                    else if (myInstance.DetailKey == 'CreatedPlanDetail')
                        layoutInnerHtml = LoadCreatedPlanDetails(myInstance.gridResultData);
                    else if (myInstance.DetailKey == 'PeriodWiseDetail')
                        layoutInnerHtml = LoadPeridWiseDetailsData(myInstance.gridResultData);
                    if (layoutInnerHtml != undefined && layoutInnerHtml != null)
                        GridLayout.html(layoutInnerHtml);
                }
                else {
                    GridLayout.html('No Records Found.');
                }
            }
        }
    }

    var LoadCreatedPlanDetails = function (resultData) {
        var layoutInnerHtml = '';
        var groupColumnValue = 0;
        var startCount = PageStartCount;
        var endCount = 0;
        if (PageEndCount > TotalRecCount)
            endCount = TotalRecCount;
        else
            endCount = PageEndCount;
        for (var itr = startCount; itr <= endCount; itr++) {
            var eachRow = resultData[itr - 1];
            var oddorevenClass = '';
            var rowColor = '';
            var olength = itr % 2;
            if (olength > 0)
                oddorevenClass = "odd";

            var startRow = '<div class="list-group-item no-padding ' + oddorevenClass + '">';
            var PlanDetailsColumn = '';
            var ObjectIdColumn = '';
            var TemplateName = '';
            var DcDetailsColumn = '';
            if (eachRow["PlannerName"] != undefined && eachRow["PlannerName"] != null && eachRow["PlannerName"] != '')
                PlanDetailsColumn = '<div><strong>' + eachRow["PlannerName"] + '</strong></div>';
            if (eachRow["PlannerGroupName"] != undefined && eachRow["PlannerGroupName"] != null && eachRow["PlannerGroupName"] != '')
                PlanDetailsColumn = PlanDetailsColumn + '<div class="label bg-color-blue">' + eachRow["PlannerGroupName"] + '</div>';
            if (eachRow["TemplateName"] != undefined && eachRow["TemplateName"] != null && eachRow["TemplateName"] != '')
                TemplateName = '<div class="txt-color-dark margin-bottom-10 "><strong>' + eachRow["TemplateName"] + '</strong></div>';
            if (eachRow["_DCSchedularProfileResponceLst"] != undefined && eachRow["_DCSchedularProfileResponceLst"] != null && eachRow["_DCSchedularProfileResponceLst"] != '' && eachRow["_DCSchedularProfileResponceLst"].length > 0) {
                var DCSchedularProfileResponceLst = eachRow["_DCSchedularProfileResponceLst"];
                var DCSchedularProfileResponce = DCSchedularProfileResponceLst[0];
                var Schedular = '';
                if (DCSchedularProfileResponce["Reccurence"] == 1) {
                    rowColor = '#8e00fb';
                    Schedular = 'Daily';
                }
                else if (DCSchedularProfileResponce["Reccurence"] == 2) {
                    rowColor = '#008efb';
                    Schedular = 'Weekly';
                }
                else if (DCSchedularProfileResponce["Reccurence"] == 3) {
                    rowColor = '#fbc300';
                    Schedular = 'Monthly';
                }
                else if (DCSchedularProfileResponce["Reccurence"] == 4) {
                    rowColor = '#fb0064';
                    Schedular = 'Yearly';
                }
                if (DcDetailsColumn != '' && Schedular != '')
                    DcDetailsColumn = DcDetailsColumn + ' Scheduled by ' + '<strong style="color: #8e00fb;">' + Schedular + '</strong>';
                else if (DcDetailsColumn == '' && Schedular != '')
                    DcDetailsColumn = 'Scheduled by <strong style="color: #8e00fb;">' + Schedular + '</strong>';
            }
            if (eachRow["IsAnyPlace"] != undefined && eachRow["IsAnyPlace"] != null && eachRow["IsAnyPlace"] == true) {
                var PlaceTypeName = '';
                if (eachRow["DCPlaceTypeName"] != undefined && eachRow["DCPlaceTypeName"] != null && eachRow["DCPlaceTypeName"] != '') {
                    PlaceTypeName = eachRow["DCPlaceTypeName"];
                    if (DcDetailsColumn != '' && PlaceTypeName != '')
                        DcDetailsColumn = DcDetailsColumn + ' to ' + '<strong class="text-warning">' + PlaceTypeName + '</strong>';
                    else if (DcDetailsColumn == '' && PlaceTypeName != '')
                        DcDetailsColumn = '<strong class="text-warning">All ' + PlaceTypeName + '</strong>';
                }
                else {
                    if (DcDetailsColumn != '')
                        DcDetailsColumn = DcDetailsColumn + ' to ' + '<strong class = "text-warning">Any Place</strong>';
                    else
                        DcDetailsColumn = '<strong class = "text-warning">Any Place</strong>';
                }
            }
            else if (eachRow["placeName"] != undefined && eachRow["placeName"] != null && eachRow["placeName"] != '') {
                var placeName = eachRow["placeName"];
                if (DcDetailsColumn != '' && placeName != '')
                    DcDetailsColumn = DcDetailsColumn + ' to ' + '<strong class="text-warning">' + placeName + '</strong>';
                else if (DcDetailsColumn == '' && placeName != '')
                    DcDetailsColumn = '<strong class="text-warning">' + placeName + '</strong>';
            }
            if (eachRow["UserName"] != undefined && eachRow["UserName"] != null && eachRow["UserName"] != '') {
                var UserName = eachRow["UserName"];
                if (DcDetailsColumn != '' && UserName != '')
                    DcDetailsColumn = DcDetailsColumn + ' for ' + '<strong class="text-warning">' + UserName + '</strong>';
                else if (DcDetailsColumn == '' && UserName != '')
                    DcDetailsColumn = '<strong class="text-warning">' + UserName + '</strong>';
            }
            else if (eachRow["RoleName"] != undefined && eachRow["RoleName"] != null && eachRow["RoleName"] != '') {
                var RoleName = eachRow["RoleName"];
                if (DcDetailsColumn != '' && RoleName != '')
                    DcDetailsColumn = DcDetailsColumn + ' for ' + '<strong class="text-warning">' + RoleName + '</strong>';
                else if (DcDetailsColumn == '' && RoleName != '')
                    DcDetailsColumn = '<strong class="text-warning">' + RoleName + '</strong>';
            }
            ObjectIdColumn = '<div class="col ObjectId" hidden>' + eachRow["ObjectId"] + '</div>';
            PlanDetailsColumn = '<div class="col" style="width:20%">' + PlanDetailsColumn + '</div>';
            DcDetailsColumn = '<div class="col" style="width:75%">' + TemplateName + '<div>' + DcDetailsColumn + '</div></div>';
            var EditbuttonColumn = '<div class="col Edit" style="width:5%"><button class="btn btn-default">Edit</button></div>';
            var CheckColumn = '<div class="col" style="border-left: 4px ' + rowColor + ' solid;"><input id="Chk_' + eachRow["ObjectId"] + '" class="checkbox-custom" type="checkbox"><label for="Chk_' +
                eachRow["ObjectId"] + '" class="checkbox-custom-label"></label></div>';
            var endRow = "</div>";
            layoutInnerHtml = layoutInnerHtml + startRow + CheckColumn + ObjectIdColumn + PlanDetailsColumn + DcDetailsColumn + EditbuttonColumn + endRow;
        }
        return layoutInnerHtml;
    }

    var LoadPlanWiseDetailsData = function (resultData) {
        var layoutInnerHtml = '';
        var groupColumnValue = 0;
        for (var itr = 0; itr < resultData.length; itr++) {
            var eachRow = resultData[itr];
            var oddorevenClass = '';
            var groupRow = '';
            var olength = itr % 2;
            if (olength > 0)
                oddorevenClass = "odd";

            var startRow = '<div class="list-group-item no-padding ' + oddorevenClass + '" onclick="PlanWiseDetailGridRowClick(this)">';
            var PlanDetailsColumn = '<div>';
            var TemplateName = '';
            var DcDetailsColumn = '';
            var completedOrMissed = '';
            if (eachRow["PlanName"] != undefined && eachRow["PlanName"] != null && eachRow["PlanName"] != '')
                PlanDetailsColumn += '<strong>' + eachRow["PlanName"] + '</strong>';
            if (eachRow["PlanGroupName"] != undefined && eachRow["PlanGroupName"] != null && eachRow["PlanGroupName"] != '')
                PlanDetailsColumn += '<p>' + eachRow["PlanGroupName"] + '</p>';
            PlanDetailsColumn += '</div>';
            if (eachRow["TemplateName"] != undefined && eachRow["TemplateName"] != null && eachRow["TemplateName"] != '')
                TemplateName = '<div class="txt-color-dark margin-bottom-10 "><strong>' + eachRow["TemplateName"] + '</strong></div>';
            if (eachRow["MissingCount"] != undefined && eachRow["MissingCount"] != null && eachRow["MissingCount"] == 0) {
                //if (groupColumnValue != eachRow["TemplateGroupId"]) {
                //    groupColumnValue = eachRow["TemplateGroupId"];
                //    var TemplateGroupName = eachRow["TemplateGroupName"];
                //    groupRow = '<div class="list-group-divider">' + (TemplateGroupName != undefined && TemplateGroupName != null ? TemplateGroupName : "") + '</div>';
                //}
                var userLst = eachRow["UserLst"];
                var userNames = '';
                if (userLst != undefined && userLst != null) {
                    for (var item in userLst) {
                        userNames = userNames == '' ? userLst[item] : (userNames + ', ' + userLst[item]);
                    }
                }
                if (DcDetailsColumn != '' && userNames != '')
                    DcDetailsColumn = DcDetailsColumn + ' by ' + userNames;
                else if (DcDetailsColumn == '' && userNames != '')
                    DcDetailsColumn = '<div>Completed By <strong>' + userNames + '</strong>';
                else
                    DcDetailsColumn = '<div>';
                if (eachRow["DCPlaceName"] != undefined && eachRow["DCPlaceName"] != null && eachRow["DCPlaceName"] != '') {
                    var placeName = eachRow["DCPlaceName"];
                    if (DcDetailsColumn != '' && placeName != '')
                        DcDetailsColumn = DcDetailsColumn + ' in ' + '<strong style="color: #8e00fb;">' + placeName + '</strong>';
                    else if (DcDetailsColumn == '' && placeName != '')
                        DcDetailsColumn = '<strong style="color: #8e00fb;">' + placeName + '</strong>';
                }
                var oDatCaptureDetails = eachRow["DatCaptureDetailsDTO"];
                if (oDatCaptureDetails != undefined && oDatCaptureDetails != null) {
                    var conductedDate = oDatCaptureDetails["DCStartDate"];

                    if (conductedDate.indexOf('/Date(') != -1) {
                        if (conductedDate.toString() != "") {
                            try {
                                var date = moment(JSON.parseWithDate(JSON.stringify(conductedDate)));
                                conductedDate = date.format('DD-MM-YYYY H:mm:ss');
                            }
                            catch (ex) {
                                console.log(JSON.stringify(ex));
                                conductedDate = '01-01-0001 00:00:00';
                            }
                        }
                    }
                    if (DcDetailsColumn != '' && conductedDate != '')
                        DcDetailsColumn = DcDetailsColumn + ' Conducted On <strong>' + conductedDate + '</strong>';
                    else if (DcDetailsColumn == '' && conductedDate != '')
                        DcDetailsColumn = 'Conducted On <strong>' + conductedDate + '</strong>';
                }
                DcDetailsColumn += '</div>';
                if (eachRow["IsCompleted"] != undefined && eachRow["IsCompleted"] != null) {
                    if (eachRow["IsCompleted"])
                        completedOrMissed = '<div class="label bg-color-green">COMPLETED</div>';
                    else
                        completedOrMissed = '<div class="label btn bg-color-orange">IN-COMPLETED</div>';
                }
            }
            else if (eachRow["MissingCount"] != undefined && eachRow["MissingCount"] != null && eachRow["MissingCount"] > 0) {
                var userLst = eachRow["UserLst"];
                var userNames = '';
                if (userLst != undefined && userLst != null) {
                    for (var item in userLst) {
                        userNames = userNames == '' ? userLst[item] : (userNames + ', ' + userLst[item]);
                    }
                }
                if (DcDetailsColumn != '' && userNames != '')
                    DcDetailsColumn += ' by ' + userNames;
                else if (DcDetailsColumn == '' && userNames != '')
                    DcDetailsColumn += '<div>Missed By <strong>' + userNames + '</strong>';
                else
                    DcDetailsColumn = '<div>';
                if (eachRow["DCPlaceName"] != undefined && eachRow["DCPlaceName"] != null && eachRow["DCPlaceName"] != '') {
                    var placeName = eachRow["DCPlaceName"];
                    if (DcDetailsColumn != '' && placeName != '')
                        DcDetailsColumn += ' in ' + '<strong style="color: #8e00fb;">' + placeName + '</strong>';
                    else if (DcDetailsColumn == '' && placeName != '')
                        DcDetailsColumn += '<strong style="color: #8e00fb;">' + placeName + '</strong>';
                }
                var MissingCount = eachRow["MissingCount"];
                if (DcDetailsColumn != '' && MissingCount != '' && MissingCount > 0)
                    DcDetailsColumn += ' ' + '<span class = "txt-color-orange">(' + MissingCount + ' Missed)</sapn>';
                else if (DcDetailsColumn == '' && MissingCount != '' && MissingCount > 0)
                    DcDetailsColumn += '<span class = "txt-color-orange">(' + MissingCount + ' Missed)</sapn>';
                DcDetailsColumn += '</div>';
                completedOrMissed = '<div class="label bg-color-red">MISSED</div>';
            }

            PlanDetailsColumn = '<div class="col" style="width:20%">' + PlanDetailsColumn + '</div>';
            DcDetailsColumn = '<div class="col" style="width:70%">' + TemplateName + DcDetailsColumn + '</div>';
            var DataCaptureDetail = '';
            if (eachRow["DatCaptureDetailsDTO"] != undefined && eachRow["DatCaptureDetailsDTO"] != null && eachRow["DatCaptureDetailsDTO"] != '')
                DataCaptureDetail = JSON.stringify(eachRow["DatCaptureDetailsDTO"]);
            completedOrMissed = '<div class="col">' + completedOrMissed + '<div class="DataCaptureDetail" style="width:0px" hidden>' + DataCaptureDetail + '</div></div>';
            var endRow = "</div>";
            layoutInnerHtml = layoutInnerHtml + groupRow + startRow + PlanDetailsColumn + DcDetailsColumn + completedOrMissed + endRow;
        }
        return layoutInnerHtml;
    }

    var LoadPlanDetailsData = function (resultData) {
        var layoutInnerHtml = '';
        var groupColumnValue = 0;
        for (var itr = 0; itr < resultData.length; itr++) {
            var eachRow = resultData[itr];
            var oddorevenClass = '';
            var groupRow = '';
            var olength = itr % 2;
            if (olength > 0)
                oddorevenClass = "odd";

            var startRow = '<div class="list-group-item no-padding ' + oddorevenClass + '" onclick="PlanWiseSummaryGridRowClick(this)">';
            var PlanDetailsColumn = '<div>';
            var CountDetails = '';
            if (eachRow["PlannerName"] != undefined && eachRow["PlannerName"] != null && eachRow["PlannerName"] != '')
                PlanDetailsColumn += '<strong class = "txt-color-blue">' + eachRow["PlannerName"] + '</strong>';
            if (eachRow["PlannerGroupName"] != undefined && eachRow["PlannerGroupName"] != null && eachRow["PlannerGroupName"] != '')
                PlanDetailsColumn = PlanDetailsColumn + '<p>' + eachRow["PlannerGroupName"] + '</p>';
            PlanDetailsColumn += '</div>';
            if (eachRow["CompletedCount"] != undefined && eachRow["CompletedCount"] != null && eachRow["CompletedCount"].toString() != '')
                CountDetails = CountDetails + '<div class="txt-color-green font-xs"><strong>' + eachRow["CompletedCount"] + ' COMPLETED</strong></div>';
            if (eachRow["InCompletedCount"] != undefined && eachRow["InCompletedCount"] != null && eachRow["InCompletedCount"].toString() != '')
                CountDetails = CountDetails + '<div class="txt-color-orange font-xs"><strong>' + eachRow["InCompletedCount"] + ' INCOMPLETE</strong></div>';
            if (eachRow["MissingCount"] != undefined && eachRow["MissingCount"] != null && eachRow["MissingCount"].toString() != '')
                CountDetails = CountDetails + '<div class="txt-color-red font-xs"><strong>' + eachRow["MissingCount"] + ' MISSED</strong></div>';

            PlannerIdColumn = '<div class="col PlannerId" hidden>' + eachRow["PlannerId"] + '</div>';
            PlanDetailsColumn = '<div class="col" style="width:70%">' + PlanDetailsColumn + '</div>';
            CountDetails = '<div class="col" style="width:30%">' + CountDetails + '</div>';
            var ViewbuttonColumn = '<div class="col" style="width:15%"><button class="btn btn-default View"><i class="fa fa-edit fa-lg"></i></button></div>';
            var endRow = "</div>";
            layoutInnerHtml = layoutInnerHtml + startRow + PlannerIdColumn + PlanDetailsColumn + CountDetails + endRow;
        }
        return layoutInnerHtml;
    }

    var LoadManualFollowUpDetailsData = function (resultData) {
        var layoutInnerHtml = '';
        var groupColumnValue = 0;
        for (var itr = 0; itr < resultData.length; itr++) {
            var eachRow = resultData[itr];
            var oddorevenClass = '';
            var PendingClass = '';
            var CompletedClass = '';
            var NotAssignedClass = '';
            var CheckColumn = '<div class="col"><input id="Chk_' + eachRow["ActionDetailId"] + '" class="checkbox-custom" type="checkbox"><label for="Chk_' +
                eachRow["ActionDetailId"] + '" class="checkbox-custom-label"></label></div>';
            var ActionColumn = '';
            var AutomaticFollowUpColumn = '<div class="col" style="width:14%"></div>';
            var ManualFollowUpColumn = '<div class="col" style="width:12%"></div>';
            var buttonColumn = '<div class="col Assign"></div>';
            var olength = itr % 2;
            if (olength > 0)
                oddorevenClass = "odd";
            if (eachRow["IsManualUserAssigned"] != undefined && eachRow["IsManualUserAssigned"] != null && eachRow["IsManualUserAssigned"] == false && eachRow["ActionStatus"] != undefined && eachRow["ActionStatus"] != null && eachRow["ActionStatus"] != '' && eachRow["ActionStatus"] != 'Completed') {
                NotAssignedClass = 'notassign';
                if (eachRow["IsManualAllocated"] != undefined && eachRow["IsManualAllocated"] != null && eachRow["IsManualAllocated"] == true)
                    buttonColumn = '<div class="col Assign"><button class="btn btn-default">Assign</button></div>';
            }
            else if (eachRow["ActionStatus"] != undefined && eachRow["ActionStatus"] != null && eachRow["ActionStatus"] != '' && eachRow["ActionStatus"] != 'Completed')
                PendingClass = 'pending';
            else if (eachRow["ActionStatus"] != undefined && eachRow["ActionStatus"] != null && eachRow["ActionStatus"] != '' && eachRow["ActionStatus"] == 'Completed')
                CompletedClass = 'completed';
            var ActionDetails = '';
            var AutomaticFollowUpDetails = '';
            var ManualFollowUpDetails = '';
            var ActionName = '';
            var RaisedByName = '';
            var RaisedOn = '';
            var PlaceName = '';
            if (eachRow["CustomAction"] != undefined && eachRow["CustomAction"] != null && eachRow["CustomAction"] != '')
                ActionName = ActionName + eachRow["CustomAction"];
            if (eachRow["RaisedByUserName"] != undefined && eachRow["RaisedByUserName"] != null && eachRow["RaisedByUserName"] != '')
                RaisedByName = eachRow["RaisedByUserName"];
            if (eachRow["RaisedOn"] != undefined && eachRow["RaisedOn"] != null && eachRow["RaisedOn"] != '')
                RaisedOn = eachRow["RaisedOn"];
            if (RaisedOn != '') {
                try {
                    RaisedOn = moment(JSON.parseWithDate(JSON.stringify(RaisedOn))).format('D-MM-YYYY H:mm:ss');
                }
                catch (ex) {
                    RaisedOn = '';
                }
            }
            if (eachRow["PreDefinedActionName"] != undefined && eachRow["PreDefinedActionName"] != null && eachRow["PreDefinedActionName"] != '')
                ActionName = (ActionName == '' ? eachRow["PreDefinedActionName"] : (ActionName + ' | ' + eachRow["PreDefinedActionName"]));
            if (eachRow["TemplateName"] != undefined && eachRow["TemplateName"] != null && eachRow["TemplateName"] != '')
                ActionDetails = ActionDetails + '<div class="txt-color-dark margin-bottom-10 "><strong>' + eachRow["TemplateName"] + '</strong></div>';
            if (eachRow["PlaceName"] != undefined && eachRow["PlaceName"] != null && eachRow["PlaceName"] != '')
                PlaceName = eachRow["PlaceName"];
            ActionDetails = ActionDetails + '<div>';
            if (ActionName != '')
                ActionDetails = ActionDetails + '<strong class="txt-color-blue">' + ActionName + '</strong> ';
            if (RaisedByName != '')
                ActionDetails = ActionDetails + 'Raised By <strong class="txt-color-green">' + RaisedByName + '</strong> ';
            if (RaisedOn != '')
                ActionDetails = ActionDetails + 'On <strong>' + RaisedOn + '</strong> ';
            if (PlaceName != '')
                ActionDetails = ActionDetails + 'in <strong style="color: #8e00fb;">' + PlaceName + '</strong>';
            if (CompletedClass != '')
                ActionDetails = ActionDetails + '<strong class="txt-color-green">&nbsp;&nbsp;(Completed)</strong>';
            if (PendingClass != '')
                ActionDetails = ActionDetails + '<strong class="txt-color-orange">&nbsp;&nbsp;(Pending)</strong>';
            ActionDetails = ActionDetails + '</div>';
            AutomaticFollowUpDetails = '<div>'
            if (eachRow["ActionFollowUpUserDetailsLst"] != undefined && eachRow["ActionFollowUpUserDetailsLst"] != null && eachRow["ActionFollowUpUserDetailsLst"] != ''
                && eachRow["ActionFollowUpUserDetailsLst"].length > 0) {
                var UserNames = '';
                var RoleNames = '';
                var AutomaticFollowupDetailLst = eachRow["ActionFollowUpUserDetailsLst"];
                for (var FollowUpitr = 0; FollowUpitr < AutomaticFollowupDetailLst.length; FollowUpitr++) {
                    if (AutomaticFollowupDetailLst[FollowUpitr].FollowByUserName != undefined && AutomaticFollowupDetailLst[FollowUpitr].FollowByUserName != null &&
                        AutomaticFollowupDetailLst[FollowUpitr].FollowByUserName != '') {
                        if (UserNames.indexOf(AutomaticFollowupDetailLst[FollowUpitr].FollowByUserName) == -1)
                            UserNames = (UserNames == '' ? AutomaticFollowupDetailLst[FollowUpitr].FollowByUserName :
                                (UserNames + ', ' + AutomaticFollowupDetailLst[FollowUpitr].FollowByUserName));
                    }
                    if (AutomaticFollowupDetailLst[FollowUpitr].FollowByRoleName != undefined && AutomaticFollowupDetailLst[FollowUpitr].FollowByRoleName != null &&
                        AutomaticFollowupDetailLst[FollowUpitr].FollowByRoleName != '') {
                        if (RoleNames.indexOf(AutomaticFollowupDetailLst[FollowUpitr].FollowByRoleName) == -1)
                            RoleNames = (RoleNames == '' ? AutomaticFollowupDetailLst[FollowUpitr].FollowByRoleName :
                                (RoleNames + ', ' + AutomaticFollowupDetailLst[FollowUpitr].FollowByRoleName));
                    }
                }
                if (UserNames != '')
                    AutomaticFollowUpDetails = AutomaticFollowUpDetails + 'Follow Up By <strong>' + UserNames + '</strong>';
                if (RoleNames != '')
                    AutomaticFollowUpDetails = AutomaticFollowUpDetails + (UserNames == '' ? '' : 'in&nbsp;') + '<strong>' + RoleNames + '</strong>';
            }
            AutomaticFollowUpDetails = AutomaticFollowUpDetails + '</div>'
            ManualFollowUpDetails = '<div>'
            if (eachRow["MaunalFollowUpUserLst"] != undefined && eachRow["MaunalFollowUpUserLst"] != null && eachRow["MaunalFollowUpUserLst"] != ''
                && eachRow["MaunalFollowUpUserLst"].length > 0) {
                var UserNames = '';
                var RoleNames = '';
                var MaunalFollowUpUserLst = eachRow["MaunalFollowUpUserLst"];
                for (var FollowUpitr = 0; FollowUpitr < MaunalFollowUpUserLst.length; FollowUpitr++) {
                    if (MaunalFollowUpUserLst[FollowUpitr].FollowByUserName != undefined && MaunalFollowUpUserLst[FollowUpitr].FollowByUserName != null &&
                        MaunalFollowUpUserLst[FollowUpitr].FollowByUserName != '') {
                        UserNames = (UserNames == '' ? MaunalFollowUpUserLst[FollowUpitr].FollowByUserName :
                            (UserNames + ', ' + MaunalFollowUpUserLst[FollowUpitr].FollowByUserName));
                    }
                    if (MaunalFollowUpUserLst[FollowUpitr].FollowByRoleName != undefined && MaunalFollowUpUserLst[FollowUpitr].FollowByRoleName != null &&
                        MaunalFollowUpUserLst[FollowUpitr].FollowByRoleName != '') {
                        RoleNames = (RoleNames == '' ? MaunalFollowUpUserLst[FollowUpitr].FollowByRoleName :
                            (RoleNames + ', ' + MaunalFollowUpUserLst[FollowUpitr].FollowByRoleName));
                    }
                }
                if (UserNames != '')
                    ManualFollowUpDetails = ManualFollowUpDetails + 'Follow Up By <strong>' + UserNames + '</strong>';
                if (RoleNames != '')
                    ManualFollowUpDetails = ManualFollowUpDetails + (UserNames == '' ? '' : ' in') + '<strong>' + RoleNames + '</strong>';
            }
            ManualFollowUpDetails = ManualFollowUpDetails + '</div>'

            ActionColumn = '<div class="col" style="width: 61%;">' + ActionDetails + '</div>';
            AutomaticFollowUpColumn = '<div class="col" style="width:14%">' + AutomaticFollowUpDetails + '</div>';
            ManualFollowUpColumn = '<div class="col" style="width:12%">' + ManualFollowUpDetails + '</div>';
            var ActionDetailIdColumn = '<div class="col ActionDetailId" hidden>' + eachRow["ActionDetailId"] + '</div>';

            var startRow = '<div class="list-group-item no-padding ' + PendingClass + CompletedClass + NotAssignedClass + ' ' + oddorevenClass + '" onclick="ManualFollowUpActionDetailView()">';
            var endRow = "</div>";
            layoutInnerHtml = layoutInnerHtml + startRow + CheckColumn + ActionDetailIdColumn + ActionColumn + AutomaticFollowUpColumn + ManualFollowUpColumn + buttonColumn + endRow;
        }
        return layoutInnerHtml;
    }

    var LoadManualFollowUpDetailsData_HydeHousing = function (resultData) {
        var layoutInnerHtml = '';
        var groupColumnValue = 0;
        for (var itr = 0; itr < resultData.length; itr++) {
            var eachRow = resultData[itr];
            var oddorevenClass = '';
            var PendingClass = '';
            var CompletedClass = '';
            var NotAssignedClass = '';
            var CheckColumn = '<div class="col smart-form" style="width:30px;">' +
                '<label class="checkbox" style="margin: 0px 3px 5px 0px;"><input id="Chk_' + eachRow["ActionDetailId"] + '" class="checkbox" type="checkbox" name="checkbox"><i></i></label></div>';
            var ActionColumn = '';
            var AutomaticFollowUpColumn = '<div class="col" style="width:14%"></div>';
            var ManualFollowUpColumn = '<div class="col" style="width:12%"></div>';
            var buttonColumn = '<div class="col text-center" style = "width : 20.3%"></div>';
            var olength = itr % 2;
            if (olength > 0)
                oddorevenClass = "odd";
            if (eachRow["IsManualUserAssigned"] != undefined && eachRow["IsManualUserAssigned"] != null && eachRow["IsManualUserAssigned"] == false && eachRow["ActionStatus"] != undefined && eachRow["ActionStatus"] != null && eachRow["ActionStatus"] != '' && eachRow["ActionStatus"] != 'Completed') {
                NotAssignedClass = 'notassign';
                if (eachRow["IsManualAllocated"] != undefined && eachRow["IsManualAllocated"] != null && eachRow["IsManualAllocated"] == true && eachRow["IsDisable"] == false) {
                    buttonColumn = '<div class="col text-center" style = "width : 20.3%"><button class="btn btn-primary RowWiseAssign" ActionDetailId = ' + eachRow["ActionDetailId"] + ' style = "margin-right:5px;">Assign</button>' +
                        '<button class="btn btn-danger Reject" onclick = "RejectButtonClick(this)" ActionDetailId = ' + eachRow["ActionDetailId"] + ' DCId = ' +
                        eachRow["DataCaptureId"] + ' style = "margin-right:5px;">Reject</button><button class="btn btn-primary View" DCId = ' +
                        eachRow["DataCaptureId"] + ' style = "margin-right:5px;" onclick = "ViewButtonClick(this)">View</button></div>';
                }
                else if (eachRow["IsDisable"] == true)
                    buttonColumn = '<div class="col text-center" style = "width : 20.3%"><button class="btn btn-primary View" DCId = ' +
                        eachRow["DataCaptureId"] + ' style = "margin-right:5px;" onclick = "ViewButtonClick(this)">View</button></div>';
                else
                    buttonColumn = '<div class="col text-center" style = "width : 20.3%"><button class="btn btn-danger Reject" onclick = "RejectButtonClick(this)" ActionDetailId = ' + eachRow["ActionDetailId"] + ' DCId = ' +
                        eachRow["DataCaptureId"] + ' style = "margin-right:5px;">Reject</button><button class="btn btn-primary View" DCId = ' +
                        eachRow["DataCaptureId"] + ' style = "margin-right:5px;" onclick = "ViewButtonClick(this)">View</button></div>';
            }
            else if (eachRow["ActionStatus"] != undefined && eachRow["ActionStatus"] != null && eachRow["ActionStatus"] != '' && eachRow["ActionStatus"] != 'Completed')
                PendingClass = 'pending';
            else if (eachRow["ActionStatus"] != undefined && eachRow["ActionStatus"] != null && eachRow["ActionStatus"] != '' && eachRow["ActionStatus"] == 'Completed')
                CompletedClass = 'completed';
            var ActionDetails = '';
            var DefectDetails = '';
            var AutomaticFollowUpDetails = '';
            var ManualFollowUpDetails = '';
            var RaisedByDetails = "";
            var ApartmentDetails = "";
            var ActionName = '';
            var RaisedByName = '';
            var RaisedOn = '';
            var PlaceName = '';
            if (eachRow["CustomAction"] != undefined && eachRow["CustomAction"] != null && eachRow["CustomAction"] != '')
                ActionName = ActionName + eachRow["CustomAction"];
            if (eachRow["RaisedByUserName"] != undefined && eachRow["RaisedByUserName"] != null && eachRow["RaisedByUserName"] != '')
                RaisedByName = eachRow["RaisedByUserName"];
            if (eachRow["RaisedOn"] != undefined && eachRow["RaisedOn"] != null && eachRow["RaisedOn"] != '')
                RaisedOn = eachRow["RaisedOn"];
            if (RaisedOn != '') {
                try {
                    RaisedOn = moment(JSON.parseWithDate(JSON.stringify(RaisedOn))).format('D-MM-YYYY H:mm:ss');
                }
                catch (ex) {
                    RaisedOn = '';
                }
            }
            if (eachRow["PreDefinedActionName"] != undefined && eachRow["PreDefinedActionName"] != null && eachRow["PreDefinedActionName"] != '')
                ActionName = (ActionName == '' ? eachRow["PreDefinedActionName"] : (ActionName + ' | ' + eachRow["PreDefinedActionName"]));
            //if (eachRow["TemplateName"] != undefined && eachRow["TemplateName"] != null && eachRow["TemplateName"] != '')
            //    ActionDetails = ActionDetails + '<div class="txt-color-dark margin-bottom-10 "><strong>' + eachRow["TemplateName"] + '</strong></div>';
            if (eachRow["PlaceName"] != undefined && eachRow["PlaceName"] != null && eachRow["PlaceName"] != '')
                PlaceName = eachRow["PlaceName"];
            if (DefectDetails == "") {
                DefectDetails = '<div class="font-xs" style="margin-top: 5px;">';
                if (CompletedClass != '')
                    DefectDetails = DefectDetails + '<strong class="label label-success">Completed</strong>';
                else if (PendingClass != '')
                    DefectDetails = DefectDetails + '<strong class="label label-info">Pending</strong>';
                else if(eachRow["IsDisable"] == true)
                    DefectDetails = DefectDetails + '<strong class="label label-danger">Rejected</strong>';
                else
                    DefectDetails = DefectDetails + '<strong class="label label-primary">Active</strong>';
                DefectDetails = DefectDetails + '</div>';
            }
            if (ActionName != '')
                ActionDetails = ActionDetails + '<strong class="txt-color-blue">' + ActionName + '</strong> ';
            if (RaisedByName != '')
                RaisedByDetails = RaisedByDetails + 'Raised By <strong class="txt-color-green">' + RaisedByName + '</strong> ';
            if (RaisedOn != '')
                RaisedByDetails = RaisedByDetails + 'On <strong>' + RaisedOn + '</strong> ';
            if (PlaceName != '') {
                ApartmentDetails = ApartmentDetails + '<strong style="color: #8e00fb;">' + PlaceName + '</strong>';
                if (eachRow["PlaceParentDetailsLst"] != undefined && eachRow["PlaceParentDetailsLst"] != null && eachRow["PlaceParentDetailsLst"].length > 0) {
                    var FilteredParentPlace = eachRow["PlaceParentDetailsLst"].filter(OneViewArrayFilter("ParentNodeDATType", 201));
                    if (FilteredParentPlace != undefined && FilteredParentPlace != null && FilteredParentPlace.length > 0)
                        ApartmentDetails += '<div class="font-xs"><span class="txt-color-blueLight"><strong>' + FilteredParentPlace[0].ParentNodeName + '</strong></span></div>';
                }
            }
            AutomaticFollowUpDetails = '<div>'
            if (eachRow["ActionFollowUpUserDetailsLst"] != undefined && eachRow["ActionFollowUpUserDetailsLst"] != null && eachRow["ActionFollowUpUserDetailsLst"] != ''
                && eachRow["ActionFollowUpUserDetailsLst"].length > 0) {
                var UserNames = '';
                var RoleNames = '';
                var AutomaticFollowupDetailLst = eachRow["ActionFollowUpUserDetailsLst"];
                if (AutomaticFollowupDetailLst != undefined && AutomaticFollowupDetailLst != null && AutomaticFollowupDetailLst.length > 0) {
                    if (AutomaticFollowupDetailLst.length == 1) {
                        for (var FollowUpitr = 0; FollowUpitr < AutomaticFollowupDetailLst.length; FollowUpitr++) {
                            if (AutomaticFollowupDetailLst[FollowUpitr].FollowByUserName != undefined && AutomaticFollowupDetailLst[FollowUpitr].FollowByUserName != null &&
                                AutomaticFollowupDetailLst[FollowUpitr].FollowByUserName != '') {
                                if (UserNames.indexOf(AutomaticFollowupDetailLst[FollowUpitr].FollowByUserName) == -1)
                                    UserNames = (UserNames == '' ? AutomaticFollowupDetailLst[FollowUpitr].FollowByUserName :
                                        (UserNames + ', ' + AutomaticFollowupDetailLst[FollowUpitr].FollowByUserName));
                            }
                            if (AutomaticFollowupDetailLst[FollowUpitr].FollowByRoleName != undefined && AutomaticFollowupDetailLst[FollowUpitr].FollowByRoleName != null &&
                                AutomaticFollowupDetailLst[FollowUpitr].FollowByRoleName != '') {
                                if (RoleNames.indexOf(AutomaticFollowupDetailLst[FollowUpitr].FollowByRoleName) == -1)
                                    RoleNames = (RoleNames == '' ? AutomaticFollowupDetailLst[FollowUpitr].FollowByRoleName :
                                        (RoleNames + ', ' + AutomaticFollowupDetailLst[FollowUpitr].FollowByRoleName));
                            }
                        }
                    }
                    else {
                        for (var FollowUpitr = 0; FollowUpitr < AutomaticFollowupDetailLst.length; FollowUpitr++) {
                            if (AutomaticFollowupDetailLst[FollowUpitr].FollowByUserName != undefined && AutomaticFollowupDetailLst[FollowUpitr].FollowByUserName != null &&
                                AutomaticFollowupDetailLst[FollowUpitr].FollowByUserName != '') {
                                if (UserNames.indexOf(AutomaticFollowupDetailLst[FollowUpitr].FollowByUserName) == -1)
                                    UserNames = (UserNames == '' ? AutomaticFollowupDetailLst[FollowUpitr].FollowByUserName :
                                        (UserNames + ', ' + AutomaticFollowupDetailLst[FollowUpitr].FollowByUserName));
                            }
                            if (AutomaticFollowupDetailLst[FollowUpitr].FollowByRoleName != undefined && AutomaticFollowupDetailLst[FollowUpitr].FollowByRoleName != null &&
                                AutomaticFollowupDetailLst[FollowUpitr].FollowByRoleName != '') {
                                if (RoleNames.indexOf(AutomaticFollowupDetailLst[FollowUpitr].FollowByRoleName) == -1)
                                    RoleNames = (RoleNames == '' ? AutomaticFollowupDetailLst[FollowUpitr].FollowByRoleName :
                                        (RoleNames + ', ' + AutomaticFollowupDetailLst[FollowUpitr].FollowByRoleName));
                            }
                        }
                        UserNames = "<a onclick='stopClick(event)' class='' href='javascript:void(0);' rel='popover' data-original-title='Followers' data-placement='bottom' data-html='true' data-content='" + UserNames + " in " + RoleNames + "'><strong style='color : #94c01f;'>More Than One Follower </strong></a>"; //'<a href="#">More Than One Follower</a>';
                        RoleNames = '';
                    }
                }
                if (UserNames != '')
                    AutomaticFollowUpDetails = AutomaticFollowUpDetails + 'Automatic Follow Up By <strong style="color : #94c01f;">' + UserNames + '</strong>';
                if (RoleNames != '')
                    AutomaticFollowUpDetails = AutomaticFollowUpDetails + (UserNames == '' ? '' : ' in ') + '<strong style="color : #94c01f;">' + RoleNames + '</strong>';
            }
            AutomaticFollowUpDetails += '</div>'
            AutomaticFollowUpDetails += '<div>'
            if (eachRow["MaunalFollowUpUserLst"] != undefined && eachRow["MaunalFollowUpUserLst"] != null && eachRow["MaunalFollowUpUserLst"] != ''
                && eachRow["MaunalFollowUpUserLst"].length > 0) {
                var UserNames = '';
                var RoleNames = '';
                var MaunalFollowUpUserLst = eachRow["MaunalFollowUpUserLst"];
                if (MaunalFollowUpUserLst != undefined && MaunalFollowUpUserLst != null && MaunalFollowUpUserLst.length > 0) {
                    if (MaunalFollowUpUserLst.length == 1) {
                        for (var FollowUpitr = 0; FollowUpitr < MaunalFollowUpUserLst.length; FollowUpitr++) {
                            if (MaunalFollowUpUserLst[FollowUpitr].FollowByUserName != undefined && MaunalFollowUpUserLst[FollowUpitr].FollowByUserName != null &&
                                MaunalFollowUpUserLst[FollowUpitr].FollowByUserName != '') {
                                UserNames = (UserNames == '' ? MaunalFollowUpUserLst[FollowUpitr].FollowByUserName :
                                    (UserNames + ', ' + MaunalFollowUpUserLst[FollowUpitr].FollowByUserName));
                            }
                            if (MaunalFollowUpUserLst[FollowUpitr].FollowByRoleName != undefined && MaunalFollowUpUserLst[FollowUpitr].FollowByRoleName != null &&
                                MaunalFollowUpUserLst[FollowUpitr].FollowByRoleName != '') {
                                RoleNames = (RoleNames == '' ? MaunalFollowUpUserLst[FollowUpitr].FollowByRoleName :
                                    (RoleNames + ', ' + MaunalFollowUpUserLst[FollowUpitr].FollowByRoleName));
                            }
                        }
                    }
                    else {
                        for (var FollowUpitr = 0; FollowUpitr < MaunalFollowUpUserLst.length; FollowUpitr++) {
                            if (MaunalFollowUpUserLst[FollowUpitr].FollowByUserName != undefined && MaunalFollowUpUserLst[FollowUpitr].FollowByUserName != null &&
                                MaunalFollowUpUserLst[FollowUpitr].FollowByUserName != '') {
                                if (UserNames.indexOf(MaunalFollowUpUserLst[FollowUpitr].FollowByUserName) == -1)
                                    UserNames = (UserNames == '' ? MaunalFollowUpUserLst[FollowUpitr].FollowByUserName :
                                        (UserNames + ', ' + MaunalFollowUpUserLst[FollowUpitr].FollowByUserName));
                            }
                            if (MaunalFollowUpUserLst[FollowUpitr].FollowByRoleName != undefined && MaunalFollowUpUserLst[FollowUpitr].FollowByRoleName != null &&
                                MaunalFollowUpUserLst[FollowUpitr].FollowByRoleName != '') {
                                if (RoleNames.indexOf(MaunalFollowUpUserLst[FollowUpitr].FollowByRoleName) == -1)
                                    RoleNames = (RoleNames == '' ? MaunalFollowUpUserLst[FollowUpitr].FollowByRoleName :
                                        (RoleNames + ', ' + MaunalFollowUpUserLst[FollowUpitr].FollowByRoleName));
                            }
                        }
                        UserNames = "<a onclick='stopClick(event)' class='' href='javascript:void(0);' rel='popover-hover' data-original-title='Followers' data-placement='bottom' data-html='true' data-content='" + UserNames + " in " + RoleNames + "'><strong style='color : #94c01f;'>More Than One Follower </strong></a>"; //'<a href="#">More Than One Follower</a>';
                        RoleNames = '';
                    }
                }
                if (UserNames != '')
                    AutomaticFollowUpDetails = AutomaticFollowUpDetails + 'Manual Follow Up By <strong style="color : #94c01f;">' + UserNames + '</strong>';
                if (RoleNames != '')
                    AutomaticFollowUpDetails = AutomaticFollowUpDetails + (UserNames == '' ? '' : ' in') + '<strong style="color : #94c01f;">' + RoleNames + '</strong>';
            }
            AutomaticFollowUpDetails = AutomaticFollowUpDetails + '</div>'

            var DCPlaceDetails = '<div class="col" style="width: 15%;">' + ApartmentDetails + '</div>';
            var ActionRaisedDetails = '<div class="col" style="width: 37%;">' + RaisedByDetails + '<div>' + AutomaticFollowUpDetails + '</div></div>';
            var DefectDetailsColumn = '<div class="col font-xs" style="width: 7.7%;">' + DefectDetails + '</div>';
            ActionColumn = '<div class="col" style="width: 20%;">' + ActionDetails + '</div>';
            AutomaticFollowUpColumn = '<div class="col" style="width:19%">' + AutomaticFollowUpDetails + '</div>';
            //ManualFollowUpColumn = '<div class="col" style="width:17%">' + ManualFollowUpDetails + '</div>';
            var ActionDetailIdColumn = '<div class="col ActionDetailId" hidden>' + eachRow["ActionDetailId"] + '</div>';
            var DCIDColumn = '<div class="col DataCaptureId" hidden>' + eachRow["DataCaptureId"] + '</div>';
            var FullRowObject = '<div class="col currentRowObject" hidden>' + JSON.stringify(eachRow) + '</div>';

            var startRow = '<div class="list-group-item no-padding ' + oddorevenClass + '" onclick="">'; //' + PendingClass + CompletedClass + NotAssignedClass + '
            var endRow = "</div>";
            layoutInnerHtml = layoutInnerHtml + startRow + FullRowObject + ActionDetailIdColumn + ActionColumn + DCPlaceDetails + ActionRaisedDetails + DefectDetailsColumn + buttonColumn + endRow;
        }
        return layoutInnerHtml;
    }

    var LoadPeridWiseDetailsData = function (resultData) {
        var layoutInnerHtml = '';
        var groupColumnValue = 0;
        for (var itr = 0; itr < resultData.length; itr++) {
            var eachRow = resultData[itr];
            var oddorevenClass = '';
            var groupRow = '';
            var olength = itr % 2;
            if (olength > 0)
                oddorevenClass = "odd";

            var startRow = '<div class="list-group-item no-padding ' + oddorevenClass + '" onclick="">';
            var PlanDetailsColumn = '<div>';
            var TemplateName = '';
            var DcDetailsColumn = '';
            var completedOrMissed = '';
            if (eachRow["PlanName"] != undefined && eachRow["PlanName"] != null && eachRow["PlanName"] != '')
                PlanDetailsColumn += '<strong>' + eachRow["PlanName"] + '</strong>';
            if (eachRow["PlanGroupName"] != undefined && eachRow["PlanGroupName"] != null && eachRow["PlanGroupName"] != '')
                PlanDetailsColumn += '<p>' + eachRow["PlanGroupName"] + '</p>';
            PlanDetailsColumn += '</div>';
            if (eachRow["TemplateName"] != undefined && eachRow["TemplateName"] != null && eachRow["TemplateName"] != '')
                TemplateName = '<div class="txt-color-dark margin-bottom-10 "><strong>' + eachRow["TemplateName"] + '</strong></div>';
            if (eachRow["MissingCount"] != undefined && eachRow["MissingCount"] != null && eachRow["MissingCount"] == 0) {
                //if (groupColumnValue != eachRow["TemplateGroupId"]) {
                //    groupColumnValue = eachRow["TemplateGroupId"];
                //    var TemplateGroupName = eachRow["TemplateGroupName"];
                //    groupRow = '<div class="list-group-divider">' + (TemplateGroupName != undefined && TemplateGroupName != null ? TemplateGroupName : "") + '</div>';
                //}
                var userLst = eachRow["UserLst"];
                var userNames = '';
                if (userLst != undefined && userLst != null) {
                    for (var item in userLst) {
                        userNames = userNames == '' ? userLst[item] : (userNames + ', ' + userLst[item]);
                    }
                }
                if (DcDetailsColumn != '' && userNames != '')
                    DcDetailsColumn = DcDetailsColumn + ' by ' + userNames;
                else if (DcDetailsColumn == '' && userNames != '')
                    DcDetailsColumn = '<div>Completed By <strong>' + userNames + '</strong>';
                else
                    DcDetailsColumn = '<div>';
                if (eachRow["DCPlaceName"] != undefined && eachRow["DCPlaceName"] != null && eachRow["DCPlaceName"] != '') {
                    var placeName = eachRow["DCPlaceName"];
                    if (DcDetailsColumn != '' && placeName != '')
                        DcDetailsColumn = DcDetailsColumn + ' in ' + '<strong style="color: #8e00fb;">' + placeName + '</strong>';
                    else if (DcDetailsColumn == '' && placeName != '')
                        DcDetailsColumn = '<strong style="color: #8e00fb;">' + placeName + '</strong>';
                }
                var oDatCaptureDetails = eachRow["DatCaptureDetailsDTO"];
                if (oDatCaptureDetails != undefined && oDatCaptureDetails != null) {
                    var conductedDate = oDatCaptureDetails["DCStartDate"];

                    if (conductedDate.indexOf('/Date(') != -1) {
                        if (conductedDate.toString() != "") {
                            try {
                                var date = moment(JSON.parseWithDate(JSON.stringify(conductedDate)));
                                conductedDate = date.format('DD-MM-YYYY H:mm:ss');
                            }
                            catch (ex) {
                                console.log(JSON.stringify(ex));
                                conductedDate = '01-01-0001 00:00:00';
                            }
                        }
                    }
                    if (DcDetailsColumn != '' && conductedDate != '')
                        DcDetailsColumn = DcDetailsColumn + ' Conducted On <strong>' + conductedDate + '</strong>';
                    else if (DcDetailsColumn == '' && conductedDate != '')
                        DcDetailsColumn = 'Conducted On <strong>' + conductedDate + '</strong>';
                }
                DcDetailsColumn += '</div>';
                if (eachRow["IsCompleted"] != undefined && eachRow["IsCompleted"] != null) {
                    if (eachRow["IsCompleted"])
                        completedOrMissed = '<div class="label bg-color-green">COMPLETED</div>';
                    else
                        completedOrMissed = '<div class="label btn bg-color-orange">IN-COMPLETED</div>';
                }
            }
            else if (eachRow["MissingCount"] != undefined && eachRow["MissingCount"] != null && eachRow["MissingCount"] > 0) {
                var userLst = eachRow["UserLst"];
                var userNames = '';
                if (userLst != undefined && userLst != null) {
                    for (var item in userLst) {
                        userNames = userNames == '' ? userLst[item] : (userNames + ', ' + userLst[item]);
                    }
                }
                if (DcDetailsColumn != '' && userNames != '')
                    DcDetailsColumn += ' by ' + userNames;
                else if (DcDetailsColumn == '' && userNames != '')
                    DcDetailsColumn += '<div>Missed By <strong>' + userNames + '</strong>';
                else
                    DcDetailsColumn = '<div>';
                if (eachRow["DCPlaceName"] != undefined && eachRow["DCPlaceName"] != null && eachRow["DCPlaceName"] != '') {
                    var placeName = eachRow["DCPlaceName"];
                    if (DcDetailsColumn != '' && placeName != '')
                        DcDetailsColumn += ' in ' + '<strong style="color: #8e00fb;">' + placeName + '</strong>';
                    else if (DcDetailsColumn == '' && placeName != '')
                        DcDetailsColumn += '<strong style="color: #8e00fb;">' + placeName + '</strong>';
                }
                var MissingCount = eachRow["MissingCount"];
                if (DcDetailsColumn != '' && MissingCount != '' && MissingCount > 0)
                    DcDetailsColumn += ' ' + '<span class = "txt-color-orange">(' + MissingCount + ' Missed)</sapn>';
                else if (DcDetailsColumn == '' && MissingCount != '' && MissingCount > 0)
                    DcDetailsColumn += '<span class = "txt-color-orange">(' + MissingCount + ' Missed)</sapn>';
                DcDetailsColumn += '</div>';
                completedOrMissed = '<div class="label bg-color-red">MISSED</div>';
            }

            PlanDetailsColumn = '<div class="col" style="width:20%">' + PlanDetailsColumn + '</div>';
            DcDetailsColumn = '<div class="col" style="width:70%">' + TemplateName + DcDetailsColumn + '</div>';
            var DataCaptureDetail = '';
            if (eachRow["DatCaptureDetailsDTO"] != undefined && eachRow["DatCaptureDetailsDTO"] != null && eachRow["DatCaptureDetailsDTO"] != '')
                DataCaptureDetail = JSON.stringify(eachRow["DatCaptureDetailsDTO"]);
            completedOrMissed = '<div class="col">' + completedOrMissed + '<div class="DataCaptureDetail" style="width:0px" hidden>' + DataCaptureDetail + '</div></div>';
            var endRow = "</div>";
            layoutInnerHtml = layoutInnerHtml + groupRow + startRow + PlanDetailsColumn + DcDetailsColumn + completedOrMissed + endRow;
        }
        return layoutInnerHtml;
    }

    var AjaxCall = function (Url, parameterToLoadData, isAsync) {
        var result;
        $.ajax({
            url: Url,
            contentType: 'application/json; charset=utf-8',
            type: 'POST',
            dataType: 'json',
            data: parameterToLoadData,
            async: isAsync,
            success: function (response) {
                if (result != null && result != undefined && result == "Session Failure") {
                    window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
                    return false;
                }
                else if (navigator != undefined && navigator != null && !navigator.onLine)
                    ShowMessage("IN-ER-ALP-001 :: Please Check Your Internet Connectivity", 4);
                else
                    result = response;
            },
            error: function (result) {
                if (navigator != undefined && navigator != null && !navigator.onLine)
                    ShowMessage("IN-ER-ALP-001 :: Please Check Your Internet Connectivity", 4);
                else
                    ShowMessage("IN-ER-PRO-001 :: Error in current operation.", 4);
            }
        });
        return result;
    }
}

function stopClick(e) {
    //$("[rel=popover]").popover("hide");
    //e.stopPropagation();
    $("[rel=popover]").popover();
};

function UpdateGridViewFooter(Direction) {
    var oGridViewFooter = $("#GridViewFooter");
    var oPageEndCount = 0;
    if (oGridViewFooter != undefined && oGridViewFooter != null && oGridViewFooter.length > 0) {
        var oGridPageInfo = oGridViewFooter.find('.GridPageInfo');
        if (oGridPageInfo != undefined && oGridPageInfo != null && oGridPageInfo.length > 0) {
            var TotalPages = parseInt(TotalRecCount / CurrentPageSize);
            if ((TotalRecCount % CurrentPageSize) > 0)
                TotalPages = TotalPages + 1;
            if (Direction == "Next") {
                CurrentPageNo = CurrentPageNo + 1;
                if (CurrentPageNo <= TotalPages) {
                    PageStartCount = PageEndCount + 1;
                    PageEndCount = PageEndCount + CurrentPageSize;
                }
                else {
                    CurrentPageNo = TotalPages;
                }
                if (PageEndCount > TotalRecCount)
                    oPageEndCount = TotalRecCount;
                else
                    oPageEndCount = PageEndCount;
            }
            else if (Direction == "Last") {
                if (CurrentPageNo != TotalPages) {
                    CurrentPageNo = TotalPages;
                    PageStartCount = ((TotalPages - 1) * CurrentPageSize) + 1;
                    PageEndCount = TotalPages * CurrentPageSize;
                }
                if (PageEndCount > TotalRecCount)
                    oPageEndCount = TotalRecCount;
                else
                    oPageEndCount = PageEndCount;
            }
            else if (Direction == "Previous") {
                CurrentPageNo = CurrentPageNo - 1;
                if (CurrentPageNo >= 1) {
                    PageStartCount = PageStartCount - CurrentPageSize;
                    PageEndCount = PageEndCount - CurrentPageSize;
                    oPageEndCount = PageEndCount;
                }
                else {
                    oPageEndCount = PageEndCount;
                    CurrentPageNo = 1;
                }
            }
            else if (Direction == "First") {
                CurrentPageNo = 1;
                PageStartCount = 1;
                PageEndCount = CurrentPageSize;
                oPageEndCount = PageEndCount;
            }
            else {
                CurrentPageNo = 1;
                if (TotalRecCount == 0) {
                    PageStartCount = 0;
                    PageEndCount = 0;
                    oPageEndCount = 0;
                }
                else {
                    PageStartCount = 1;
                    if (CurrentPageSize < TotalRecCount)
                        PageEndCount = CurrentPageSize;
                    else
                        PageEndCount = TotalRecCount;
                    oPageEndCount = PageEndCount;
                }
            }
            var GridInfoText = "Showing <b>" + PageStartCount + "</b> to <b>" + oPageEndCount + "</b> of <b>" + TotalRecCount + "</b> Records";
            oGridPageInfo.html(GridInfoText);
            DisableOrEnableFooterPageButton();
        }
    }
}

function ListGroupItemAddOrEditClick(ClientID, $this) {
    var parentSection = $($this).parent().parent();
    var button = parentSection.find('.add-custom');
    var appendbutton = parentSection.find('.appendbutton');
    //var appendbutton = document.getElementById('appendbutton');
    var groupId = "group_" + ModelUpdate.HTMLPageID + "_" + ClientID;
    if (ListViewModel[groupId] == null) {
        ListViewModel[groupId] = [];
    }

    if (appendbutton.length > 0) {
        if (appendbutton[0].value.trim() != '') {
            var buttonText = button.find('span').html();
            if (buttonText == 'Edit') {
                var activeLi = $('#' + groupId).find('.list-group-item.clicked');
                if (activeLi != undefined && activeLi != null && activeLi.length != undefined && activeLi.length > 0) {
                    activeLi = activeLi[0];
                    var uniqueRef = activeLi.getAttribute("uniqueRef");
                    $(activeLi).html(appendbutton[0].value.trim() + '<a href="javascript:void(0);" itemvalue = "' +
                        appendbutton[0].value.trim() + '" class="btn btn-danger pull-right"><i class="fa fa-minus"></i></a>')
                    var filteredLst = ListViewModel[groupId].filter(OneViewArrayFilter("uniqueRef", parseInt(uniqueRef)));
                    if (filteredLst != undefined && filteredLst != null && filteredLst.length > 0) {
                        for (var itr = 0; itr < filteredLst.length; itr++) {
                            filteredLst[itr]["name"] = appendbutton[0].value.trim();
                        }
                    }
                }
                button.find('span').html('Add');
                $('#' + groupId).find('.list-group-item').each(function () {
                    $(this).removeClass('clicked');
                });
                $('.list-group-item a').on('click', function () {
                    var lParentSection = parentSection;
                    if (ListViewModel[groupId] != undefined && ListViewModel[groupId] != null) {
                        var lstArray = ListViewModel[groupId];
                        for (var i = 0; i < lstArray.length; i++) {
                            if (lstArray[i].name == this.attributes['itemvalue'].value && lstArray[i].id == 0) {
                                //lstArray[i]=null;
                                lstArray.splice(i, 1);
                                break;
                            }
                        }
                    }

                    $(this).closest('li').remove();
                    button.find('span').html('Add');
                    appendbutton[0].value = '';
                });
            }
            else {
                var listViewModelLength = ListViewModel[groupId].length;
                if (listViewModelLength != undefined && listViewModelLength != null && listViewModelLength > 0) {
                    listViewModelLength = OneViewFindMaxValueFromArray('uniqueRef', ListViewModel[groupId]);
                    listViewModelLength = listViewModelLength + 1;
                }
                else
                    listViewModelLength = 1;
                $('#' + groupId).append('<li class="list-group-item" uniqueRef = ' + listViewModelLength + '>' +
                    appendbutton[0].value + '<a href="javascript:void(0);" itemvalue = "' +
                    appendbutton[0].value + '" class="btn btn-danger pull-right"><i class="fa fa-minus"></i></a></li>');
                $('.list-group-item a').on('click', function () {
                    var lParentSection = parentSection;
                    if (ListViewModel[groupId] != undefined && ListViewModel[groupId] != null) {
                        var lstArray = ListViewModel[groupId];
                        for (var i = 0; i < lstArray.length; i++) {
                            if (lstArray[i].name == this.attributes['itemvalue'].value && lstArray[i].id == 0) {
                                //lstArray[i]=null;
                                lstArray.splice(i, 1);
                                break;
                            }
                        }
                    }

                    $(this).closest('li').remove();
                    button.find('span').html('Add');
                    appendbutton[0].value = '';
                });
                AddClickEventForListGroupItem(ClientID);
                ListViewModel[groupId].push({ id: 0, uniqueRef: listViewModelLength, name: appendbutton[0].value, index: -1, Isdisabled: false, IsMulti: true });
            }
            appendbutton[0].value = '';
        }
        else if (appendbutton[0].value.trim() == '')
            appendbutton[0].value = '';
    }
}

function AddClickEventForListGroupItem(ClientID) {
    var groupControl = $('#group_' + ModelUpdate.HTMLPageID + '_' + ClientID);
    groupControl.find('.list-group-item').each(function () {
        $(this).removeClass('clicked');
    });
    groupControl.find('.list-group-item').unbind('click');
    groupControl.find('.list-group-item').click(function () {
        var parentSection = $(this).parent().parent();
        if (parentSection != undefined && parentSection != null && parentSection.length != undefined && parentSection.length > 0) {
            if (parentSection[0].tagName == 'SECTION') {
                var appendText = parentSection.find('.appendbutton');
                if (appendText != undefined && appendText != null && appendText.length != undefined && appendText.length > 0) {
                    appendText[0].value = this.textContent;
                }
                var button = parentSection.find('.add-custom');
                button.find('span').html('Edit');
            }
        }
        $(this).addClass('clicked');
    });
}

function DownloadProfileData(pagetitle, filterParam) {
    var myAjaxobj = new WiNAiMAjax();
    myAjaxobj.url = GetRelativeUrl("/Profile/GetAllProfiledData/" + pagetitle);
    myAjaxobj.webMethod = "post";
    myAjaxobj.async = false;
    if (filterParam != undefined && filterParam != null) {
        filterParam = { request: JSON.stringify(filterParam) };
        myAjaxobj.parameter = JSON.stringify(filterParam)
    }
    var callBackparm = {
        success: DownloadTemplateSuccesss,
        error: DownloadTemplateError,
        sender: this
    }
    myAjaxobj.execute(callBackparm);
}

function DownloadDataWithFilter() {
    $('#FilterPopUp').find('select').each(function () {
        if ($(this).data().select2 != undefined) {
            if ($(this).data().select2.clear != undefined)
                $(this).data().select2.clear();
            else {
                var oSelected = $(this).data().select2.selection;
                var selectedChoice = oSelected.find(".select2-search-choice");
                if (selectedChoice.length > 0)
                    $(this).data().select2.unselect(selectedChoice);
            }
        }
    });
    $('#FilterPopUp').modal('show');
}

function LoadProfileScreenFilterDDL()
{
    var _AdvDataLoadEvent = new AdvDataLoadEvent();
    _AdvDataLoadEvent.Url = GetRelativeUrl("/Home/GetDatacaptrueDimension");
    _AdvDataLoadEvent.Async = false;
    _AdvDataLoadEvent.ControlIds = [{ ControlId: "PlaceDimension", ParamName: "PlaceDimension" }];
    _AdvDataLoadEvent.selectValue = false;
    _AdvDataLoadEvent.DropDownLoad();

    $('#PlaceDimension').click(function () {
        LoadPlaceProfileScreenFilterDDL()
    });
    LoadPlaceProfileScreenFilterDDL();

    _AdvDataLoadEvent = new AdvDataLoadEvent();
    _AdvDataLoadEvent.Url = GetRelativeUrl("/Profile/GetAllTemplate");
    _AdvDataLoadEvent.Async = false;
    _AdvDataLoadEvent.ControlIds = [{ ControlId: "ddlTempName", ParamName: "ddlTempName" }];
    _AdvDataLoadEvent.selectValue = false;
    _AdvDataLoadEvent.DropDownLoad();

    _AdvDataLoadEvent = new AdvDataLoadEvent();
    _AdvDataLoadEvent.Url = GetRelativeUrl("/Profile/GetAllOperationContext");
    _AdvDataLoadEvent.Async = false;
    _AdvDataLoadEvent.ControlIds = [{ ControlId: "ddlOperationContext", ParamName: "ddlOperationContext" }];
    _AdvDataLoadEvent.selectValue = false;
    _AdvDataLoadEvent.DropDownLoad();

    $('#ddlOperationContext').click(function () {
        LoadRoleProfileScreenFilterDDL();
    });

    LoadRoleProfileScreenFilterDDL();

    $('#ddlRole').click(function () {
        LoadUserProfileScreenFilterDDL();
    });
    LoadUserProfileScreenFilterDDL();
}

function LoadPlaceProfileScreenFilterDDL() {
    var _AdvDataLoadEvent = new AdvDataLoadEvent();
    _AdvDataLoadEvent.Url = GetRelativeUrl("/Profile/GetAllPlace");
    _AdvDataLoadEvent.Async = false;
    _AdvDataLoadEvent.ControlIds = [{ ControlId: "ddlPlaceName", ParamName: "ddlPlaceName" }];
    _AdvDataLoadEvent.FilterParam = [{ ControlId: "PlaceDimension", ParamName: "PlaceDimension" }];
    _AdvDataLoadEvent.selectValue = false;
    _AdvDataLoadEvent.DropDownLoad();
}

function LoadRoleProfileScreenFilterDDL() {
    var _AdvDataLoadEvent = new AdvDataLoadEvent();
    _AdvDataLoadEvent.Url = GetRelativeUrl("/Profile/GetAllRole");
    _AdvDataLoadEvent.Async = false;
    _AdvDataLoadEvent.ControlIds = [{ ControlId: "ddlRole", ParamName: "ddlRole" }];
    _AdvDataLoadEvent.FilterParam = [{ ControlId: "ddlOperationContext", ParamName: "ddlOperationContext" }];
    _AdvDataLoadEvent.selectValue = false;
    _AdvDataLoadEvent.DropDownLoad();
}

function LoadUserProfileScreenFilterDDL() {
    var _AdvDataLoadEvent = new AdvDataLoadEvent();
    _AdvDataLoadEvent.Url = GetRelativeUrl("/Profile/GetAllUser");
    _AdvDataLoadEvent.Async = false;
    _AdvDataLoadEvent.ControlIds = [{ ControlId: "ddlUser", ParamName: "ddlUser" }];
    _AdvDataLoadEvent.FilterParam = [{ ControlId: "ddlOperationContext", ParamName: "ddlOperationContext" }, { ControlId: "ddlRole", ParamName: "ddlRole" }];
    _AdvDataLoadEvent.selectValue = false;
    _AdvDataLoadEvent.DropDownLoad();
}

function GetParamToFilterProfile() {
    var oPlaceDimension = document.getElementById('PlaceDimension');
    var oddlPlaceName = document.getElementById('ddlPlaceName');
    var oddlTempName = document.getElementById('ddlTempName');
    var oddlOperationContext = document.getElementById('ddlOperationContext');
    var oddlRole = document.getElementById('ddlRole');
    var oddlUser = document.getElementById('ddlUser');
    var oProfileFilterParam = {};
    if (oPlaceDimension != undefined && oPlaceDimension != null)
        oProfileFilterParam["PlaceDimension"] = oPlaceDimension.value;
    if (oddlPlaceName != undefined && oddlPlaceName != null) {
        var comboItemId = [];
        for (var item in oddlPlaceName.children) {
            if (oddlPlaceName.children[item].selected && comboItemId != oddlPlaceName.children[item].value.toString()) {
                if (comboItemId == undefined) {
                    comboItemId = [];
                    comboItemId.push(oddlPlaceName.children[item].value.toString());
                }
                else {
                    var index = comboItemId.indexOf(oddlPlaceName.children[item].value.toString());
                    if (index == -1)
                        comboItemId.push(oddlPlaceName.children[item].value.toString());
                }
            }
        }
        oProfileFilterParam["ddlPlaceName"] = comboItemId;
    }
    if (oddlTempName != undefined && oddlTempName != null) {
        var comboItemId = [];
        for (var item in oddlTempName.children) {
            if (oddlTempName.children[item].selected && comboItemId != oddlTempName.children[item].value.toString()) {
                if (comboItemId == undefined) {
                    comboItemId = [];
                    comboItemId.push(oddlTempName.children[item].value.toString());
                }
                else {
                    var index = comboItemId.indexOf(oddlTempName.children[item].value.toString());
                    if (index == -1)
                        comboItemId.push(oddlTempName.children[item].value.toString());
                }
            }
        }
        oProfileFilterParam["ddlTempName"] = comboItemId;
    }
    if (oddlOperationContext != undefined && oddlOperationContext != null)
        oProfileFilterParam["ddlOperationContext"] = oddlOperationContext.value;
    if (oddlRole != undefined && oddlRole != null)
        oProfileFilterParam["ddlRole"] = oddlRole.value;
    if (oddlUser != undefined && oddlUser != null) {
        var comboItemId = [];
        for (var item in oddlUser.children) {
            if (oddlUser.children[item].selected && comboItemId != oddlUser.children[item].value.toString()) {
                if (comboItemId == undefined) {
                    comboItemId = [];
                    comboItemId.push(oddlUser.children[item].value.toString());
                }
                else {
                    var index = comboItemId.indexOf(oddlUser.children[item].value.toString());
                    if (index == -1)
                        comboItemId.push(oddlUser.children[item].value.toString());
                }
            }
        }
        oProfileFilterParam["ddlUser"] = comboItemId;
    }
    return oProfileFilterParam;
}

function DisableOrEnableFooterPageButton() {
    var TotalPages = parseInt(TotalRecCount / CurrentPageSize);
    if ((TotalRecCount % CurrentPageSize) > 0)
        TotalPages = TotalPages + 1;
    var btn_First = document.getElementById('btn_First');
    var btn_Prev = document.getElementById('btn_Prev');
    var btn_Last = document.getElementById('btn_Last');
    var btn_Next = document.getElementById('btn_Next');
    if (TotalPages == 1) {
        if (btn_First != undefined && btn_First != null)
            btn_First.setAttribute("disabled", "");
        if (btn_Prev != undefined && btn_Prev != null)
            btn_Prev.setAttribute("disabled", "");
        if (btn_Last != undefined && btn_Last != null)
            btn_Last.setAttribute("disabled", "");
        if (btn_Next != undefined && btn_Next != null)
            btn_Next.setAttribute("disabled", "");
    }
    else if (TotalPages == CurrentPageNo) {
        if (btn_First != undefined && btn_First != null)
            btn_First.removeAttribute("disabled");
        if (btn_Prev != undefined && btn_Prev != null)
            btn_Prev.removeAttribute("disabled");
        if (btn_Last != undefined && btn_Last != null)
            btn_Last.setAttribute("disabled", "");
        if (btn_Next != undefined && btn_Next != null)
            btn_Next.setAttribute("disabled", "");
    }
    else if (CurrentPageNo == 1) {
        if (btn_First != undefined && btn_First != null)
            btn_First.setAttribute("disabled", "");
        if (btn_Prev != undefined && btn_Prev != null)
            btn_Prev.setAttribute("disabled", "");
        if (btn_Last != undefined && btn_Last != null)
            btn_Last.removeAttribute("disabled");
        if (btn_Next != undefined && btn_Next != null)
            btn_Next.removeAttribute("disabled");
    }
    else if (TotalPages > CurrentPageNo) {
        if (btn_First != undefined && btn_First != null)
            btn_First.removeAttribute("disabled");
        if (btn_Prev != undefined && btn_Prev != null)
            btn_Prev.removeAttribute("disabled");
        if (btn_Last != undefined && btn_Last != null)
            btn_Last.removeAttribute("disabled");
        if (btn_Next != undefined && btn_Next != null)
            btn_Next.removeAttribute("disabled");
    }
}

/* <======= OneView Common Component and Methods. Added by Devaraj.S on 25-01-2016 23:09. =======> Start. */

function CreateTabHtml() {
    var myInstance = this;
    this.TabConfigLst = null;
    this.WidgetGroupRowId = '';
    var HeaderControlId = '';
    var currentTab = null;

    this.CreateHeaderFrameForPage = function (HeaderFrameId) {
        HeaderControlId = HeaderFrameId;
        var Html = '';
        var _AppendOrSetHtml = new AppendOrSetHtml();
        _AppendOrSetHtml.ControlId = HeaderFrameId;
        if (myInstance.TabConfigLst.length > 1) {
            Html = myInstance.GetHtmlDefaultHeaderFrameForPage(myInstance.TabConfigLst);
        }
        _AppendOrSetHtml.Html = Html;
        _AppendOrSetHtml.SetHtml();
        $("#" + HeaderFrameId).find('a').on('click', myInstance.tabclickEvent);
    }

    this.GetHtmlDefaultHeaderFrameForPage = function () {
        var HeaderHtml = '';
        for (var oTabConfig in myInstance.TabConfigLst) {
            if (typeof (myInstance.TabConfigLst[oTabConfig]) != "function") {
                var activeClass = '';
                if (oTabConfig == 0)
                    activeClass = 'active';
                HeaderHtml += '<li class="tab"><a class="' + activeClass + '" href="" id = "' + myInstance.TabConfigLst[oTabConfig].ControlId + '">' +
                    _GetGlobalization.GetGlobalizationValue(myInstance.TabConfigLst[oTabConfig].DisplayNameKey) + '</a></li>';
                //var activeClass = '';
                //if (oTabConfig == 0)
                //    activeClass = 'active';
                //HeaderHtml += '<button type="button" class="btn btn-default ' + activeClass + '" id = "' + myInstance.TabConfigLst[oTabConfig].ControlId + '">' +
                //_GetGlobalization.GetGlobalizationValue(myInstance.TabConfigLst[oTabConfig].DisplayNameKey) +
                //        '</button>';
            }
        }
        return HeaderHtml;
    }

    this.setDefaultPageHeaderHtml = function (HeaderFrameId, HeaderHtml) {
        if (HeaderFrameId != undefined && HeaderFrameId != null) {
            var HeaderFrameDom = document.getElementById(HeaderFrameId);
            if (HeaderFrameDom != undefined && HeaderFrameDom != null) {
                HeaderFrameDom.innerHTML = (HeaderHtml != undefined && HeaderHtml != null && HeaderHtml != '' ? HeaderHtml : '');
            }
        }
    }

    this.tabclickEvent = function () {
        RemoveMessage();
        var target = LoadingImage();
        var delay = 1;
        currentTab = this;
        setTimeout(function () {
            $("#" + HeaderControlId).find('button').each(function () {
                $(this).removeClass('active');
            });
            $(currentTab).addClass('active');
            var FilteredResult = myInstance.TabConfigLst.filter(OneViewArrayFilter("ControlId", currentTab.id));
            if (FilteredResult != undefined && FilteredResult != null && FilteredResult.length > 0) {
                var CurrentDashboardTabConfig = FilteredResult[0];
                var _DBCFrameWork = new DBCFrameWork();
                _DBCFrameWork.TabFilterParamId = oTabFilterParamId;
                _DBCFrameWork.CreateDashBoardPageTabContent(CurrentDashboardTabConfig);

                var _WidgetConfig = new WidgetConfig();
                _WidgetConfig.ListOfWidgets = CurrentDashboardTabConfig.WidgetConfigLst;
                _WidgetConfig.TabLayoutConfigDict = CurrentDashboardTabConfig.TabLayoutConfigDict;
                _WidgetConfig.WidgetGroupId = myInstance.WidgetGroupRowId;
                _WidgetConfig.Load();
            }
            RemoveLoadingImage(target);

            //setup_widgets_desktop();
        }, delay);
    }
}

function CreatePageTabHtml() {
    var myInstance = this;
    this.TabConfigLst = null;
    this.WidgetGroupRowId = '';
    this.tabclickEvent = null;
    var HeaderControlId = '';
    var currentTab = null;

    this.CreateHeaderFrameForPage = function (HeaderFrameId) {
        HeaderControlId = HeaderFrameId;
        var Html = '';
        var _AppendOrSetHtml = new AppendOrSetHtml();
        _AppendOrSetHtml.ControlId = HeaderFrameId;
        if (myInstance.TabConfigLst.length > 1) {
            Html = myInstance.GetHtmlDefaultHeaderFrameForPage(myInstance.TabConfigLst);
        }
        _AppendOrSetHtml.Html = Html;
        _AppendOrSetHtml.SetHtml();
        $("#" + HeaderFrameId).find('a').on('click', myInstance.tabclickEvent);
    }

    this.GetHtmlDefaultHeaderFrameForPage = function () {
        var HeaderHtml = '';
        for (var oTabConfig in myInstance.TabConfigLst) {
            if (typeof (myInstance.TabConfigLst[oTabConfig]) != "function") {
                var activeClass = '';
                if (oTabConfig == 0)
                    activeClass = 'active';
                HeaderHtml += '<li class="tab" id="ReportTab"><a class="' + activeClass + '" href="" id = "' + oTabConfig + '">' +
                    _GetGlobalization.GetGlobalizationValue(myInstance.TabConfigLst[oTabConfig].DisplayNameKey) + '</a></li>';
                //HeaderHtml += '<button type="button" class="btn btn-default ' + activeClass + '" id = "' + oTabConfig + '">' +
                //_GetGlobalization.GetGlobalizationValue(myInstance.TabConfigLst[oTabConfig].DisplayNameKey) +
                //        '</button>';
            }
        }
        return HeaderHtml;
    }

    this.setDefaultPageHeaderHtml = function (HeaderFrameId, HeaderHtml) {
        if (HeaderFrameId != undefined && HeaderFrameId != null) {
            var HeaderFrameDom = document.getElementById(HeaderFrameId);
            if (HeaderFrameDom != undefined && HeaderFrameDom != null) {
                HeaderFrameDom.innerHTML = (HeaderHtml != undefined && HeaderHtml != null && HeaderHtml != '' ? HeaderHtml : '');
            }
        }
    }
}

function CreateFixedTabHtml() {
    var myInstance = this;
    this.TabConfigLst = null;
    this.HeaderContentPlaceHolderId = '';
    this.tabclickEvent = null;
    var currentTab = null;

    this.CreateTabHeader = function () {
        var Html = '<div class="row no-padding no-margin text-center">';
        var _AppendOrSetHtml = new AppendOrSetHtml();
        _AppendOrSetHtml.ControlId = myInstance.HeaderContentPlaceHolderId;
        if (myInstance.TabConfigLst.length > 0) {
            Html += myInstance.GetHtmlHeaderFrameForTab(myInstance.TabConfigLst);
        }
        Html += '</div>';
        _AppendOrSetHtml.Html = Html;
        _AppendOrSetHtml.SetHtml();
        $("#" + myInstance.HeaderContentPlaceHolderId).find('a').on('click', myInstance.tabclickEvent);
    }

    this.GetHtmlHeaderFrameForTab = function () {
        var HeaderHtml = '';
        for (var oTabConfig in myInstance.TabConfigLst) {
            if (typeof (myInstance.TabConfigLst[oTabConfig]) != "function") {
                var activeClass = '';
                var refClass = '';
                if (oTabConfig == 0)
                    activeClass = 'active';
                var columnWidth = 0;
                try {
                    columnWidth = Math.round(12 / myInstance.TabConfigLst.length);
                }
                catch (ex) {
                    columnWidth = 0;
                    window.console.log('columnWidth not proper.');
                }
                var TabConfig = myInstance.TabConfigLst[oTabConfig];
                var TabName = '';
                if (TabConfig.OrderByDimension == 1) /* DC User */ {
                    TabName = _GetGlobalization.GetGlobalizationValue(TabConfig.DisplayNameKey);
                    refClass = "User";
                }
                else if (TabConfig.OrderByDimension == 2) /* DC Palce */ {
                    TabName = _GetGlobalization.GetGlobalizationValue(TabConfig.DisplayNameKey);
                    refClass = "Place";
                }
                else if (TabConfig.OrderByDimension == 3) /* Template */ {
                    TabName = _GetGlobalization.GetGlobalizationValue(TabConfig.DisplayNameKey);
                    refClass = "Template";
                }
                else if (TabConfig.OrderByDimension == 4) /* Schedule */ {
                    TabName = _GetGlobalization.GetGlobalizationValue(TabConfig.DisplayNameKey);
                    refClass = "Schedule";
                }
                /* TODO: For Tab Name need to give globalization Key. Devaraj S */
                HeaderHtml += '<div class="col-sm-' + columnWidth + ' no-padding"><a href="javascript:void(0);" id = "' + (parseInt(oTabConfig) + 1) + '" dimensionIndex = ' + TabConfig.OrderByDimension + ' class="' + activeClass + ' ' + refClass + '"><i class="fa fa-ban"></i><div>' +
                    _GetGlobalization.GetGlobalizationValue(TabName).toUpperCase() + '</div></a>' +
                        '</div>';
            }
        }
        return HeaderHtml;
    }
}

function CreateHTMLPage() {
    var myInstance = this;
    this.lCurrentPageConfig = null;
    this.MergePageConfig = false;
    var TypeOfFilterParam = '';

    this.Load = function () {
        var FilterParamHtml = '';
        var lReportFilterParamConfig = myInstance.lCurrentPageConfig;
        if (lReportFilterParamConfig != undefined && lReportFilterParamConfig != null) {
            TypeOfFilterParam = lReportFilterParamConfig.Type;
            FilterParamHtml = myInstance.GetFrameHtml();
        }
        return FilterParamHtml;
    }

    this.Initialize = function (TypeOfFilterParam) {
        var lReportFilterParamConfig = myInstance.lCurrentPageConfig;
        if (lReportFilterParamConfig != undefined && lReportFilterParamConfig != null) {
            if (TypeOfFilterParam == 'DefaultHTMLPageConfig') {
                var _CreateHTMLPageHTML = new CreateHTMLPageHTML();
                var ControlsHtml = _CreateHTMLPageHTML.CreateControls(myInstance.lCurrentPageConfig.ControlGroupConfigLst);
                myInstance.SetHtml('htmlControls', ControlsHtml);
                _CreateHTMLPageHTML.SetControls(myInstance.lCurrentPageConfig.ControlGroupConfigLst);

                var _LoadControlData = new LoadControlData(myInstance.lCurrentPageConfig);
                _LoadControlData.MergePageConfig = myInstance.MergePageConfig;
                _LoadControlData.Load();
                myInstance.SetHtml('htmlControls', '');
            }
        }
    }

    this.SetHtml = function (ControlId, Html) {
        if (ControlId != undefined && ControlId != null && ControlId != '') {
            var Control = document.getElementById(ControlId);
            if (Control != undefined && Control != null) {
                Control.innerHTML = '';
                Control.innerHTML = Html;
            }
        }
    }

    this.GetFrameHtml = function () {
        var FilterParamHtml = '';
        if (TypeOfFilterParam == 'DefaultHTMLPageConfig') {
            FilterParamHtml = GetDefaultFilterParamHtml();
        }
        else {
            var _Message = new OneViewMessageBox();
            _Message.ShowNotification("Not Implemented Exception", 4);
            return false;
        }
        return FilterParamHtml;
    }

    var GetDefaultFilterParamHtml = function () {
        var _CreateHTMLPageHTML = new CreateHTMLPageHTML();
        _CreateHTMLPageHTML.HTMLPageConfig = myInstance.lCurrentPageConfig;
        var innerHtml = _CreateHTMLPageHTML.CreateFramePartial();
        return innerHtml;
    }
}

function CreateHTMLPageHTML() {
    var myInstance = this;
    this.HTMLPageConfig = null;
    this.ControlLst = [];
    this.PageContext = null;

    this.CreateFramePartial = function () {
        var FPHTML = '';
        if (myInstance.HTMLPageConfig != undefined && myInstance.HTMLPageConfig != null) {
            //FPHTML = FPHTML + '<form class="smart-form"><fieldset>';
            for (var rowIndex = 1; rowIndex <= myInstance.HTMLPageConfig.totalRows; rowIndex++) {
                FPHTML = FPHTML + '<div class="">';
                FPHTML = FPHTML + myInstance.CreateFrame(myInstance.HTMLPageConfig.ControlGroupConfigLst, rowIndex);
                FPHTML = FPHTML + '</div>';
            }
            //FPHTML = FPHTML + '</fieldset></form>';
        }
        return FPHTML;
    }

    this.CreateFrame = function (ControlGroupConfigLst, rowIndex) {
        var FrameHTML = '';
        var oFactory = new Factory();
        if (ControlGroupConfigLst != null && ControlGroupConfigLst.length > 0) {
            ControlGroupConfigLst = ControlGroupConfigLst.filter(OneViewArrayFilter("RowIndex", rowIndex));
            if (ControlGroupConfigLst != null && ControlGroupConfigLst.length > 0) {
                ControlGroupConfigLst = ControlGroupConfigLst.sort(OneViewArraySorting("ColIndex", true, function (a) { return a; }));
                for (var itrValue in ControlGroupConfigLst) {
                    var itr = ControlGroupConfigLst[itrValue];
                    if (typeof (itr) != 'function') {
                        if (itr.RowIndex == rowIndex) {
                            var oGroupControlFrame = oFactory.GetGroupControlObject(itr.Type);
                            oGroupControlFrame.GroupControlConfig = itr;
                            FrameHTML = FrameHTML + oGroupControlFrame.GetFrameHtml();
                        }
                    }
                }
            }
        }
        return FrameHTML;
    }

    this.CreateControls = function (ControlGroupConfigLst) {
        var ControlLstHTML = '';
        if (ControlGroupConfigLst != null) {
            for (var itr in ControlGroupConfigLst) {
                var item = ControlGroupConfigLst[itr];
                if (typeof (item) != 'function') {
                    if (item.ControlGroupConfigLst != undefined && item.ControlGroupConfigLst != null && item.ControlGroupConfigLst.length > 0) {
                        myInstance.CreateControls(item.ControlGroupConfigLst)
                    }
                    else {
                        var oFactory = new Factory();
                        var oGroupControlFrame = oFactory.GetGroupControlObject(item.Type);
                        oGroupControlFrame.GroupControlConfig = item;
                        oGroupControlFrame.PageContext = myInstance.PageContext;
                        ControlLstHTML = ControlLstHTML + oGroupControlFrame.GetControlsHTML();
                    }
                }
            }
        }
        return ControlLstHTML;
    }

    this.SetControls = function (ControlGroupConfigLst) {
        if (ControlGroupConfigLst != null) {
            for (var itr in ControlGroupConfigLst) {
                var item = ControlGroupConfigLst[itr];
                if (typeof (item) != 'function') {
                    if (item.ControlGroupConfigLst != undefined && item.ControlGroupConfigLst != null && item.ControlGroupConfigLst.length > 0) {
                        myInstance.SetControls(item.ControlGroupConfigLst);
                    }
                    else {
                        var oFactory = new Factory();
                        var oGroupControlFrame = oFactory.GetGroupControlObject(item.Type);
                        oGroupControlFrame.GroupControlConfig = item;
                        oGroupControlFrame.SetControlHTML();
                    }
                }
            }
        }
    }
}

function DefaultHTMLPageControlGroupConfig() {
    this.GroupControlConfig = null;
    this.PageContext = null;
    var myInstance = this;

    this.GetFrameHtml = function () {
        var FrameHTML = '';
        FrameHTML = FrameHTML + '<div class="template">';
        if (myInstance.GroupControlConfig.DisplayHeaderNameKey != '' && myInstance.GroupControlConfig.DisplayHeaderNameKey != null)
            FrameHTML = FrameHTML + '<div class="template-header"><div class="teal darken-1 white-text padding-15">' +
                _GetGlobalization.GetGlobalizationValue(myInstance.GroupControlConfig.DisplayHeaderNameKey) + '</div></div>';

        if (myInstance.GroupControlConfig.ControlGroupConfigLst != null && myInstance.GroupControlConfig.ControlGroupConfigLst != undefined && myInstance.GroupControlConfig.ControlGroupConfigLst.length > 0) {
            for (var SubrowIndex = 1; SubrowIndex <= myInstance.GroupControlConfig.totalRows; SubrowIndex++) {
                var _CreateHTMLPageHTML = new CreateHTMLPageHTML();
                _CreateHTMLPageHTML.CreateFrame(myInstance.GroupControlConfig.ControlGroupConfigLst, SubrowIndex)
            }
        }
        else {
            if (myInstance.GroupControlConfig.ControlConfigDict != undefined && myInstance.GroupControlConfig.ControlConfigDict != null) {
                var ControlConfigDict = myInstance.GroupControlConfig.ControlConfigDict;
                for (var SubrowIndex = 1; SubrowIndex <= myInstance.GroupControlConfig.totalRows; SubrowIndex++) {
                    var filterdControlLst = getCountControlConfigDict(ControlConfigDict, SubrowIndex);
                    if (filterdControlLst != undefined && filterdControlLst != null && filterdControlLst.length > 0) {
                        FrameHTML = FrameHTML + '<div class="row responsive-sm no-margin">';
                        var count = filterdControlLst.length;
                        for (var itrControlValue in filterdControlLst) {
                            var itrControl = filterdControlLst[itrControlValue];
                            if (typeof (itrControl) != 'function') {
                                var hiddenClass = "";
                                if (itrControl.ControlTypeName == "Hidden") {
                                    hiddenClass = " hide";
                                }
                                else {
                                    hiddenClass = "";
                                }
                                if (itrControl.RowIndex == SubrowIndex && itrControl.ControlTypeName != "GridControl") {
                                    var colClass = '';
                                    if (itrControl.Style != null && itrControl.Style.Styleclass != null && itrControl.Style.Styleclass != '') {
                                        colClass = itrControl.Style.Styleclass + hiddenClass;
                                    }
                                    else {
                                        colClass = "col question-wrapper" + hiddenClass;
                                    }
                                    FrameHTML += '<div id="' + itrControl.ContainerId + '" class="' + colClass + '"></div>';
                                }
                            }
                        }
                        FrameHTML = FrameHTML + '</div>';
                    }
                }
            }
        }
        FrameHTML = FrameHTML + '</div>';
        return FrameHTML;
    }

    this.GetControlsHTML = function () {
        var ControlLstHTML = '';
        if (myInstance.GroupControlConfig.ControlConfigDict != undefined && myInstance.GroupControlConfig.ControlConfigDict != null) {
            for (var itrControlValue in myInstance.GroupControlConfig.ControlConfigDict) {
                var itrControl = myInstance.GroupControlConfig.ControlConfigDict[itrControlValue];
                if (typeof (itrControl) != 'function') {
                    ControlLstHTML = ControlLstHTML + '<div id="div_' + itrControl.ClientID + '">';
                    if (itrControl.Name != null && itrControl.Name != '' && itrControl.ControlTypeName != "LinkControl"
                        && itrControl.ControlTypeName != "CheckBox") {
                        ControlLstHTML = ControlLstHTML + '<div class="question">' + itrControl.Name + '</div>';
                    }
                    ControlLstHTML += '<div class="row responsive-sm no-margin ans-mode">';
                    if (itrControl.ControlTypeName == "ComboBox") {
                        if (itrControl.ComboType == 1) /* Advance Combobox */ {
                            ControlLstHTML = ControlLstHTML + '<div class="col s12 input-field no-margin no-padding"><select id="' + itrControl.ClientID +
                                                        '" style="width:100%" class="no-margin" multiple><option></option></select></div>';
                        }
                        else {
                            ControlLstHTML = ControlLstHTML + '<div class="col s12 input-field no-margin no-padding"><select id="' + itrControl.ClientID +
                                                        '" style="width:100%" class="no-margin"><option></option></select></div>';
                        }
                    }

                    if (itrControl.ControlTypeName == "TextBox") {
                        var disabledClass = "";
                        var CopyAllowedEvent = "";
                        var CutAllowedEvent = "";
                        var PasteAllowedEvent = "";
                        if (itrControl.Enabled != undefined && !itrControl.Enabled) {
                            disabledClass = "disabled";
                        }
                        if (itrControl.IsCopyAllowed != undefined && !itrControl.IsCopyAllowed) {
                            CopyAllowedEvent = 'oncopy="return false;"';
                        }
                        if (itrControl.IsCutAllowed != undefined && !itrControl.IsCutAllowed) {
                            CutAllowedEvent = 'oncut="return false;"';
                        }
                        if (itrControl.IsPasteAllowed != undefined && !itrControl.IsPasteAllowed) {
                            PasteAllowedEvent = 'onpaste="return false;"';
                        }
                        var cutCopyPasteHTML = CopyAllowedEvent + ' ' + CutAllowedEvent + ' ' + PasteAllowedEvent;
                        cutCopyPasteHTML = cutCopyPasteHTML.trim()
                        if (itrControl.TextBoxType == 5) /* Text Area */ {
                            var TextAreaRowLength = 5;
                            if (itrControl.TextAreaRowlength != undefined && itrControl.TextAreaRowlength != null && itrControl.TextAreaRowlength > 0)
                                TextAreaRowLength = itrControl.TextAreaRowlength;
                            ControlLstHTML = ControlLstHTML + '<div class="form-group">';
                            ControlLstHTML = ControlLstHTML + '<textarea id="' + itrControl.ClientID +
                                '" class="form-control" rows="' + TextAreaRowLength + '" ' + cutCopyPasteHTML + ' ' + disabledClass + '></textarea></div>';
                        }
                        else if (itrControl.TextBoxType == 4)/* Password */ {
                            ControlLstHTML = ControlLstHTML + '<div class="col no-padding">' +
                                        '<div class="input-field no-margin">' +
                                            '<input id="' + itrControl.ClientID + '" type="password" ' + cutCopyPasteHTML + ' ' + disabledClass + '>' +
                                        '</div>' +
                                    '</div>';
                        }
                        else if (itrControl.TextBoxType == 1)/* Numeric */ {
                            var MinValueHtml = '';
                            if (itrControl.MinValue != null && itrControl.MinValue != undefined)
                                MinValueHtml = 'min = "' + itrControl.MinValue + '"';
                            var MaxValueHtml = '';
                            if (itrControl.MaxValue != null && itrControl.MaxValue != undefined)
                                MaxValueHtml = 'min = "' + itrControl.MaxValue + '"';
                            ControlLstHTML = ControlLstHTML + '<div class="col no-padding">' +
                                        '<div class="input-field no-margin">' +
                                            '<input id="' + itrControl.ClientID + '" type="number" ' + MinValueHtml + ' ' + MaxValueHtml + ' ' + cutCopyPasteHTML + ' ' + disabledClass + '>' +
                                        '</div>' +
                                    '</div>';
                        }
                        else if (itrControl.TextBoxType == 6) /* Search */ {
                            ControlLstHTML = ControlLstHTML + '<div class="col no-padding">' +
                                        '<div class="input-field no-margin">' +
                                            '<i class="mdi mdi-magnify prefix"></i>' +
                                            '<input id="' + itrControl.ClientID + '" type="text" ' + cutCopyPasteHTML + ' ' + disabledClass + '>' +
                                        '</div>' +
                                    '</div>';
                        }
                        else if (itrControl.TextBoxType == 7) /* ReadOnly */ {
                            ControlLstHTML = ControlLstHTML + '<div class="col no-padding">' +
                                        '<div class="no-margin">' +
                                            '<label id="' + itrControl.ClientID + '"></label>' +
                                        '</div>' +
                                    '</div>';
                        }
                        else {
                            ControlLstHTML = ControlLstHTML + '<div class="col no-padding">' +
                                        '<div class="input-field no-margin">' +
                                            '<input id="' + itrControl.ClientID + '" type="text" ' + cutCopyPasteHTML + ' ' + disabledClass + '>' +
                                        '</div>' +
                                    '</div>';
                        }
                    }

                    if (itrControl.ControlTypeName == "RadioButton" && itrControl.RadioButtonType == 0) /* Default Radio Button Type */ {
                        if (itrControl.isStaticListItem) {
                            ControlLstHTML = ControlLstHTML + '<div class="input-group">';
                            for (var i = 0; i < itrControl.DefaultListItem.length; i++) {
                                var DefaultLst = itrControl.DefaultListItem[i];
                                ControlLstHTML = ControlLstHTML + '<input name="group_' + itrControl.ClientID + '" checked="' + DefaultLst.Selected + '" type="radio" id="' + DefaultLst.Value + '" />' +
                                    '<label for="' + DefaultLst.Value + '">' + DefaultLst.Text + '</label>';
                            }
                            ControlLstHTML = ControlLstHTML + '</div>';
                            //ControlLstHTML = ControlLstHTML + (itrControl.IsAllowDataClear != undefined && itrControl.IsAllowDataClear != null && itrControl.IsAllowDataClear ? '<button type="button" >Clear</button>' : "") + '</div>';
                        }
                    }

                    if (itrControl.ControlTypeName == "RadioButton" && itrControl.RadioButtonType == 1) /* List Group Radio Button Type */ {
                        var radiobutton = itrControl;
                        if (radiobutton.isStaticListItem && !radiobutton.IsCustom) {
                            ControlLstHTML = ControlLstHTML + '<ul class="list-group predefined checked-list-box" id="group_' + radiobutton.ClientID + '">';
                            for (var i = 0; i < itrControl.DefaultListItem.length; i++) {
                                var DefaultLst = itrControl.DefaultListItem[i];
                                ControlLstHTML = ControlLstHTML + '<li class="list-group-item" id="' + DefaultLst.Id + '">' + DefaultLst.Text + '</li>';
                            }
                            ControlLstHTML = ControlLstHTML + '</ul>';
                        }
                        else if (radiobutton.IsCustom) {
                            ControlLstHTML = ControlLstHTML + '<ul class="list-group custom" id="group_' + radiobutton.ClientID + '"></ul>';
                            ControlLstHTML = ControlLstHTML + '<div class="input-group">' +
                                '<input class="form-control appendbutton" id="appendbutton_' + radiobutton.ClientID + '" type="text">' +
                                '<div class="input-group-btn">' +
                                    '<a id="a_' + radiobutton.ClientID +
                                    '" href="javascript:void(0);" class="btn btn-success add-custom"><i class="fa fa-plus fa-lg"></i> <span class="hidden-tablet">Add</span></a>' +
                                '</div></div>';
                        }
                    }

                    if (itrControl.ControlTypeName == "CheckBox") {
                        ControlLstHTML = ControlLstHTML + '<label class="checkbox">' +
                        '<input type="checkbox" id="' + itrControl.ClientID + '" name="checkbox-inline" />' +
                        '<i></i>' + itrControl.Name + '</label>';
                    }

                    if (itrControl.ControlTypeName == "DatePicker" && itrControl.DatePickerType == 1) /* Advance Date Picker Type */ {
                        ControlLstHTML = ControlLstHTML + '<div class="col no-padding">' +
                                    '<div class="flatpickr">' +
                                        '<input id="' + itrControl.ClientID + '" type="text" class="reportrange flatpickr-input" style = "color:black;border-bottom: 1px solid #9e9e9e;">' +
                                         (itrControl.IsAllowDataClear != null && itrControl.IsAllowDataClear != undefined && itrControl.IsAllowDataClear ?
                                    ('<a class="input-button" title="clear" data-clear><i class="icon-close"></i></a>') : "") +
                                    '</div>' +
                                '</div>';
                        //ControlLstHTML = ControlLstHTML + '<label class="input reportrange" id="' + itrControl.ClientID + '">' +
                        //    '<i class="fa fa-calendar"></i>' +
                        //    '<span style = "padding-left:5px;"></span> <i class="fa icon-append fa-chevron-down"></i>' +
                        //'</label>';
                    }
                    if (itrControl.ControlTypeName == "DatePicker" && itrControl.DatePickerType == 0) /* Default Date Picker Type */ {
                        ControlLstHTML = ControlLstHTML + '<div class="input-group">' +
                            '<input id="' + itrControl.ClientID +
                            '" type="text" name="mydate" placeholder="Select a date" class="form-control datepicker" data-dateformat="dd/mm/yy">' +
                            '<span class="input-group-addon"><i class="fa fa-calendar"></i></span>' +
                        '</div>';
                    }

                    if (itrControl.ControlTypeName == "Hidden") {
                        ControlLstHTML = ControlLstHTML + '<input type="hidden" id="' + itrControl.ClientID + '" />';
                    }
                    if (itrControl.ControlTypeName == "LinkControl" && itrControl.LinkType == 0)/* Link Control */ {
                        ControlLstHTML = ControlLstHTML + '<a href="javascript:void(0);" rel="tooltip" data-placement="top" data-original-title="' +
                            itrControl.Name + '" id="' + itrControl.ClientID + '"> <span class="hidden-tablet">' + itrControl.Name + '</span></a>';
                    }
                    if (itrControl.ControlTypeName == "LinkControl" && itrControl.LinkType == 1)/* Link Control button format */ {
                        ControlLstHTML = ControlLstHTML + '<a href="javascript:void(0);" id="' + itrControl.ClientID + '" class="btn btn-default" style = "padding : 8px;" rel="tooltip" data-placement="top" data-original-title="' + itrControl.Name +
                            '"><i class="fa fa-eraser fa-lg"></i> <span class="hidden-tablet">' + itrControl.Name + '</span></a>';
                    }
                    if (itrControl.ControlTypeName == "ImageControl") {

                        if (itrControl.ImageControlType == 2) /* File */ {
                            ControlLstHTML = ControlLstHTML + ' <div id="' + itrControl.ClientID + '"> <div class="pull-left" id="user_img" style="width:20%">';
                            ControlLstHTML = ControlLstHTML + '<img src="" alt="Image" style="border: 1px #ccc solid; padding: 2px; margin-right: 20px; margin-top: 4px; width: 100%; height: 100%;" />' +
                                   '</div> <div class="input input-file pull-right" style="width:75%;">';
                            ControlLstHTML = ControlLstHTML + '<span class="button"><input type="file" id="file" name="file" onchange="Show(this)" onclick="ImageUploadClickEvent(this)">Browse</span><input type="text" placeholder="Supported format PNG,JPG,GIF,TIFF" readonly="" style="font-size:10px"> </div> </div>';
                        }
                    }
                    ControlLstHTML = ControlLstHTML + '</div></div>';
                }
            }
        }
        return ControlLstHTML;
    }

    this.SetControlHTML = function () {
        if (myInstance.GroupControlConfig.ControlConfigDict != undefined && myInstance.GroupControlConfig.ControlConfigDict != null) {
            for (var itrControlValue in myInstance.GroupControlConfig.ControlConfigDict) {
                var itrControl = myInstance.GroupControlConfig.ControlConfigDict[itrControlValue];
                if (itrControl.ControlTypeName == "AdvCombo") {
                    document.getElementById(itrControl.ContainerId).innerHTML += document.getElementById('div_' + itrControl.ClientID + 'AdvCombo').innerHTML;
                    var $this = $("#" + itrControl.ClientID);
                    var width = $this.attr('data-select-width') || '100%';
                    $("#" + itrControl.ClientID).material_select();
                    //$("#" + itrControl.ClientID).select2({
                    //    //showSearchInput : _showSearchInput,
                    //    allowClear: itrControl.IsAllowDataClear,
                    //    width: width
                    //});
                }
                else if (itrControl.ControlTypeName == "LinkControl" && itrControl.LinkType == 1) /* Link Control Button Format. */ {
                    var control = document.getElementById(itrControl.ContainerId);
                    var divControl = document.getElementById('div_' + itrControl.ClientID);
                    $(control).addClass('text-center');
                    ControlAppend(control, divControl);
                }
                else if (itrControl.ControlTypeName != "GridControl" && itrControl.ControlTypeName != "DatePicker" && itrControl.ControlTypeName != "ImageControl") {
                    var control = document.getElementById(itrControl.ContainerId);
                    var divControl = document.getElementById('div_' + itrControl.ClientID);
                    ControlAppend(control, divControl);
                    //if (itrControl.ControlTypeName == "ComboBox") {
                    //    var $this = $("#" + itrControl.ClientID);
                    //    var width = $this.attr('data-select-width') || '100%';
                    //    $("#" + itrControl.ClientID).select2({
                    //        //showSearchInput : _showSearchInput,
                    //        allowClear: itrControl.IsAllowDataClear,
                    //        width: width
                    //    });
                    //}
                }
                else if (itrControl.ControlTypeName == "DatePicker" && itrControl.DatePickerType == 1) /* Advance Date Picker Type */ {
                    var control = document.getElementById(itrControl.ContainerId);
                    var divControl = document.getElementById('div_' + itrControl.ClientID);
                    ControlAppend(control, divControl);
                }
                else if (itrControl.ControlTypeName == "LinkControl") {
                    var control = document.getElementById(itrControl.ContainerId);
                    var divControl = document.getElementById('div_' + itrControl.ClientID);
                    ControlAppend(control, divControl);
                }
                else if (itrControl.ControlTypeName == "DatePicker" && itrControl.DatePickerType == 0) {
                    document.getElementById(itrControl.ContainerId).innerHTML += document.getElementById('div_' + itrControl.ClientID).innerHTML;
                }
                else if (itrControl.ControlTypeName == "ImageControl" && itrControl.ImageControlType == 2) {
                    document.getElementById(itrControl.ContainerId).innerHTML += document.getElementById('div_' + itrControl.ClientID).innerHTML;
                }
            }
        }
    }

    var ControlAppend = function (inputControl, outputControl) {
        if (inputControl != undefined && inputControl != null) {
            for (var itrCnt = 0; itrCnt < inputControl.children.length; itrCnt++) {
                var childnode = inputControl.children[itrCnt];
                inputControl.removeChild(childnode);
            }
            if (outputControl != undefined && outputControl != null) {
                for (var itrCnt = 0; itrCnt < outputControl.children.length;) {
                    var childnode = outputControl.children[itrCnt];
                    inputControl.appendChild(childnode);
                }
            }
        }
    }

    var getCountControlConfigDict = function (ControlConfigDict, SubrowIndex) {
        var filterdLst = [];
        for (var itrControlValue in ControlConfigDict) {
            if (typeof (ControlConfigDict[itrControlValue]) != 'function') {
                if (ControlConfigDict[itrControlValue].RowIndex == SubrowIndex)
                    filterdLst.push(ControlConfigDict[itrControlValue]);
            }
        }
        return filterdLst;
    }
}

function DefaultDataCapturePageControlGroupConfig() {
    this.GroupControlConfig = null;
    this.PageContext = null;
    var myInstance = this;

    this.GetFrameHtml = function () {
        var FrameHTML = '';
        FrameHTML = FrameHTML + '<div class="template">';
        if (myInstance.GroupControlConfig.DisplayHeaderNameKey != '' && myInstance.GroupControlConfig.DisplayHeaderNameKey != null)
            FrameHTML = FrameHTML + '<div class="template-header"><div style="padding:10px 15px; border-bottom:1px #bdbdbd solid; background:#616161; color:white;"><strong>' +
                _GetGlobalization.GetGlobalizationValue(myInstance.GroupControlConfig.DisplayHeaderNameKey) + '</strong><div style="padding-left:10px;" class="right" id="CollapseIcon_' + myInstance.GroupControlConfig.RowIndex + '' + myInstance.GroupControlConfig.ColIndex + '"></div><div class="right" id="AttributeGroupSummary_' + myInstance.GroupControlConfig.RowIndex + '' + myInstance.GroupControlConfig.ColIndex + '"></div></div></div>';

        if (myInstance.GroupControlConfig.ControlGroupConfigLst != null && myInstance.GroupControlConfig.ControlGroupConfigLst != undefined && myInstance.GroupControlConfig.ControlGroupConfigLst.length > 0) {
            for (var SubrowIndex = 1; SubrowIndex <= myInstance.GroupControlConfig.totalRows; SubrowIndex++) {
                var _CreateHTMLPageHTML = new CreateHTMLPageHTML();
                _CreateHTMLPageHTML.CreateFrame(myInstance.GroupControlConfig.ControlGroupConfigLst, SubrowIndex)
            }
        }
        else {
            if (myInstance.GroupControlConfig.DefaultDataCapturePageControlConfigDct != undefined && myInstance.GroupControlConfig.DefaultDataCapturePageControlConfigDct != null) {
                var ControlConfigDict = myInstance.GroupControlConfig.DefaultDataCapturePageControlConfigDct;
                for (var SubrowIndex = 1; SubrowIndex <= myInstance.GroupControlConfig.totalRows; SubrowIndex++) {
                    FrameHTML = FrameHTML + '<div class="row responsive-sm no-margin">';
                    var itrControlLst = ControlConfigDict[SubrowIndex];
                    if (itrControlLst != null && itrControlLst != undefined && itrControlLst.length > 0) {
                        itrControlLst = itrControlLst.sort(OneViewArraySorting('ColumnIndex', true, function (a) { return a; }));
                        var count = itrControlLst.length;
                        for (var itr = 0; itr < itrControlLst.length; itr++) {
                            var itrControl = itrControlLst[itr];
                            if (itrControl.ContainerId != null && itrControl.ContainerId != undefined && itrControl.ContainerId != '') {
                                var colClass = '';
                                if (itrControl.Style != null && itrControl.Style.Styleclass != null && itrControl.Style.Styleclass != '') {
                                    colClass = itrControl.Style.Styleclass;
                                }
                                else {
                                    colClass = "col col-xs-6 col-sm-6 col-md-" + Math.round(12 / count);
                                }
                                FrameHTML = FrameHTML + '<div id="' + itrControl.ContainerId + '" class="col question-wrapper"></div>';
                            }
                        }
                    }
                    FrameHTML = FrameHTML + '</div>';
                }
            }
        }
        FrameHTML = FrameHTML + '</div>';
        return FrameHTML;
    }

    this.GetControlsHTML = function () {
        var ControlLstHTML = '';
        if (myInstance.GroupControlConfig.DefaultDataCapturePageControlConfigDct != undefined && myInstance.GroupControlConfig.DefaultDataCapturePageControlConfigDct != null) {
            var ControlConfigDict = myInstance.GroupControlConfig.DefaultDataCapturePageControlConfigDct;
            for (var SubrowIndex in ControlConfigDict) {
                var itrControlLst = ControlConfigDict[SubrowIndex];
                if (typeof (itrControlLst) != 'function') {
                    if (itrControlLst != null && itrControlLst != undefined && itrControlLst.length > 0) {
                        for (var itr = 0; itr < itrControlLst.length; itr++) {
                            var itrControl = itrControlLst[itr];
                            var oDcDefaultAttributeComponent = new DcDefaultAttributeComponent(myInstance.PageContext, itrControl.AttributeId);
                            ControlLstHTML = ControlLstHTML + oDcDefaultAttributeComponent.GetHtml(itrControl.OtherInfoDetail);
                        }
                    }
                }
            }
        }
        return ControlLstHTML;
    }

    this.SetControlHTML = function () {
        if (myInstance.GroupControlConfig.DefaultDataCapturePageControlConfigDct != undefined && myInstance.GroupControlConfig.DefaultDataCapturePageControlConfigDct != null) {
            var ControlConfigDict = myInstance.GroupControlConfig.DefaultDataCapturePageControlConfigDct;
            for (var SubrowIndex in ControlConfigDict) {
                var itrControlLst = ControlConfigDict[SubrowIndex];
                if (typeof (itrControlLst) != 'function') {
                    if (itrControlLst != null && itrControlLst != undefined && itrControlLst.length > 0) {
                        for (var itr = 0; itr < itrControlLst.length; itr++) {
                            var itrControl = itrControlLst[itr];
                            var control = document.getElementById(itrControl.ContainerId);
                            var divControl = document.getElementById('Attribute' + itrControl.ContainerId);
                            //$(control).addClass('text-center');
                            ControlAppend(control, divControl);
                        }
                    }
                }
            }
        }
    }
}

function StaticTabControlConfig() {
    this.GroupControlConfig = null;
    this.PageContext = null;
    var myInstance = this;

    this.GetFrameHtml = function () {
        var FrameHTML = '';
        if (myInstance.GroupControlConfig.TotalTabs > 0) {
            FrameHTML = '<div class="TabRow"><ul class="tabs tabs-fixed-width TabGroup">';

            for (var itrTabIndex = 1; itrTabIndex <= myInstance.GroupControlConfig.TotalTabs; itrTabIndex++) {
                var itrTabDetail = myInstance.GroupControlConfig.TabDetailControlConfigDct[itrTabIndex];
                if (itrTabDetail != undefined && itrTabDetail != null) {
                    itrTabDetailStr = JSON.stringify(itrTabDetail).replaceAll("\"", "-vn-OVNStringify-vn-");
                    FrameHTML += '<li class="tab"><a href="javascript:void(0);" dimensionIndex = ' + itrTabIndex +
                        ' onclick = "(new StaticTabControlConfig()).tabClickEvent(this, event, \'' + itrTabDetailStr + '\')">' +
                        _GetGlobalization.GetGlobalizationValue(itrTabDetail.DisplayNameKey).toUpperCase() + '</a></li>';
                }
            }
            FrameHTML = FrameHTML + '</ul><div class = "TabDetail"></div></div>';
        }
        return FrameHTML;
    }

    this.tabClickEvent = function ($this, event, currentTabConfigStr) {
        currentTabConfigStr = currentTabConfigStr.replaceAll("-vn-OVNStringify-vn-", '\"');
        var currentTabConfig = JSON.parse(currentTabConfigStr);
        var MainTabFrame = FindclosestParentElement($this, ".TabRow");
        if (currentTabConfig != undefined && currentTabConfig != null) {
            var TabControl = FindclosestParentElement($this, ".TabGroup");
            if (TabControl != null && TabControl.length > 0) {
                TabControl.find('a').each(function () {
                    $(this).removeClass('active');
                });
            }
            $($this).addClass('active');
            if (MainTabFrame != null && MainTabFrame.length > 0)
                MainTabFrame.find('>.TabDetail').html('');
            var _CreateHTMLPageHTML = new CreateHTMLPageHTML();
            /* TODO : PageContext Hard Code need to check and remove. */
            _CreateHTMLPageHTML.PageContext = 1;
            for (var SubrowIndex = 1; SubrowIndex <= currentTabConfig.totalRows; SubrowIndex++) {
                var FrameHtml = _CreateHTMLPageHTML.CreateFrame(currentTabConfig.ControlGroupConfigLst, SubrowIndex);
                if (MainTabFrame != null && MainTabFrame.length > 0)
                    MainTabFrame.find('>.TabDetail').html(FrameHtml);
            }

            var ControlsHtml = _CreateHTMLPageHTML.CreateControls(currentTabConfig.ControlGroupConfigLst);
            var oAppendOrSetHtml = new AppendOrSetHtml();
            oAppendOrSetHtml.ControlId = "htmlControls";
            oAppendOrSetHtml.Html = ControlsHtml;
            oAppendOrSetHtml.SetHtml();

            _CreateHTMLPageHTML.SetControls(currentTabConfig.ControlGroupConfigLst);
        }
        else {
            if (MainTabFrame != null && MainTabFrame.length > 0)
                MainTabFrame.find('>.TabDetail').html('');
        }
    }

    this.GetControlsHTML = function () {

    }

    this.SetControlHTML = function () {
        $('ul.tabs').tabs();
    }
}

function AttributeGroupTabControlConfig() {
    this.GroupControlConfig = null;
    this.PageContext = null;
    var myInstance = this;

    this.GetFrameHtml = function () {

    }

    this.GetControlsHTML = function () {

    }

    this.SetControlHTML = function () {

    }
}

function GetValueByControlId(ControlId) {
    var ControlValue = null;
    var Control = document.getElementById(ControlId);
    if (Control != undefined && Control != null) {
        if (Control.tagName == "SELECT") {
            if (Control.multiple != undefined && Control.multiple != null && Control.multiple) {
                ControlValue = [];
                for (var item in Control.children) {
                    if (Control.children[item].selected && ControlValue.indexOf(Control.children[item].value.toString()) == -1) {
                        if (ControlValue == undefined) {
                            ControlValue = [];
                            ControlValue.push(Control.children[item].value.toString());
                        }
                        else {
                            var index = ControlValue.indexOf(Control.children[item].value.toString());
                            if (index == -1)
                                ControlValue.push(Control.children[item].value.toString());
                        }
                    }
                }
                if (ControlValue == undefined)
                    ControlValue = [];
            }
            else if (Control.id.indexOf('AttributeFilter_') != -1)
                ControlValue = (Control.value == undefined || Control.value == null || Control.value == "" ? "" : Control.value);
            else
                ControlValue = (Control.value != undefined && Control.value != null && Control.value == "" ? "-1" : Control.value);
        }
        else if (Control.tagName == "INPUT" && Control.type == "text") {
            ControlValue = Control.value;
        }
        else if (Control.className.indexOf("reportrange") != -1) {
            ControlValue = GetDateValueByControlId(ControlId);
        }
    }
    else /* Radio Button List */ {
        Control = document.getElementsByName("group_" + ControlId);
        if (Control != undefined && Control != null && Control.length > 0) {
            for (var i = 0; i < Control.length; i++) {
                if (Control[i].checked) {
                    ControlValue = Control[i].value;
                }
            }
        }
    }
    return ControlValue;
}

function GetDateValueByControlId(ControlId, IsStartDate) {
    var ControlValue = null;
    var Control = document.getElementById(ControlId);
    if (Control != undefined && Control != null) {
        if (IsStartDate == undefined || IsStartDate == null) {
            ControlValue = Control.value.innerHTML;
        }
        else if (IsStartDate) {
            ControlValue = $(Control).data().daterangepicker.startDate.format('YYYYMMDDHHmmss');
        }
        else {
            ControlValue = $(Control).data().daterangepicker.endDate.format('YYYYMMDDHHmmss');
        }
    }
    return ControlValue;
}

function GetNameByControlId(ControlId) {
    var ControlValue = null;
    var Control = document.getElementById(ControlId);
    if (Control != undefined && Control != null) {
        if (Control.tagName == "SELECT") {
            for (var itr = 0; itr < Control.options.length; itr++) {
                if (Control.options[itr].selected) {
                    ControlValue = Control.options[itr].text.toString();
                }
            }
        }
        else if (Control.tagName == "INPUT" && Control.type == "text") {
            ControlValue = Control.value;
        }
        else if (Control.className.indexOf("input reportrange") != -1) {
            if (Control.getElementsByTagName("span").length > 0)
                ControlValue = Control.getElementsByTagName("span")[0].innerHTML;
            else
                ControlValue = '';
        }
    }
    else /* Radio Button List */ {
        Control = document.getElementsByName("group_" + ControlId);
        if (Control != undefined && Control != null && Control.length > 0) {
            for (var i = 0; i < Control.length; i++) {
                if (Control[i].checked) {
                    ControlValue = Control[i].textContent;
                }
            }
        }
    }
    return ControlValue;
}

function GetLowerCaseString(value) {
    if (value != null && value != undefined && value != '')
        return value.toLowerCase();
    else
        return '';
}

function EvalExpression() {

    this.Evaluate = function (ExpressionMetaData) {
        var Expression = '';
        if (ExpressionMetaData != undefined && ExpressionMetaData != null && ExpressionMetaData != '') {
            Expression = formExpression(ExpressionMetaData);
        }
        try {
            return eval(Expression);
        }
        catch (ex) {
            return false;
        }
    }

    var formExpression = function (ExpressionMetaData) {
        var Expression = '';
        if (ExpressionMetaData.Key == "OneViewDynamicFormPrimaryExpression") {
            Expression += "(" + formExpression(ExpressionMetaData.Left) + " " + ExpressionMetaData.Condition + " " + formExpression(ExpressionMetaData.Right) + ")";
        }
        else if (ExpressionMetaData.Key == "OneViewDynamicFormControlExpression") {
            if (ExpressionMetaData.ControlType != undefined && ExpressionMetaData.ControlType != null && ExpressionMetaData.ControlType.toLowerCase() == "startdate") {
                Expression = GetDateValueByControlId(ExpressionMetaData.ControlId, true);
            }
            else if (ExpressionMetaData.ControlType != undefined && ExpressionMetaData.ControlType != null && ExpressionMetaData.ControlType.toLowerCase() == "enddate") {
                Expression = GetDateValueByControlId(ExpressionMetaData.ControlId, false);
            }
            else
                Expression = GetValueByControlId(ExpressionMetaData.ControlId);
        }
        else if (ExpressionMetaData.Key == "OneViewDynamicFormValueExpression") {
            Expression += ExpressionMetaData.Value;
        }
        return Expression;
    }
}

function GetGlobalization() {
    var myInstance = this;

    this.GetGlobalizationValue = function (Key) {
        var Value = '';
        if (GlobalizationMetaData != undefined && GlobalizationMetaData != null) {
            var selectedGlobalizationValue = GlobalizationMetaData[Key];
            if (selectedGlobalizationValue != undefined && selectedGlobalizationValue != null && selectedGlobalizationValue != '')
                Value = selectedGlobalizationValue;
            else
                Value = Key;
        }
        else
            Value = Key;
        return Value;
    }
}

function Factory() {
    this.GetWidgetContent = function (Type) {
        switch (Type) {
            case "DefaultWidgetConfig": return new DefaultWidgetComponent();
            case "CustomWidgetConfig": return new CustomWidgetComponent();
            default: null;
        }
    }

    this.GetDisplayFormatContent = function (Type) {
        switch (Type) {
            case "GridFormatDisplayConfig": return new GridFormatDisplayComponent();
            case "ChartFormatDisplayConfig": return new ChartFormatDisplayComponent();
            case "CustomAttributeGroup_Summary_SingleSeriesWidget": return new CustomAttributeGroup_Summary_SingleSeriesWidget();
            case "CustomAttributeGroup_DateWiseSummary_MultiSeriesWidget": return new CustomAttributeGroup_DateWiseSummary_MultiSeriesWidget();
            case "CustomAttributeGroup_DataComparisonSummary_MultiSeriesWidget": return new CustomAttributeGroup_DataComparisonSummary_MultiSeriesWidget();
            case "NCRuleGroupWise_DataComparisonSummary_MultiSeriesWidget": return new NCRuleGroupWise_DataComparisonSummary_MultiSeriesWidget();
            case "AttributeWise_DataComparisonSummary_MultiSeriesWidget": return new AttributeWise_DataComparisonSummary_MultiSeriesWidget();
            case "TemplateWise_DataComparisonSummary_MultiSeriesWidget": return new TemplateWise_DataComparisonSummary_MultiSeriesWidget();
            case "CustomTemplateGroup_DataComparisonSummary_MultiSeriesWidget": return new CustomTemplateGroup_DataComparisonSummary_MultiSeriesWidget();
            case "NCRuleGroup_DateWiseComparisonSummary_MultiSeriesWidget": return new NCRuleGroup_DateWiseComparisonSummary_MultiSeriesWidget();
            case "DCPlaceWiseSummaryDisplay": return new DCPlaceWiseSummaryDisplay();
            case "Generic_MultiSeriesWidget": return new Generic_MultiSeriesWidget();
            case "DashboardGridFormatDisplayConfig": return new GridFormatDisplayComponentForDashBoard();
            case "ActionTracking_GridFormatDisplayConfig": return new GridFormatDisplayComponentForActionTrackingPage();
            default: null;
        }
    }

    this.GetExportFormatContent = function (Type) {
        switch (Type) {
            case "RDLCExportFormatConfig": return new RDLCExportFormatComponent();
            case "DefaultExcelComponentConfig": return new RDLCExportFormatComponent();
            default: null;
        }
    }

    this.GetDataSource = function (Type) {
        switch (Type) {
            case "LocalTreeDataSourceConfig": return new LocalTreeDataSourceComponent();
            case "V3ServiceDynamicFormDataSourceConfig": return new V3ServiceDynamicFormDataSourceComponent();
            case "StaticDataSourceConfig": return new StaticDataSourceConfig();
            case "TreeDataSourceConfig": return new TreeDataSourceConfig();
            case "DefaultStaticDataSourceConfig": return new DefaultStaticDataSourceConfig();
            case "DefaultDataSourceConfig": return new DefaultDataSourceConfig();
            default: null;
        }
    }

    this.GetChart = function (Type) {
        switch (Type) {
            case "Line": return new LoadLineChart();
            case "Bar": return new LoadBarChart();
            case "Multi-Line": return new LoadMultiLineChart();
            case "Multi-Bar": return new LoadMultiBarChart();
            case "Pie": return new LoadPieChart();
            case "Pie_Gauge": return new LoadPie_GaugeChart();
            case "Multi-Pie": return new LoadMultiPieChart();
            case "EasyPie": return new LoadEasyPieChart();
            case "Gauge": return new LoadGaugeChart();
            case "JqueryGauge": return new LoadJqueryGaugeChart();
            case "ListViewBox": return new LoadListViewBoxChart();
            case "MultiFullPie": return new LoadMultiFullPieChart();
            case "MultiColor-Bar": return new LoadMultiColorBarChart();
            default: null;
        }
    }

    this.GetTab = function (Type) {
        switch (Type) {
            case "ProfileUITab": return new CreateFixedTabHtml();
            default: null;
        }
    }

    this.GetDCProfileDimensionMetaData = function (Type) {
        switch (Type) {
            case "DCProfileDefaultUserConfigUIMetaData": return new DCProfileDefaultUserConfig();
            case "DCProfileDefaultPlaceConfigUIMetaData": return new DCProfileDefaultPlaceConfig();
            case "DCProfileDefaultTemplateConfigUIMetaData": return new DCProfileDefaultTemplateConfig();
            case "DCProfileDefaultScheduleConfigUIMetaData": return new DCProfileDefaultScheduleConfig();
            default: null;
        }
    }

    this.GetManagementViewElement = function (Type) {
        switch (Type) {
            case "OrganizationAssestNodeRCOViewElement": return new OrganizationAssestNodeRCOViewElement();
            default: null;
        }
    }

    this.GetManagementViewSummary = function (Type) {
        switch (Type) {
            case "DefaultSummaryView": return new DefaultSummaryView();
            default: null;
        }
    }

    this.MenuType = function (Type) {
        switch (Type) {
            case "Menu": return new MenuCreation();
            case "SmartMenu": return new OtherMenuCreation();
            default: null;
        }
    }

    this.GetDCPageConfigObject = function (Type) {
        switch (Type) {
            case "DefaultDCPageConfig": return new DefaultDCPageViewEngine();
            case "DcPageFormViewConfig": return new FormViewEngine();
            case "CustomDcPageConfig": return new CustomDcPageViewEngine();
            default: null;
        }
    }

    this.GetGroupControlObject = function (Type) {
        switch (Type) {
            case "DefaultHTMLPageControlGroupConfig": return new DefaultHTMLPageControlGroupConfig();
            case "DefaultDataCapturePageControlGroupConfig": return new DefaultDataCapturePageControlGroupConfig();
            case "StaticTabControlConfig": return new StaticTabControlConfig();
            case "AttributeGroupTabControlConfig": return new AttributeGroupTabControlConfig();
            default: null;
        }
    }

    this.GetNewDCCriteriaEngineObject = function (Type) {
        switch (Type) {
            case "DefaultNewDCPageMetaDataConfig": return new DefaultNewDCCriteriaBarView();
            default: null;
        }
    }

    this.GetOneViewSubPageComponentObject = function (Type) {
        switch (Type) {
            case "ReportingComponentConfig": return new DynamicReportPage();
            case "ApprovalPageComponentConfig": return new DynamicApprovalPage();
            case "CustomHTMLPageConfig": return new CustomHTMLPage();
            default: null;
        }
    }

    this.GetWrokflowPageConfigObject = function (Type) {
        switch (Type) {
            case "DefaultWorkflowPage": return new DefaultWorkflowPageView();
            case "CustomWorkflowPage": return new CustomWorkflowPageView();
            default: null;
        }
    }
}

function LoadLineChart() {
    var myInstance = this;
    this.Load = function () {

    }

    this.Init = function () {

    }
}

function LoadBarChart()
{
    var myInstance = this;
    this.Load = function () {

    }

    this.Init = function () {

    }
}

function LoadMultiLineChart() {
    var myInstance = this;
    this.ControlId = '';
    this.ChartConfig = null;
    var ChartControlId = '';
    this.Load = function () {
        ChartControlId = 'Chart_' + myInstance.ControlId;
        var Html = myInstance.GetHtml();
        var _AppendOrSetHtml = new AppendOrSetHtml();
        _AppendOrSetHtml.ControlId = myInstance.ControlId;
        _AppendOrSetHtml.Html = Html;
        _AppendOrSetHtml.SetHtml();

        if (myInstance.ChartConfig != undefined && myInstance.ChartConfig != null)
            myInstance.Init();
    }

    this.GetHtml = function () {
        var Html = '<div id = "' + ChartControlId + '" class = "chart has-legend chartclass"></div>';
        return Html;
    }

    this.Init = function () {
        var barChart = $('#' + ChartControlId);
        var obarChart = new OneViewPlotChartComponent();
        obarChart["ChartType"] = 'line-stringwise';
        obarChart["LodingDivId"] = myInstance.ChartConfig.LodingDivId;
        obarChart["BaseFilterParam"] = myInstance.ChartConfig.BaseFilterParam;
        obarChart["IsSingleSeries"] = myInstance.ChartConfig.IsSingleSeries;
        obarChart["MultiSeriesConfig"] = myInstance.ChartConfig.MultiSeriesConfig;
        obarChart["Url"] = myInstance.ChartConfig.Url;

        obarChart["MultiSeriesConfig"]['SeriesType'] = myInstance.ChartConfig.MultiSeriesConfig.SeriesType;
        var seriesCount = myInstance.ChartConfig.MultiSeriesConfig.SeriesCount;
        obarChart["MultiSeriesConfig"]['SeriesCount'] = seriesCount;
        for (var itr = 0; itr < seriesCount; itr++) {
            obarChart["MultiSeriesConfig"]['SeriesType'].push("line");
        }
        obarChart["MultiSeriesConfig"]['xAxisValueKey'] = myInstance.ChartConfig.MultiSeriesConfig.xAxisValueKey;
        obarChart["MultiSeriesConfig"]['yAxisValueKey'] = myInstance.ChartConfig.MultiSeriesConfig.yAxisValueKey;
        obarChart["MultiSeriesConfig"]['yAxisLegents'] = myInstance.ChartConfig.MultiSeriesConfig.yAxisLegents;
        obarChart["MultiSeriesConfig"]['Colors'] = myInstance.ChartConfig.MultiSeriesConfig.Colors;
        obarChart["CurrentDisplayFormatConfig"] = myInstance.ChartConfig.CurrentDisplayFormatConfig;
        obarChart["WidgetUtilitiesConfig"] = myInstance.ChartConfig.WidgetUtilitiesConfig;
        obarChart.PlotChart(barChart);
    }
}

function LoadMultiBarChart() {
    this.ControlId = '';
    this.ChartConfig = null;
    var ChartControlId = '';
    var myInstance = this;
    this.Load = function () {
        ChartControlId = 'Chart_' + myInstance.ControlId;
        var Html = myInstance.GetHtml();
        myInstance.SetHtml(myInstance.ControlId, Html);

        if (myInstance.ChartConfig != undefined && myInstance.ChartConfig != null)
            myInstance.Init();
    }

    this.GetHtml = function () {
        var Html = '<div id = "' + ChartControlId + '" class = "chart has-legend chartclass"></div>';
        return Html;
    }

    this.SetHtml = function (ControlId, Html) {
        if (ControlId != undefined && ControlId != null && ControlId != '') {
            var Control = document.getElementById(ControlId);
            if (Control != undefined && Control != null) {
                Control.innerHTML = Html;
            }
        }
    }

    this.Init = function () {
        var barChart = $('#' + ChartControlId);
        var obarChart = new OneViewPlotChartComponent();
        obarChart["ChartType"] = 'bar-stringwise';
        obarChart["LodingDivId"] = "widget-content-" + myInstance.ChartConfig.LodingDivId.split('-')[myInstance.ChartConfig.LodingDivId.split('-').length - 1];
        obarChart["BaseFilterParam"] = myInstance.ChartConfig.BaseFilterParam;
        obarChart["IsSingleSeries"] = myInstance.ChartConfig.IsSingleSeries;
        obarChart["MultiSeriesConfig"] = myInstance.ChartConfig.MultiSeriesConfig;
        obarChart["Url"] = myInstance.ChartConfig.Url;

        obarChart["MultiSeriesConfig"]['SeriesType'] = myInstance.ChartConfig.MultiSeriesConfig.SeriesType;
        var seriesCount = myInstance.ChartConfig.MultiSeriesConfig.SeriesCount;
        obarChart["MultiSeriesConfig"]['SeriesCount'] = seriesCount;
        for (var itr = 0; itr < seriesCount; itr++) {
            obarChart["MultiSeriesConfig"]['SeriesType'].push("bar");
        }
        obarChart["MultiSeriesConfig"]['xAxisValueKey'] = myInstance.ChartConfig.MultiSeriesConfig.xAxisValueKey;
        obarChart["MultiSeriesConfig"]['yAxisValueKey'] = myInstance.ChartConfig.MultiSeriesConfig.yAxisValueKey;
        obarChart["MultiSeriesConfig"]['yAxisLegents'] = myInstance.ChartConfig.MultiSeriesConfig.yAxisLegents;
        obarChart["MultiSeriesConfig"]['Colors'] = myInstance.ChartConfig.MultiSeriesConfig.Colors;
        obarChart["CurrentDisplayFormatConfig"] = myInstance.ChartConfig.CurrentDisplayFormatConfig;
        obarChart["WidgetUtilitiesConfig"] = myInstance.ChartConfig.WidgetUtilitiesConfig;
        obarChart.PlotChart(barChart);
    }
}

function LoadMultiColorBarChart() {
    this.ControlId = '';
    this.ChartConfig = null;
    var ChartControlId = '';
    var LoadingDivId = '';
    var xAxisLabels = [];
    var myInstance = this;
    this.Load = function () {
        ChartControlId = 'Chart_' + myInstance.ControlId;
        var Html = myInstance.GetHtml();
        var _AppendOrSetHtml = new AppendOrSetHtml();
        _AppendOrSetHtml.Html = Html;
        _AppendOrSetHtml.ControlId = myInstance.ControlId;
        _AppendOrSetHtml.SetHtml();
        LoadingDivId = "widget-content-" + myInstance.ChartConfig.LodingDivId.split('-')[myInstance.ChartConfig.LodingDivId.split('-').length - 1];

        if (myInstance.ChartConfig != undefined && myInstance.ChartConfig != null)
            myInstance.Init();
    }

    this.GetHtml = function () {
        var Html = '<div id = "' + ChartControlId + '" class = "chart has-legend chartclass"></div>';
        return Html;
    }

    this.Init = function () {
        myInstance.PlotPie();
    }

    this.PlotPie = function () {
        var args = {
            success: sucessFn,
            error: ErrorFn,
            sender: this
        };
        var myAjaxobj = new WiNAiMAjax();
        myAjaxobj.url = myInstance.ChartConfig.Url;
        myAjaxobj.webMethod = "post";
        myAjaxobj.async = true;
        myAjaxobj.parameter = myInstance.ChartConfig.BaseFilterParam;
        myAjaxobj.contentType = 'application/json; charset=utf-8';
        myAjaxobj.dataType = 'json';
        myAjaxobj.execute(args);
    }

    var sucessFn = function (sender, response) {
        if (response == "Session Failure") {
            window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
            result = [];
            return false;
        }
        else {
            result = response;
            if (result != undefined) {
                var barChart = $('#' + ChartControlId);
                var ds = new Array();

                ds = GetDataSetForCharts(ds, result);

                if (myInstance.ChartConfig.MultiSeriesConfig.SeriesCount == 1 && result.length == 0) {
                    ds = GetDataSetForCharts(ds, result);
                    ds[ds.length - 1].extents = false;
                    ds[ds.length - 1].lines = {};
                    ds[ds.length - 1].points = {};
                    ds[ds.length - 1].label = "";
                }

                var ymax = GetMaxValueOfYAxis(ds);

                function xAxisLabelGenerator(x) {
                    return (xAxisLabels[x] == undefined ? "" : xAxisLabels[x]);
                }

                var datestr = 0;
                var defaultVisibleCount = 0;
                if (myInstance.ChartConfig.WidgetUtilitiesConfig != undefined && myInstance.ChartConfig.WidgetUtilitiesConfig != null)
                    defaultVisibleCount = myInstance.ChartConfig.WidgetUtilitiesConfig.DefaultViewDataCount;
                var maximizeVisibleCount = window.localStorage.getItem('MaximizeViewDataCount');
                var IsMaximizeView = window.localStorage.getItem('IsMaximizeView');
                if (IsMaximizeView == "true") {
                    if (maximizeVisibleCount == undefined || maximizeVisibleCount == null || maximizeVisibleCount <= 0)
                        maximizeVisibleCount = 7;
                    if (xAxisLabels.length > 0) {
                        if (xAxisLabels.length <= maximizeVisibleCount && xAxisLabels.length >= 1)
                            datestr = xAxisLabels.length;
                        if (xAxisLabels.length > maximizeVisibleCount)
                            datestr = maximizeVisibleCount;
                    }
                }
                else {
                    if (defaultVisibleCount == undefined || defaultVisibleCount == null || defaultVisibleCount <= 0)
                        defaultVisibleCount = 7;
                    if (xAxisLabels.length > 0) {
                        if (xAxisLabels.length <= defaultVisibleCount && xAxisLabels.length >= 1)
                            datestr = xAxisLabels.length;
                        if (xAxisLabels.length > defaultVisibleCount)
                            datestr = defaultVisibleCount;
                    }
                }
                //if (xAxisLabels.length > 0) {
                //    if (xAxisLabels.length <= 7 && xAxisLabels.length >= 1)
                //        datestr = xAxisLabels.length;
                //    if (xAxisLabels.length > 7)
                //        datestr = 7;
                //}

                var colors = [];
                if (colors == undefined || colors == null || colors.length == 0)
                    colors = ["#287bab", "#c79121", "#BBB"];

                //Display graph
                var BarChart = $.plot(barChart, ds, {
                    colors: colors,
                    grid: {
                        show: true,
                        hoverable: true,
                        clickable: true,
                        tickColor: '#DDD'
                    },
                    legend: {
                        show: true,
                        noColumns: 0, // number of colums in legend table
                        labelFormatter: function (label, series) {
                            return '<div style="font-size:13px;text-align:left;color:black;">' + label + '</div>';
                        }
                    },
                    resultLengh: (result != null && result != undefined ? result.length : 0),
                    xaxis: {
                        min: 0,
                        max: ds[0].data.length == 0 ? 0 : (datestr == 0 ? (parseInt(ds[0].data[ds[0].data.length - 1][0])) : datestr),
                        tickFormatter: xAxisLabelGenerator,
                        panRange: [0, ds.length],
                        tickDecimals: 0,
                        tickLength: 0,
                        axisLabel: myInstance.ChartConfig.MultiSeriesConfig.xAxisLabelText,
                        axisLabelUseCanvas: true,
                        axisLabelFontSizePixels: 11,
                        axisLabelFontFamily: 'sans-serif',
                        axisLabelPadding: 15
                    },
                    yaxis: {
                        min: 0,
                        max: ymax[0],
                        panRange: [0, (ymax[1] < ymax[0] ? ymax[0] : ymax[1])],
                        tickDecimals: 0,
                        axisLabel: myInstance.ChartConfig.MultiSeriesConfig.yAxisLabelText,
                        axisLabelUseCanvas: true,
                        axisLabelFontSizePixels: 11,
                        axisLabelFontFamily: 'sans-serif',
                        axisLabelPadding: 10
                    },
                    pan: {
                        interactive: true
                    },
                    tooltip: true,
                    tooltipOpts: {
                        content: "<span>%x - %y</span>",
                        defaultTheme: false
                    }
                });

                // and add panning buttons

                // little helper for taking the repetitive work out of placing
                // panning arrows

                function addArrow(dir, right, top, offset) {
                    if (result.length != 0) {
                        $("<img class='button' src='" + GetRelativeUrl("/img/arrow-") + dir + ".gif' style='right:" + right + "px;top:" + top + "px'>")
                            .appendTo(barChart)
                            .click(function (e) {
                                e.preventDefault();
                                BarChart.pan(offset);
                            });
                    }
                    else {
                        $("<img class='button' src='" + GetRelativeUrl("/img/arrow-") + dir + ".gif' style='right:" + right + "px;top:" + top + "px'>")
                               .appendTo(barChart);
                    }
                }

                addArrow("left", 55, 60, { left: -100 });
                addArrow("right", 25, 60, { left: 100 });
                addArrow("up", 40, 45, { top: -100 });
                addArrow("down", 40, 75, { top: 100 });

                if (myInstance.ChartConfig.CurrentDisplayFormatConfig != undefined && myInstance.ChartConfig.CurrentDisplayFormatConfig != null &&
                    myInstance.ChartConfig.CurrentDisplayFormatConfig.IsDetailViewEnabled != undefined && myInstance.ChartConfig.CurrentDisplayFormatConfig.IsDetailViewEnabled != null &&
                    myInstance.ChartConfig.CurrentDisplayFormatConfig.IsDetailViewEnabled) {
                    if (myInstance.ChartConfig.CurrentDisplayFormatConfig.DetailViewConfig != undefined && myInstance.ChartConfig.CurrentDisplayFormatConfig.DetailViewConfig != null) {
                        var _GetDetailViewForWidget = new GetDetailViewForWidget();
                        _GetDetailViewForWidget.ParentControlId = LoadingDivId;
                        _GetDetailViewForWidget.DetailViewConfig = myInstance.ChartConfig.CurrentDisplayFormatConfig.DetailViewConfig;
                        _GetDetailViewForWidget.Load(result);
                    }
                }

                if (myInstance.ChartConfig.CurrentDisplayFormatConfig.DrillDownEnableStatus != undefined && myInstance.ChartConfig.CurrentDisplayFormatConfig.DrillDownEnableStatus != null) {
                    var _GetDrilDownDetails = new GetDrilDownDetails();
                    _GetDrilDownDetails.CustomGroupInfoLst = myInstance.ChartConfig.SummaryInfoLst;
                    _GetDrilDownDetails.CurrentDisplayFormatConfig = myInstance.ChartConfig.CurrentDisplayFormatConfig;
                    _GetDrilDownDetails.DrillDownDisplayFormatConfig = myInstance.ChartConfig.CurrentDisplayFormatConfig.DrillDownDisplayFormatConfig;
                    _GetDrilDownDetails.FilterParamControlConfig = myInstance.ChartConfig.FilterParamControlConfig;
                    _GetDrilDownDetails.ChartConfig = myInstance.ChartConfig;
                    _GetDrilDownDetails.ContentFrameId = "DrillDownViewContent";
                    $('#' + ChartControlId).bind("plotclick", _GetDrilDownDetails.MultiColorBarClickEvent);
                }
            }
            removeLoadingPan(LoadingDivId);
        }
    }

    var ErrorFn = function (sender, Request, textStatus, errorThrown) {
        ShowMessage(errorThrown, 4);
        removeLoadingPan(LoadingDivId);
    }

    var GetDataSetForCharts = function (ds, result) {
        var data = [];
        if (result != undefined && result != null && result.length > 0) {
            var KeyValue = '';
            if (myInstance.ChartConfig.MultiSeriesConfig.IsXAxisMultiSeries)
                KeyValue = myInstance.ChartConfig.MultiSeriesConfig.xAxisValueKey[0];
            else
                KeyValue = myInstance.ChartConfig.MultiSeriesConfig.yAxisValueKey[0];
            for (var itr = 0; itr < result.length; itr++) {
                var data = [];
                var _extents = false;
                var _extentdata = [];
                data.push([itr, parseInt(result[itr].yAxisValue[KeyValue])]);
                if (xAxisLabels.length != result.length)
                    xAxisLabels.push(result[itr][myInstance.ChartConfig.MultiSeriesConfig.xAxisValueKey[0]]);
                var colorInfo = null;
                if (myInstance.ChartConfig.ColorInfoDct != undefined && myInstance.ChartConfig.ColorInfoDct != null) {
                    if (result[itr].xAxisId != undefined && result[itr].xAxisId != null && !isNaN(result[itr].xAxisId))
                        colorInfo = myInstance.ChartConfig.ColorInfoDct[result[itr].xAxisId];
                    else
                        colorInfo = myInstance.ChartConfig.ColorInfoDct[result[itr].xAxisValue];
                }
                var series = {};
                if (itr == 0) {
                    series = {
                        extents: { show: _extents },
                        extentdata: _extentdata,
                        data: data,
                        outputResult: result
                    };
                }
                else {
                    series = {
                        data: data,
                        outputResult: result
                    };
                }
                series["bars"] = {
                    show: true,
                    align: "left",
                    barWidth: 0.8
                };
                if (colorInfo != undefined && colorInfo != null) {
                    if (colorInfo.ColorCode != undefined && colorInfo.ColorCode != null && colorInfo.ColorCode != '')
                        series["color"] = colorInfo.ColorCode;
                    else if (colorInfo.ColorCSS != undefined && colorInfo.ColorCSS != null && colorInfo.ColorCSS != '')
                        series["color"] = colorInfo.ColorCSS;
                }
                ds.push(series);
            }
        }
        else {
            var _extents = true;
            var _extentdata = [];
            _extentdata = [
            { label: 'No records available', start: 0, end: 1, color : 'black' }];
            var series = {};
            series = {
                extents: { show: _extents },
                extentdata: _extentdata,
                data: [],
                outputResult: result
            };
            series["bars"] = {
                show: true,
                align: "left",
                barWidth: 0.8
            };
            ds.push(series);
        }
        return ds;
    }

    var GetMaxValueOfYAxis = function (ds) {
        var ymaxvalue = 0;
        var ymax = 0;

        for (var itr = 0; itr < ds.length; itr++) {
            for (var item in ds[itr].data) {
                if (ymaxvalue < ds[itr].data[item][1])
                    ymaxvalue = parseInt(ds[itr].data[item][1]);
            }
        }
        ymax = ymaxvalue + 10;

        return [ymax, ymaxvalue];
    }
}

function LoadPieChart() {
    var myInstance = this;
    this.ControlId = '';
    this.ChartConfig = null;
    var ChartControlId = '';
    this.Load = function () {
        ChartControlId = 'Chart_' + myInstance.ControlId;
        var Html = myInstance.GetHtml();
        var _AppendOrSetHtml = new AppendOrSetHtml();
        _AppendOrSetHtml.ControlId = myInstance.ControlId;
        _AppendOrSetHtml.Html = Html;
        _AppendOrSetHtml.SetHtml();

        if (myInstance.ChartConfig != undefined && myInstance.ChartConfig != null)
            myInstance.Init();
    }

    this.GetHtml = function () {
        var Html = '<div><div id = "' + ChartControlId + '" class = "chart has-legend pieChartclass"></div></div>';
        return Html;
    }

    this.Init = function () {
        var barChart = $('#' + ChartControlId);
        var obarChart = new OneViewPlotChartComponent();
        obarChart["ChartType"] = 'pie-multi';
        obarChart["LodingDivId"] = myInstance.ChartConfig.LodingDivId;
        obarChart["BaseFilterParam"] = myInstance.ChartConfig.BaseFilterParam;
        obarChart["IsSingleSeries"] = myInstance.ChartConfig.IsSingleSeries;
        obarChart["MultiSeriesConfig"] = myInstance.ChartConfig.MultiSeriesConfig;
        obarChart["Url"] = myInstance.ChartConfig.Url;

        obarChart["MultiSeriesConfig"]['SeriesType'] = myInstance.ChartConfig.MultiSeriesConfig.SeriesType;
        var seriesCount = myInstance.ChartConfig.MultiSeriesConfig.SeriesCount;
        obarChart["MultiSeriesConfig"]['SeriesCount'] = seriesCount;
        for (var itr = 0; itr < seriesCount; itr++) {
            obarChart["MultiSeriesConfig"]['SeriesType'].push("pie");
        }
        obarChart["MultiSeriesConfig"]['xAxisValueKey'] = myInstance.ChartConfig.MultiSeriesConfig.xAxisValueKey;
        obarChart["MultiSeriesConfig"]['yAxisValueKey'] = myInstance.ChartConfig.MultiSeriesConfig.yAxisValueKey;
        obarChart["MultiSeriesConfig"]['yAxisLegents'] = myInstance.ChartConfig.MultiSeriesConfig.yAxisLegents;
        obarChart["MultiSeriesConfig"]['Colors'] = myInstance.ChartConfig.MultiSeriesConfig.Colors;
        obarChart.PlotChart(barChart);
    }
}

function LoadMultiPieChart() {
    this.ControlId = '';
    this.ChartConfig = null;
    var ChartControlId = '';
    var myInstance = this;
    this.Load = function () {
        ChartControlId = 'Chart_' + myInstance.ControlId;
        var Html = myInstance.GetHtml();
        var _AppendOrSetHtml = new AppendOrSetHtml();
        _AppendOrSetHtml.ControlId = myInstance.ControlId;
        _AppendOrSetHtml.Html = Html;
        _AppendOrSetHtml.SetHtml();

        if (myInstance.ChartConfig != undefined && myInstance.ChartConfig != null)
            myInstance.Init();
    }

    this.GetHtml = function () {
        var Html = '<div id = "' + ChartControlId + '" class = "chart has-legend pieChartclass"></div>';
        return Html;
    }

    this.Init = function () {
        PlotPie();
    }

    var sucessFn = function (sender, response) {
        if (response == "Session Failure") {
            window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
            result = [];
            return false;
        }
        else {
            result = response;
            var barChart = $('#' + ChartControlId);
            if (result != null && result != undefined && result.length > 0) {
                var data = [];
                if (myInstance.ChartConfig.IsSingleSeries) {
                    for (var itr = 0; itr < result.length; itr++) {
                        var colorInfo = null;
                        if (myInstance.ChartConfig.ColorInfoDct != undefined && myInstance.ChartConfig.ColorInfoDct != null) {
                            if (result[itr].xAxisId != undefined && result[itr].xAxisId != null && !isNaN(result[itr].xAxisId))
                                colorInfo = myInstance.ChartConfig.ColorInfoDct[result[itr].xAxisId];
                            else
                                colorInfo = myInstance.ChartConfig.ColorInfoDct[result[itr].xAxisValue];
                        }
                        var series = {
                            label: result[itr].xAxisValue, data: result[itr].yAxisValue
                        };
                        if (colorInfo != undefined && colorInfo != null) {
                            if (colorInfo.ColorCode != undefined && colorInfo.ColorCode != null && colorInfo.ColorCode != '')
                                series["color"] = colorInfo.ColorCode;
                            else if (colorInfo.ColorCSS != undefined && colorInfo.ColorCSS != null && colorInfo.ColorCSS != '')
                                series["color"] = colorInfo.ColorCSS;
                        }
                        data.push(series);
                    }
                }
                else {
                    for (var itr = 0; itr < result.length; itr++) {
                        var colorInfo = null;
                        if (myInstance.ChartConfig.ColorInfoDct != undefined && myInstance.ChartConfig.ColorInfoDct != null) {
                            if (result[itr].xAxisId != undefined && result[itr].xAxisId != null && !isNaN(result[itr].xAxisId))
                                colorInfo = myInstance.ChartConfig.ColorInfoDct[result[itr].xAxisId];
                            else
                                colorInfo = myInstance.ChartConfig.ColorInfoDct[result[itr].xAxisValue];
                        }
                        for (var i = 0; i < myInstance.ChartConfig.MultiSeriesConfig.SeriesCount; i++) {
                            var series = {
                                label:  result[itr].xAxisValue, data: result[itr].yAxisValue[myInstance.ChartConfig.MultiSeriesConfig.yAxisValueKey[i]]
                            };
                            if (colorInfo != undefined && colorInfo != null) {
                                if (colorInfo.ColorCode != undefined && colorInfo.ColorCode != null && colorInfo.ColorCode != '')
                                    series["color"] = colorInfo.ColorCode;
                                else if (colorInfo.ColorCSS != undefined && colorInfo.ColorCSS != null && colorInfo.ColorCSS != '')
                                    series["color"] = colorInfo.ColorCSS;
                            }
                            data.push(series);
                        }
                    }
                }

                $.plot(barChart, data, {
                    series: {
                        pie: {
                            show: true,
                            innerRadius: 0.5,
                            radius: 1,
                            label: {
                                show: false,
                                radius: 2 / 3,
                                formatter: function (label, series) {
                                    return '<div style="font-size:11px;text-align:center;padding:4px;color:black;">' + label + '<br/>' + Math.round(series.percent) + '%</div>';
                                },
                                threshold: 0.1
                            }
                        }
                    },
                    legend: {
                        show: true,
                        noColumns: 1, // number of colums in legend table
                        labelFormatter: function (label, series) {
                            return '<div style="font-size:13px;text-align:left;color:black;">' + label + ' - ' + series.data[0][1] + '</div>';
                        }, // fn: string -> string
                        labelBoxBorderColor: "#000", // border color for the little label boxes
                        container: null, // container (as jQuery object) to put legend in, null means default on top of graph
                        position: "ne", // position of default legend container within plot
                        margin: [5, 10], // distance from grid edge to default legend container within plot
                        backgroundColor: "#efefef", // null means auto-detect
                        backgroundOpacity: 0 // set to 0 to avoid background
                    },
                    resultLengh: (result != null && result != undefined ? result.length : 0),
                    tooltip: {
                        show: true,
                        content: "%s =%n", // show percentages, rounding to 2 decimal places (ex:) "%p.0%, %s, n=%n"
                        shifts: {
                            x: 20,
                            y: 0
                        },
                        defaultTheme: false
                    },
                    grid: {
                        hoverable: true,
                        clickable: true
                    },
                });

                if (myInstance.ChartConfig.CurrentDisplayFormatConfig != undefined && myInstance.ChartConfig.CurrentDisplayFormatConfig != null &&
                    myInstance.ChartConfig.CurrentDisplayFormatConfig.IsDetailViewEnabled != undefined && myInstance.ChartConfig.CurrentDisplayFormatConfig.IsDetailViewEnabled != null &&
                    myInstance.ChartConfig.CurrentDisplayFormatConfig.IsDetailViewEnabled) {
                    if (myInstance.ChartConfig.CurrentDisplayFormatConfig.DetailViewConfig != undefined && myInstance.ChartConfig.CurrentDisplayFormatConfig.DetailViewConfig != null) {
                        var _GetDetailViewForWidget = new GetDetailViewForWidget();
                        _GetDetailViewForWidget.ParentControlId = myInstance.LodingDivId;
                        _GetDetailViewForWidget.DetailViewConfig = myInstance.ChartConfig.CurrentDisplayFormatConfig.DetailViewConfig;
                        _GetDetailViewForWidget.Load(result);
                    }
                }

                if (myInstance.ChartConfig.CurrentDisplayFormatConfig.DrillDownEnableStatus != undefined && myInstance.ChartConfig.CurrentDisplayFormatConfig.DrillDownEnableStatus != null) {
                    var _GetDrilDownDetails = new GetDrilDownDetails();
                    _GetDrilDownDetails.CustomGroupInfoLst = myInstance.ChartConfig.SummaryInfoLst;
                    _GetDrilDownDetails.CurrentDisplayFormatConfig = myInstance.ChartConfig.CurrentDisplayFormatConfig;
                    _GetDrilDownDetails.DrillDownDisplayFormatConfig = myInstance.ChartConfig.CurrentDisplayFormatConfig.DrillDownDisplayFormatConfig;
                    _GetDrilDownDetails.FilterParamControlConfig = myInstance.ChartConfig.FilterParamControlConfig;
                    _GetDrilDownDetails.ChartConfig = myInstance.ChartConfig;
                    _GetDrilDownDetails.ContentFrameId = "DrillDownViewContent";
                    $('#Chart_' + myInstance.ControlId).bind("plotclick", _GetDrilDownDetails.PiePlotClickEvent);
                }
            }
            else {
                barChart.html('<div class="norecordsfound">No records available</div>');
            }
            removeLoadingPan(myInstance.ChartConfig.LodingDivId);
        }
    }

    var ErrorFn = function (sender, Request, textStatus, errorThrown) {
        ShowMessage(errorThrown, 4);
        removeLoadingPan(myInstance.ChartConfig.LodingDivId);
    }

    var PlotPie = function () {
        var args = {
            success: sucessFn,
            error: ErrorFn,
            sender: this
        };
        var myAjaxobj = new WiNAiMAjax();
        myAjaxobj.url = myInstance.ChartConfig.Url;
        myAjaxobj.webMethod = "post";
        myAjaxobj.async = true;
        myAjaxobj.parameter = myInstance.ChartConfig.BaseFilterParam;
        myAjaxobj.contentType = 'application/json; charset=utf-8';
        myAjaxobj.dataType = 'json';
        myAjaxobj.execute(args);
    }
}

function LoadMultiFullPieChart() {
    this.ControlId = '';
    this.ChartConfig = null;
    var ChartControlId = '';
    var myInstance = this;
    this.Load = function () {
        ChartControlId = 'Chart_' + myInstance.ControlId;
        var Html = myInstance.GetHtml();
        var _AppendOrSetHtml = new AppendOrSetHtml();
        _AppendOrSetHtml.ControlId = myInstance.ControlId;
        _AppendOrSetHtml.Html = Html;
        _AppendOrSetHtml.SetHtml();

        if (myInstance.ChartConfig != undefined && myInstance.ChartConfig != null)
            myInstance.Init();
    }

    this.GetHtml = function () {
        var Html = '<div id = "' + ChartControlId + '" class = "chart has-legend pieChartclass"></div>';
        return Html;
    }

    this.Init = function () {
        PlotPie();
    }

    var sucessFn = function (sender, response) {
        if (response == "Session Failure") {
            window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
            result = [];
            return false;
        }
        else {
            result = response;
            var barChart = $('#' + ChartControlId);
            if (result != null && result != undefined && result.length > 0) {
                var data = [];
                if (myInstance.ChartConfig.IsSingleSeries) {
                    for (var itr = 0; itr < result.length; itr++) {
                        var colorInfo = null;
                        if (myInstance.ChartConfig.ColorInfoDct != undefined && myInstance.ChartConfig.ColorInfoDct != null) {
                            if (result[itr].xAxisId != undefined && result[itr].xAxisId != null && !isNaN(result[itr].xAxisId))
                                colorInfo = myInstance.ChartConfig.ColorInfoDct[result[itr].xAxisId];
                            else
                                colorInfo = myInstance.ChartConfig.ColorInfoDct[result[itr].xAxisValue];
                        }
                        var series = {
                            label: result[itr].xAxisValue, data: result[itr].yAxisValue
                        };
                        if (colorInfo != undefined && colorInfo != null) {
                            if (colorInfo.ColorCode != undefined && colorInfo.ColorCode != null && colorInfo.ColorCode != '')
                                series["color"] = colorInfo.ColorCode;
                            else if (colorInfo.ColorCSS != undefined && colorInfo.ColorCSS != null && colorInfo.ColorCSS != '')
                                series["color"] = colorInfo.ColorCSS;
                        }
                        data.push(series);
                    }
                }
                else {
                    for (var itr = 0; itr < result.length; itr++) {
                        var colorInfo = null;
                        if (myInstance.ChartConfig.ColorInfoDct != undefined && myInstance.ChartConfig.ColorInfoDct != null) {
                            if (result[itr].xAxisId != undefined && result[itr].xAxisId != null && !isNaN(result[itr].xAxisId))
                                colorInfo = myInstance.ChartConfig.ColorInfoDct[result[itr].xAxisId];
                            else
                                colorInfo = myInstance.ChartConfig.ColorInfoDct[result[itr].xAxisValue];
                        }
                        for (var i = 0; i < myInstance.ChartConfig.MultiSeriesConfig.SeriesCount; i++) {
                            var series = {
                                label: result[itr].xAxisValue, data: result[itr].yAxisValue[myInstance.ChartConfig.MultiSeriesConfig.yAxisValueKey[i]]
                            };
                            if (colorInfo != undefined && colorInfo != null) {
                                if (colorInfo.ColorCode != undefined && colorInfo.ColorCode != null && colorInfo.ColorCode != '')
                                    series["color"] = colorInfo.ColorCode;
                                else if (colorInfo.ColorCSS != undefined && colorInfo.ColorCSS != null && colorInfo.ColorCSS != '')
                                    series["color"] = colorInfo.ColorCSS;
                            }
                            data.push(series);
                        }
                    }
                }

                $.plot(barChart, data, {
                    series: {
                        pie: {
                            show: true,
                            innerRadius: 0,
                            radius: 1,
                            label: {
                                show: false,
                                radius: 2 / 3,
                                formatter: function (label, series) {
                                    return '<div style="font-size:11px;text-align:center;padding:4px;color:black;">' + label + '<br/>' + Math.round(series.percent) + '%</div>';
                                },
                                threshold: 0.1
                            }
                        }
                    },
                    legend: {
                        show: true,
                        noColumns: 1, // number of colums in legend table
                        labelFormatter: function (label, series) {
                            return '<div style="font-size:13px;text-align:left;color:black;">' + label + ' - ' + series.data[0][1] + '</div>';
                        }, // fn: string -> string
                        labelBoxBorderColor: "#000", // border color for the little label boxes
                        container: null, // container (as jQuery object) to put legend in, null means default on top of graph
                        position: "ne", // position of default legend container within plot
                        margin: [5, 10], // distance from grid edge to default legend container within plot
                        backgroundColor: "#efefef", // null means auto-detect
                        backgroundOpacity: 0 // set to 0 to avoid background
                    },
                    resultLengh: (result != null && result != undefined ? result.length : 0),
                    tooltip: {
                        show: true,
                        content: "%s =%n", // show percentages, rounding to 2 decimal places (ex:) "%p.0%, %s, n=%n"
                        shifts: {
                            x: 20,
                            y: 0
                        },
                        defaultTheme: false
                    },
                    grid: {
                        hoverable: true,
                        clickable: true
                    },
                });

                if (myInstance.ChartConfig.CurrentDisplayFormatConfig != undefined && myInstance.ChartConfig.CurrentDisplayFormatConfig != null &&
                    myInstance.ChartConfig.CurrentDisplayFormatConfig.IsDetailViewEnabled != undefined && myInstance.ChartConfig.CurrentDisplayFormatConfig.IsDetailViewEnabled != null &&
                    myInstance.ChartConfig.CurrentDisplayFormatConfig.IsDetailViewEnabled) {
                    if (myInstance.ChartConfig.CurrentDisplayFormatConfig.DetailViewConfig != undefined && myInstance.ChartConfig.CurrentDisplayFormatConfig.DetailViewConfig != null) {
                        var _GetDetailViewForWidget = new GetDetailViewForWidget();
                        _GetDetailViewForWidget.ParentControlId = myInstance.LodingDivId;
                        _GetDetailViewForWidget.DetailViewConfig = myInstance.ChartConfig.CurrentDisplayFormatConfig.DetailViewConfig;
                        _GetDetailViewForWidget.Load(result);
                    }
                }

                if (myInstance.ChartConfig.CurrentDisplayFormatConfig.DrillDownEnableStatus != undefined && myInstance.ChartConfig.CurrentDisplayFormatConfig.DrillDownEnableStatus != null) {
                    var _GetDrilDownDetails = new GetDrilDownDetails();
                    _GetDrilDownDetails.CustomGroupInfoLst = myInstance.ChartConfig.SummaryInfoLst;
                    _GetDrilDownDetails.CurrentDisplayFormatConfig = myInstance.ChartConfig.CurrentDisplayFormatConfig;
                    _GetDrilDownDetails.DrillDownDisplayFormatConfig = myInstance.ChartConfig.CurrentDisplayFormatConfig.DrillDownDisplayFormatConfig;
                    _GetDrilDownDetails.FilterParamControlConfig = myInstance.ChartConfig.FilterParamControlConfig;
                    _GetDrilDownDetails.ChartConfig = myInstance.ChartConfig;
                    _GetDrilDownDetails.ContentFrameId = "DrillDownViewContent";
                    $('#Chart_' + myInstance.ControlId).bind("plotclick", _GetDrilDownDetails.PiePlotClickEvent);
                }
            }
            else {
                barChart.html('<div class="norecordsfound">No records available</div>');
            }
            removeLoadingPan(myInstance.ChartConfig.LodingDivId);
        }
    }

    var ErrorFn = function (sender, Request, textStatus, errorThrown) {
        ShowMessage(errorThrown, 4);
        removeLoadingPan(myInstance.ChartConfig.LodingDivId);
    }

    var PlotPie = function () {
        var args = {
            success: sucessFn,
            error: ErrorFn,
            sender: this
        };
        var myAjaxobj = new WiNAiMAjax();
        myAjaxobj.url = myInstance.ChartConfig.Url;
        myAjaxobj.webMethod = "post";
        myAjaxobj.async = true;
        myAjaxobj.parameter = myInstance.ChartConfig.BaseFilterParam;
        myAjaxobj.contentType = 'application/json; charset=utf-8';
        myAjaxobj.dataType = 'json';
        myAjaxobj.execute(args);
    }
}

function LoadPie_GaugeChart() {
    this.ControlId = '';
    this.ChartConfig = null;
    var ChartControlId = '';
    var myInstance = this;
    this.Load = function () {
        ChartControlId = 'Chart_' + myInstance.ControlId;
        //var Html = myInstance.GetHtml();
        //myInstance.SetHtml(myInstance.ControlId, Html);

        if (myInstance.ChartConfig != undefined && myInstance.ChartConfig != null)
            myInstance.Init();
    }

    this.GetHtml = function () {
        var Html = '<div id = "' + ChartControlId + '" class = ""></div>';
        return Html;
    }

    this.ClearHtml = function (ControlId) {
        if (ControlId != undefined && ControlId != null) {
            var Control = document.getElementById(ControlId);
            if (Control != undefined && Control != null) {
                Control.innerHTML = '';
            }
        }
    }

    this.Init = function () {
        myInstance.PlotPie();
    }

    var sucessFn = function (sender, response) {
        if (response == "Session Failure") {
            window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
            result = [];
            return false;
        }
        else {
            result = response;
            if (result != null && result != undefined && result.length > 0) {
                var loopLength = 0;
                if (result.length > 4)
                    loopLength = 4;
                else
                    loopLength = result.length;
                var colSpanLen = Math.round(12 / loopLength);
                for (var itr = 0; itr < loopLength; itr++) {
                    if (result[itr] != undefined && result[itr] != null) {
                        var Html = '<div class="col-sm-' + (colSpanLen == 0 ? 3 : colSpanLen) + '"><div id = "' + ChartControlId + '_' + (itr + 1) + '" class="chart has-legend pieChartclass"></div>' +
                            '<div class="gauge-txt padding-10"><strong>' + result[itr].xAxisValue + '</strong></div></div>';
                        var _AppendOrSetHtml = new AppendOrSetHtml();
                        _AppendOrSetHtml.ControlId = myInstance.ControlId;
                        _AppendOrSetHtml.Html = Html;
                        _AppendOrSetHtml.AppendHtml();
                        //myInstance.AppendHtml(myInstance.ControlId, Html);
                    }
                }

                for (var itr = 0; itr < 4; itr++) {
                    if (result[itr] != undefined && result[itr] != null) {
                        var barChart = $('#' + (ChartControlId + '_' + (itr + 1)));
                        if (barChart.length && result != null && result != undefined && result.length > 0) {
                            var data = [];
                            for (var i = 0; i < myInstance.ChartConfig.MultiSeriesConfig.SeriesCount; i++) {
                                data.push({
                                    label: myInstance.ChartConfig.MultiSeriesConfig.yAxisLegents[i], data: result[itr].yAxisValue[myInstance.ChartConfig.MultiSeriesConfig.yAxisValueKey[i]]
                                });
                            }

                            $.plot(barChart, data, {
                                series: {
                                    pie: {
                                        show: true,
                                        innerRadius: 0.5,
                                        radius: 1,
                                        label: {
                                            show: false,
                                            radius: 2 / 3,
                                            formatter: function (label, series) {
                                                return '<div style="font-size:11px;text-align:center;padding:4px;color:white;">' + label + '<br/>' + Math.round(series.percent) + '%</div>';
                                            },
                                            threshold: 0.1
                                        }
                                    }
                                },
                                legend: {
                                    show: true,
                                    noColumns: 1, // number of colums in legend table
                                    labelFormatter: null, // fn: string -> string
                                    labelBoxBorderColor: "#000", // border color for the little label boxes
                                    container: null, // container (as jQuery object) to put legend in, null means default on top of graph
                                    position: "ne", // position of default legend container within plot
                                    margin: [5, 10], // distance from grid edge to default legend container within plot
                                    backgroundColor: "#efefef", // null means auto-detect
                                    backgroundOpacity: 1 // set to 0 to avoid background
                                },
                                tooltip: {
                                    show: true,
                                    content: "%p.0%, %s, n=%n", // show percentages, rounding to 2 decimal places
                                    shifts: {
                                        x: 20,
                                        y: 0
                                    },
                                    defaultTheme: false
                                },
                                grid: {
                                    hoverable: true,
                                    clickable: true
                                },
                            });
                        }
                    }
                }
            }
            removeLoadingPan(myInstance.ChartConfig.LodingDivId);
        }
    }

    var ErrorFn = function (sender, Request, textStatus, errorThrown) {
        ShowMessage(errorThrown, 4);
        removeLoadingPan(myInstance.ChartConfig.LodingDivId);
    }

    this.PlotPie = function () {
        myInstance.ClearHtml(myInstance.ControlId);
        var args = {
            success: sucessFn,
            error: ErrorFn,
            sender: this
        };
        var myAjaxobj = new WiNAiMAjax();
        myAjaxobj.url = myInstance.ChartConfig.Url;
        myAjaxobj.webMethod = "post";
        myAjaxobj.async = true;
        myAjaxobj.parameter = myInstance.ChartConfig.BaseFilterParam;
        myAjaxobj.contentType = 'application/json; charset=utf-8';
        myAjaxobj.dataType = 'json';
        myAjaxobj.execute(args);
    }
}

function LoadGaugeChart() {
    this.ControlId = '';
    this.ChartConfig = null;
    var ChartControlId = '';
    var myInstance = this;
    this.Load = function () {
        ChartControlId = 'Chart_' + myInstance.ControlId;
        var Html = myInstance.GetHtml();
        myInstance.SetHtml(myInstance.ControlId, Html);
        myInstance.ClearHtml(ChartControlId);

        if (myInstance.ChartConfig != undefined && myInstance.ChartConfig != null)
            myInstance.Init();
    }

    this.GetHtml = function () {
        var Html = '<div id = "' + ChartControlId + '" class = "guageScroll" style = "height:180px;"></div>';
        return Html;
    }

    this.SetHtml = function (ControlId, Html) {
        if (ControlId != undefined && ControlId != null && ControlId != '') {
            var Control = document.getElementById(ControlId);
            if (Control != undefined && Control != null) {
                Control.innerHTML = Html;
            }
        }
    }

    this.AppendHtml = function (ControlId, Html) {
        if (ControlId != undefined && ControlId != null) {
            var Control = document.getElementById(ControlId);
            if (Control != undefined && Control != null) {
                Control.innerHTML += Html;
            }
        }
    }

    this.ClearHtml = function (ControlId) {
        if (ControlId != undefined && ControlId != null) {
            var Control = document.getElementById(ControlId);
            if (Control != undefined && Control != null) {
                Control.innerHTML = '';
            }
        }
    }

    this.Init = function () {
        myInstance.PlotPie();
    }

    var sucessFn = function (sender, response) {
        if (response == "Session Failure") {
            window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
            result = [];
            return false;
        }
        else {
            result = response;
            var SummaryInfoLst = myInstance.ChartConfig["SummaryInfoLst"];
            if (SummaryInfoLst != null && SummaryInfoLst != undefined && SummaryInfoLst.length > 0) {
                var loopLength = 0;
                //if (result.length > 4)
                //    loopLength = 4;
                //else
                loopLength = SummaryInfoLst.length;
                var colSpanLen = Math.round(12 / loopLength);

                var oDashBoardSmartWidgetLoad = new DashBoardSmartWidgetLoad();
                if (SummaryInfoLst != undefined && SummaryInfoLst != null && SummaryInfoLst.length > 0) {
                    for (var itr = 0; itr < SummaryInfoLst.length; itr++) {
                        var GroupName = '';
                        if (SummaryInfoLst[itr].GroupName != undefined)
                            GroupName = SummaryInfoLst[itr].GroupName;
                        else if (SummaryInfoLst[itr].NCRuleName != undefined)
                            GroupName = SummaryInfoLst[itr].NCRuleName;
                        if (SummaryInfoLst[itr] != undefined && SummaryInfoLst[itr] != null) {
                            var Html = '<div class="col-sm-' + (colSpanLen == 0 ? 3 : colSpanLen) + '">' +
                            '<div id="g_' + GroupName.replace(' ', '') + '" class="gauge"></div>' +
                                '<div class="gauge-txt padding-10 text-center"><strong>' + SummaryInfoLst[itr].DisplayNamekey + '</strong></div></div>';
                            myInstance.AppendHtml(ChartControlId, Html);
                        }
                    }
                    for (var itr = 0; itr < SummaryInfoLst.length; itr++) {
                        var GroupName = '';
                        if (SummaryInfoLst[itr].GroupName != undefined)
                            GroupName = SummaryInfoLst[itr].GroupName;
                        else if (SummaryInfoLst[itr].NCRuleName != undefined)
                            GroupName = SummaryInfoLst[itr].NCRuleName;

                        var FilteredResult = [];
                        if(result != undefined && result != null && result.length > 0)
                            FilteredResult = result.filter(OneViewArrayFilter("xAxisValue", GroupName));
                        var oFilteredResult = null;
                        var value = '';
                        var SummaryTypeName = '';
                        if (FilteredResult != null && FilteredResult != undefined && FilteredResult.length > 0) {
                            oFilteredResult = FilteredResult[0];
                            if (oFilteredResult != null && oFilteredResult != undefined && oFilteredResult["yAxisValue"] != null && oFilteredResult["yAxisValue"] != undefined && typeof (oFilteredResult["yAxisValue"]) != "object")
                                value = oFilteredResult["yAxisValue"];
                            else {
                                var WidgetDataComparisonConfigList = myInstance.ChartConfig["CurrentDisplayFormatConfig"].WidgetDataComparisonConfigList;
                                for (var jtr = 0; jtr < WidgetDataComparisonConfigList.length; jtr++) {
                                    SummaryTypeName = WidgetDataComparisonConfigList[jtr].SummaryTypeName;
                                    /* if Widget Summary Type is CustomExpression */
                                    if (WidgetDataComparisonConfigList[jtr].SummaryType == 12) {
                                        var expressionValue = WidgetDataComparisonConfigList[jtr].ExpressionToEvaluate;
                                        for (var Key in WidgetDataComparisonConfigList[jtr].KeysToEvaluate) {
                                            if (expressionValue.indexOf(WidgetDataComparisonConfigList[jtr].KeysToEvaluate[Key]) >= 0) {
                                                expressionValue = expressionValue.replaceAll(WidgetDataComparisonConfigList[jtr].KeysToEvaluate[Key], oFilteredResult["yAxisValue"][WidgetDataComparisonConfigList[jtr].KeysToEvaluate[Key]]);
                                            }
                                        }
                                        try {
                                            value = eval(expressionValue);
                                        }
                                        catch (ex) {
                                            value = 0;
                                            console.log("expression wrong : " + expressionValue);
                                        }
                                    }
                                    else {
                                        value = oFilteredResult["yAxisValue"][WidgetDataComparisonConfigList[jtr].SummaryTypeName];
                                    }
                                }
                            }
                        }
                        var customSectors = [];
                        var Ranking = SummaryInfoLst[itr]["Ranking"];
                        if (Ranking != undefined && Ranking != null) {
                            var RankingInfo = Ranking[SummaryTypeName];
                            for (var rankinfoItem in RankingInfo) {
                                if (typeof (RankingInfo[rankinfoItem]) != 'function') {
                                    var oRankingInfo = RankingInfo[rankinfoItem];
                                    if (oRankingInfo != undefined && oRankingInfo != null) {
                                        var ColorCode = (oRankingInfo.ColorCode == undefined || oRankingInfo.ColorCode == null || oRankingInfo.ColorCode == '' ? oRankingInfo.ColorCSS : oRankingInfo.ColorCode);
                                        var FromRange = (oRankingInfo.FromRange);
                                        var ToRange = (oRankingInfo.ToRange);
                                        customSectors.push({ color: ColorCode, lo: FromRange, hi: ToRange });
                                    }
                                }
                            }
                        }
                        else {
                            customSectors = [{
                                color: '#ff0000',
                                lo: 0,
                                hi: 75
                            }, {
                                color: '#FFC200',
                                lo: 75,
                                hi: 85
                            }, {
                                color: '#8cc300',
                                lo: 85,
                                hi: 100
                            }]
                        }
                        var options = {
                            id: ('g_' + GroupName.replace(' ', '')),
                            value: (value != undefined && value != null && value != '' && !isNaN(value) ? value : 0),
                            min: 0,
                            max: 100,
                            symbol: '%',
                            pointer: true,
                            gaugeWidthScale: 0.6,
                            customSectors: customSectors,
                            counter: true
                        };
                        oDashBoardSmartWidgetLoad.onLoadJustGaugeWidget(options);
                    }
                }
            }
            removeLoadingPan(myInstance.ChartConfig.LodingDivId);
        }
    }

    var ErrorFn = function (sender, Request, textStatus, errorThrown) {
        ShowMessage(errorThrown, 4);
        removeLoadingPan(myInstance.ChartConfig.LodingDivId);
    }

    this.PlotPie = function () {
        var args = {
            success: sucessFn,
            error: ErrorFn,
            sender: this
        };
        var myAjaxobj = new WiNAiMAjax();
        myAjaxobj.url = myInstance.ChartConfig.Url;
        myAjaxobj.webMethod = "post";
        myAjaxobj.async = true;
        myAjaxobj.parameter = myInstance.ChartConfig.BaseFilterParam;
        myAjaxobj.contentType = 'application/json; charset=utf-8';
        myAjaxobj.dataType = 'json';
        myAjaxobj.execute(args);
    }
}

function LoadJqueryGaugeChart() {
    this.ControlId = '';
    this.ChartConfig = null;
    var ChartControlId = '';
    var myInstance = this;
    this.Load = function () {
        ChartControlId = 'Chart_' + myInstance.ControlId;
        var Html = myInstance.GetHtml();
        myInstance.SetHtml(myInstance.ControlId, Html);
        myInstance.ClearHtml(ChartControlId);

        if (myInstance.ChartConfig != undefined && myInstance.ChartConfig != null)
            myInstance.Init();
    }

    this.GetHtml = function () {
        var Html = '<div id = "' + ChartControlId + '" class = "guageScroll" style = "height:180px;"></div>';
        return Html;
    }

    this.SetHtml = function (ControlId, Html) {
        if (ControlId != undefined && ControlId != null && ControlId != '') {
            var Control = document.getElementById(ControlId);
            if (Control != undefined && Control != null) {
                Control.innerHTML = Html;
            }
        }
    }

    this.AppendHtml = function (ControlId, Html) {
        if (ControlId != undefined && ControlId != null) {
            var Control = document.getElementById(ControlId);
            if (Control != undefined && Control != null) {
                Control.innerHTML += Html;
            }
        }
    }

    this.ClearHtml = function (ControlId) {
        if (ControlId != undefined && ControlId != null) {
            var Control = document.getElementById(ControlId);
            if (Control != undefined && Control != null) {
                Control.innerHTML = '';
            }
        }
    }

    this.Init = function () {
        myInstance.PlotPie();
    }

    var sucessFn = function (sender, response) {
        if (response == "Session Failure") {
            window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
            result = [];
            return false;
        }
        else {
            result = response;
            var SummaryInfoLst = myInstance.ChartConfig["SummaryInfoLst"];
            if (SummaryInfoLst != null && SummaryInfoLst != undefined && SummaryInfoLst.length > 0) {
                var loopLength = 0;
                //if (result.length > 4)
                //    loopLength = 4;
                //else
                loopLength = SummaryInfoLst.length;
                var colSpanLen = Math.round(12 / loopLength);
                var colWidth = Math.round(100 / loopLength);

                var oDashBoardSmartWidgetLoad = new DashBoardSmartWidgetLoad();
                if (SummaryInfoLst != undefined && SummaryInfoLst != null && SummaryInfoLst.length > 0) {
                    for (var itr = 0; itr < SummaryInfoLst.length; itr++) {
                        var GroupName = '';
                        if (SummaryInfoLst[itr].GroupName != undefined)
                            GroupName = SummaryInfoLst[itr].GroupName;
                        else if (SummaryInfoLst[itr].NCRuleName != undefined)
                            GroupName = SummaryInfoLst[itr].NCRuleName;
                        if (SummaryInfoLst[itr] != undefined && SummaryInfoLst[itr] != null) {
                            var Html = '<div class="col-sm-' + (colSpanLen == 0 ? 3 : colSpanLen) + '" style = "' + (colWidth > 0 ? ("width : " + colWidth + "%") : "") + '">' +
                            '<div class= "text-center"><canvas id="g_' + GroupName.replace(' ', '') + '" style = "100%"></canvas></div>' +
                                '<div class="gauge-txt padding-10 text-center"><strong>' + SummaryInfoLst[itr].DisplayNamekey + '</strong></div></div>';
                            myInstance.AppendHtml(ChartControlId, Html);
                        }
                    }
                    for (var itr = 0; itr < SummaryInfoLst.length; itr++) {
                        var GroupName = '';
                        if (SummaryInfoLst[itr].GroupName != undefined)
                            GroupName = SummaryInfoLst[itr].GroupName;
                        else if (SummaryInfoLst[itr].NCRuleName != undefined)
                            GroupName = SummaryInfoLst[itr].NCRuleName;

                        var FilteredResult = [];
                        if (result != undefined && result != null && result.length > 0)
                            FilteredResult = result.filter(OneViewArrayFilter("xAxisValue", GroupName));
                        var oFilteredResult = null;
                        var value = '';
                        var SummaryTypeName = '';
                        if (FilteredResult != null && FilteredResult != undefined && FilteredResult.length > 0) {
                            oFilteredResult = FilteredResult[0];
                            if (oFilteredResult != null && oFilteredResult != undefined && oFilteredResult["yAxisValue"] != null && oFilteredResult["yAxisValue"] != undefined && typeof (oFilteredResult["yAxisValue"]) != "object")
                                value = oFilteredResult["yAxisValue"];
                            else {
                                var WidgetDataComparisonConfigList = myInstance.ChartConfig["CurrentDisplayFormatConfig"].WidgetDataComparisonConfigList;
                                for (var jtr = 0; jtr < WidgetDataComparisonConfigList.length; jtr++) {
                                    SummaryTypeName = WidgetDataComparisonConfigList[jtr].SummaryTypeName;
                                    /* if Widget Summary Type is CustomExpression */
                                    if (WidgetDataComparisonConfigList[jtr].SummaryType == 12) {
                                        var expressionValue = WidgetDataComparisonConfigList[jtr].ExpressionToEvaluate;
                                        for (var Key in WidgetDataComparisonConfigList[jtr].KeysToEvaluate) {
                                            if (expressionValue.indexOf(WidgetDataComparisonConfigList[jtr].KeysToEvaluate[Key]) >= 0) {
                                                expressionValue = expressionValue.replaceAll(WidgetDataComparisonConfigList[jtr].KeysToEvaluate[Key], oFilteredResult["yAxisValue"][WidgetDataComparisonConfigList[jtr].KeysToEvaluate[Key]]);
                                            }
                                        }
                                        try {
                                            value = eval(expressionValue);
                                        }
                                        catch (ex) {
                                            value = 0;
                                            console.log("expression wrong : " + expressionValue);
                                        }
                                    }
                                    else {
                                        value = oFilteredResult["yAxisValue"][WidgetDataComparisonConfigList[jtr].SummaryTypeName];
                                    }
                                }
                            }
                        }
                        var customSectors = [];
                        var Ranking = SummaryInfoLst[itr]["Ranking"];
                        if (Ranking != undefined && Ranking != null) {
                            var RankingInfo = Ranking[SummaryTypeName];
                            for (var rankinfoItem in RankingInfo) {
                                if (typeof (RankingInfo[rankinfoItem]) != 'function') {
                                    var oRankingInfo = RankingInfo[rankinfoItem];
                                    if (oRankingInfo != undefined && oRankingInfo != null) {
                                        var ColorCode = (oRankingInfo.ColorCode == undefined || oRankingInfo.ColorCode == null || oRankingInfo.ColorCode == '' ? oRankingInfo.ColorCSS : oRankingInfo.ColorCode);
                                        var FromRange = (oRankingInfo.FromRange);
                                        var ToRange = (oRankingInfo.ToRange);
                                        customSectors.push({ color: ColorCode, from: FromRange, to: ToRange });
                                    }
                                }
                            }
                        }
                        if (customSectors == undefined || customSectors == null || customSectors.length == 0) {
                            customSectors = [{
                                color: '#ff0000',
                                from: 0,
                                to: 75
                            }, {
                                color: '#FFC200',
                                from: 75,
                                to: 85
                            }, {
                                color: '#8cc300',
                                from: 85,
                                to: 100
                            }]
                        }
                        var options = {
                            minorTicks: 1,
                            colorOfCenterCircleFill: '#FFFFFF',
                            colorOfCenterCircleStroke: '#000000',
                            colorOfPointerFill: '#000000',
                            colorOfPointerStroke: '#000000',
                            bands: customSectors,
                            max: 100
                        };
                        oDashBoardSmartWidgetLoad.onLoadJqueryGaugeWidget(('g_' + GroupName.replace(' ', '')), options, (value == '' ? 0 : value));
                    }
                }
            }
            removeLoadingPan(myInstance.ChartConfig.LodingDivId);
        }
    }

    var ErrorFn = function (sender, Request, textStatus, errorThrown) {
        ShowMessage(errorThrown, 4);
        removeLoadingPan(myInstance.ChartConfig.LodingDivId);
    }

    this.PlotPie = function () {
        var args = {
            success: sucessFn,
            error: ErrorFn,
            sender: this
        };
        var myAjaxobj = new WiNAiMAjax();
        myAjaxobj.url = myInstance.ChartConfig.Url;
        myAjaxobj.webMethod = "post";
        myAjaxobj.async = true;
        myAjaxobj.parameter = myInstance.ChartConfig.BaseFilterParam;
        myAjaxobj.contentType = 'application/json; charset=utf-8';
        myAjaxobj.dataType = 'json';
        myAjaxobj.execute(args);
    }
}

function LoadEasyPieChart() {
    this.ControlId = '';
    this.ChartConfig = null;
    this.async = true;
    var ChartControlId = '';
    this.DashboardCommonFilter = null;
    var myInstance = this;
    this.Load = function () {
        ChartControlId = 'Chart_' + myInstance.ControlId;
        var Html = myInstance.GetHtml();
        var _AppendOrSetHtml = new AppendOrSetHtml();
        _AppendOrSetHtml.ControlId = myInstance.ControlId;
        _AppendOrSetHtml.Html = Html;
        _AppendOrSetHtml.SetHtml();

        if (myInstance.ChartConfig != undefined && myInstance.ChartConfig != null) {
            myInstance.Init();
        }
    }

    this.GetHtml = function () {
        var Html = '<div id = "' + ChartControlId + '" class = "horizon-swiper listViewChartclass"></div>';
        return Html;
    }

    this.Init = function () {
        GetData();
    }

    var GetData = function () {
        var args = {
            success: sucessFn,
            error: ErrorFn,
            sender: this
        };
        var myAjaxobj = new WiNAiMAjax();
        myAjaxobj.url = myInstance.ChartConfig.Url;
        myAjaxobj.webMethod = "post";
        myAjaxobj.async = myInstance.async;
        myAjaxobj.parameter = myInstance.ChartConfig.BaseFilterParam;
        myAjaxobj.contentType = 'application/json; charset=utf-8';
        myAjaxobj.dataType = 'json';
        myAjaxobj.execute(args);
    }

    var sucessFn = function (sender, response) {
        if (response == "Session Failure") {
            window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
            result = [];
            return false;
        }
        else {
            PlotEasyPie(response);
        }
    }

    var ErrorFn = function (sender, Request, textStatus, errorThrown) {
        ShowMessage(errorThrown, 4);
        removeLoadingPan(myInstance.ChartConfig.LodingDivId);
    }

    var PlotEasyPie = function (result) {
        var Chart = $('#' + ChartControlId);
        if (result != null && result != undefined && result.length > 0) {
            var pieHtml = '';
            var data = [];
            var pieControlId = '';
            var pieControlIds = [];

            var _EasyPieChart = new EasyPieChart();
            if (Chart.length > 0 && result != null && result != undefined && result.length > 0) {
                for (var itr = 0; itr < result.length; itr++) {
                    var colorInfo = null;
                    var pieColorCss = "txt-color-red";
                    var pieColorCode = "";
                    if (myInstance.ChartConfig.ColorInfoDct != undefined && myInstance.ChartConfig.ColorInfoDct != null) {
                        if (result[itr].xAxisId != undefined && result[itr].xAxisId != null && !isNaN(result[itr].xAxisId))
                            colorInfo = myInstance.ChartConfig.ColorInfoDct[result[itr].xAxisId];
                        else
                            colorInfo = myInstance.ChartConfig.ColorInfoDct[result[itr].xAxisValue];
                    }
                    for (var i = 0; i < myInstance.ChartConfig.MultiSeriesConfig.SeriesCount; i++) {
                        if (colorInfo != undefined && colorInfo != null) {
                            if (colorInfo.ColorCode != undefined && colorInfo.ColorCode != null && colorInfo.ColorCode != '') {
                                pieColorCode = "color : " + colorInfo.ColorCode;
                                pieColorCss = '';
                            }
                            else if (colorInfo.ColorCSS != undefined && colorInfo.ColorCSS != null && colorInfo.ColorCSS != '')
                                pieColorCss = colorInfo.ColorCSS;
                        }
                        else if (myInstance.ChartConfig.WidgetDataComparisonConfigList != null && myInstance.ChartConfig.WidgetDataComparisonConfigList != undefined &&
                            myInstance.ChartConfig.WidgetDataComparisonConfigList.length > 0) {
                            var ColorCss = myInstance.ChartConfig.WidgetDataComparisonConfigList[i].ColorCSS;
                            if (ColorCss != undefined && ColorCss != null && ColorCss != '') {
                                pieColorCss = ColorCss;
                            }
                            else {
                                pieColorCode = "color : " + myInstance.ChartConfig.WidgetDataComparisonConfigList[i].ColorCode;
                                pieColorCss = '';
                            }
                        }

                        pieHtml = '<div class="horizon-item"><div id="item_' + ChartControlId + (itr + 1) + i + '" xAxisId = "' +
                            result[itr].xAxisId + '" xAxisValue = "' + result[itr].xAxisValue + '"><div id="' + ChartControlId + (itr + 1) + i +
                            '" class="easy-pie-chart ' + pieColorCss + ' easyPieChart" style = "' + pieColorCode + '" data-percent="101" data-pie-size="160">' +
                            result[itr].yAxisValue[myInstance.ChartConfig.MultiSeriesConfig.yAxisValueKey[i]] +
                            '</div></div><h5 style = "font-weight:bold;"> ' + result[itr].xAxisValue + ' </h5></div>';
                        $(pieHtml).appendTo(Chart);
                        pieControlId = ChartControlId + (itr + 1) + i;
                        _EasyPieChart.InIt(pieControlId);

                        if (myInstance.ChartConfig.CurrentDisplayFormatConfig != undefined && myInstance.ChartConfig.CurrentDisplayFormatConfig != null &&
                            myInstance.ChartConfig.CurrentDisplayFormatConfig.DrillDownEnableStatus != undefined &&
                            myInstance.ChartConfig.CurrentDisplayFormatConfig.DrillDownEnableStatus != null) {
                            var _GetDrilDownDetails = new GetDrilDownDetails();
                            _GetDrilDownDetails.CustomGroupInfoLst = myInstance.ChartConfig.SummaryInfoLst;
                            _GetDrilDownDetails.CurrentDisplayFormatConfig = myInstance.ChartConfig.CurrentDisplayFormatConfig;
                            _GetDrilDownDetails.DrillDownDisplayFormatConfig = myInstance.ChartConfig.CurrentDisplayFormatConfig.DrillDownDisplayFormatConfig;
                            if (myInstance.ChartConfig.FilterParamControlConfig == null && myInstance.DashboardCommonFilter != null)
                                _GetDrilDownDetails.FilterParamControlConfig = myInstance.DashboardCommonFilter;
                                else
                                _GetDrilDownDetails.FilterParamControlConfig = myInstance.ChartConfig.FilterParamControlConfig;
                            
                            
                            _GetDrilDownDetails.ChartConfig = myInstance.ChartConfig;
                            _GetDrilDownDetails.ContentFrameId = "DrillDownViewContent";
                            $("#item_" + pieControlId).on('click', _GetDrilDownDetails.ClickWithOutParam);
                        }
                    }
                }
                $('#' + ChartControlId).horizonSwiper();
            }

            if (myInstance.ChartConfig.CurrentDisplayFormatConfig != undefined && myInstance.ChartConfig.CurrentDisplayFormatConfig != null &&
                myInstance.ChartConfig.CurrentDisplayFormatConfig.IsDetailViewEnabled != undefined && myInstance.ChartConfig.CurrentDisplayFormatConfig.IsDetailViewEnabled != null &&
                myInstance.ChartConfig.CurrentDisplayFormatConfig.IsDetailViewEnabled) {
                if (myInstance.ChartConfig.CurrentDisplayFormatConfig.DetailViewConfig != undefined && myInstance.ChartConfig.CurrentDisplayFormatConfig.DetailViewConfig != null) {
                    var _GetDetailViewForWidget = new GetDetailViewForWidget();
                    _GetDetailViewForWidget.ParentControlId = myInstance.LodingDivId;
                    _GetDetailViewForWidget.DetailViewConfig = myInstance.ChartConfig.CurrentDisplayFormatConfig.DetailViewConfig;
                    _GetDetailViewForWidget.Load(result);
                }
            }
        }
        else {
            Chart.html('<div class="norecordsfound">No records available</div>');
        }
        removeLoadingPan(myInstance.ChartConfig.LodingDivId);
    }
}

function LoadListViewBoxChart() {
    this.ControlId = '';
    this.ChartConfig = null;
    var ChartControlId = '';
    var myInstance = this;
    this.Load = function () {
        ChartControlId = 'Chart_' + myInstance.ControlId;
        var Html = myInstance.GetHtml();
        var _AppendOrSetHtml = new AppendOrSetHtml();
        _AppendOrSetHtml.ControlId = myInstance.ControlId;
        _AppendOrSetHtml.Html = Html;
        _AppendOrSetHtml.SetHtml();

        if (myInstance.ChartConfig != undefined && myInstance.ChartConfig != null) {
            myInstance.Init();
        }
    }

    this.GetHtml = function () {
        var Html = '<div id = "' + ChartControlId + '" class = "scroll-content scrollable list-group txt-caps listViewChartclass"><div class="collection no-margin"></div></div>';
        return Html;
    }

    this.Init = function () {
        GetData();
    }

    var GetData = function () {
        var args = {
            success: sucessFn,
            error: ErrorFn,
            sender: this
        };
        var myAjaxobj = new WiNAiMAjax();
        myAjaxobj.url = myInstance.ChartConfig.Url;
        myAjaxobj.webMethod = "post";
        myAjaxobj.async = true;
        myAjaxobj.parameter = myInstance.ChartConfig.BaseFilterParam;
        myAjaxobj.contentType = 'application/json; charset=utf-8';
        myAjaxobj.dataType = 'json';
        myAjaxobj.execute(args);
    }

    var sucessFn = function (sender, response) {
        if (response == "Session Failure") {
            window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
            result = [];
            return false;
        }
        else {
            PlotEasyPie(response);
        }
    }

    var ErrorFn = function (sender, Request, textStatus, errorThrown) {
        ShowMessage(errorThrown, 4);
        removeLoadingPan(myInstance.ChartConfig.LodingDivId);
    }

    var PlotEasyPie = function (result) {
        var Chart = $('#' + ChartControlId);
        if (result != null && result != undefined && result.length > 0) {
            var pieHtml = '';
            var data = [];
            var pieControlId = '';
            var pieControlIds = [];

            if (Chart.length > 0 && result != null && result != undefined && result.length > 0) {
                for (var itr = 0; itr < result.length; itr++) {
                    if (myInstance.ChartConfig.IsSingleSeries) {
                        pieHtml = '<a href="javascript:void(0);" class="collection-item" id="item_' + ChartControlId + (itr + 1) + i + '" xAxisId = "' +
                            result[itr].xAxisId + '" xAxisValue = "' + result[itr].xAxisValue + '">' + result[itr].xAxisValue +
                            '<span class="badge light-blue-text text-darken-3" style="width:' +
                            (result[itr].yAxisValue != undefined && result[itr].yAxisValue != null && result[itr].yAxisValue.toString().length > 4 ? "50px" : "40px") + ';">' +
                            result[itr].yAxisValue + '</span>' +
                            '</a>';
                        $(pieHtml).appendTo(Chart.find('.collection'));
                        pieControlId = ChartControlId + (itr + 1) + i;

                        if (myInstance.ChartConfig.CurrentDisplayFormatConfig != undefined && myInstance.ChartConfig.CurrentDisplayFormatConfig != null &&
                            myInstance.ChartConfig.CurrentDisplayFormatConfig.DrillDownEnableStatus != undefined &&
                            myInstance.ChartConfig.CurrentDisplayFormatConfig.DrillDownEnableStatus != null) {
                            var _GetDrilDownDetails = new GetDrilDownDetails();
                            _GetDrilDownDetails.CustomGroupInfoLst = myInstance.ChartConfig.SummaryInfoLst;
                            _GetDrilDownDetails.CurrentDisplayFormatConfig = myInstance.ChartConfig.CurrentDisplayFormatConfig;
                            _GetDrilDownDetails.DrillDownDisplayFormatConfig = myInstance.ChartConfig.CurrentDisplayFormatConfig.DrillDownDisplayFormatConfig;
                            _GetDrilDownDetails.FilterParamControlConfig = myInstance.ChartConfig.FilterParamControlConfig;
                            _GetDrilDownDetails.ChartConfig = myInstance.ChartConfig;
                            _GetDrilDownDetails.ContentFrameId = "DrillDownViewContent";
                            $("#item_" + pieControlId).on('click', _GetDrilDownDetails.ClickWithOutParam);
                        }
                    }
                    else {
                        for (var i = 0; i < myInstance.ChartConfig.MultiSeriesConfig.SeriesCount; i++) {
                            pieHtml = '<a href="javascript:void(0);" class="collection-item" id="item_' + ChartControlId + (itr + 1) + i + '" xAxisId = "' +
                                result[itr].xAxisId + '" xAxisValue = "' + result[itr].xAxisValue + '">' + result[itr].xAxisValue +
                                '<span class="badge light-blue-text text-darken-3" style="width:40px;">' +
                                result[itr].yAxisValue[myInstance.ChartConfig.MultiSeriesConfig.yAxisValueKey[i]] + '</span>' +
                                '</a>';
                            $(pieHtml).appendTo(Chart.find('.collection'));
                            pieControlId = ChartControlId + (itr + 1) + i;

                            if (myInstance.ChartConfig.CurrentDisplayFormatConfig != undefined && myInstance.ChartConfig.CurrentDisplayFormatConfig != null &&
                                myInstance.ChartConfig.CurrentDisplayFormatConfig.DrillDownEnableStatus != undefined &&
                                myInstance.ChartConfig.CurrentDisplayFormatConfig.DrillDownEnableStatus != null) {
                                var _GetDrilDownDetails = new GetDrilDownDetails();
                                _GetDrilDownDetails.CustomGroupInfoLst = myInstance.ChartConfig.SummaryInfoLst;
                                _GetDrilDownDetails.CurrentDisplayFormatConfig = myInstance.ChartConfig.CurrentDisplayFormatConfig;
                                _GetDrilDownDetails.DrillDownDisplayFormatConfig = myInstance.ChartConfig.CurrentDisplayFormatConfig.DrillDownDisplayFormatConfig;
                                _GetDrilDownDetails.FilterParamControlConfig = myInstance.ChartConfig.FilterParamControlConfig;
                                _GetDrilDownDetails.ChartConfig = myInstance.ChartConfig;
                                _GetDrilDownDetails.ContentFrameId = "DrillDownViewContent";
                                $("#item_" + pieControlId).on('click', _GetDrilDownDetails.ClickWithOutParam);
                            }
                        }
                    }
                }

                Chart.niceScroll({ cursorcolor: "#00F", horizrailenabled: false });
                Chart.getNiceScroll().resize();
            }

            if (myInstance.ChartConfig.CurrentDisplayFormatConfig != undefined && myInstance.ChartConfig.CurrentDisplayFormatConfig != null &&
                myInstance.ChartConfig.CurrentDisplayFormatConfig.IsDetailViewEnabled != undefined && myInstance.ChartConfig.CurrentDisplayFormatConfig.IsDetailViewEnabled != null &&
                myInstance.ChartConfig.CurrentDisplayFormatConfig.IsDetailViewEnabled) {
                if (myInstance.ChartConfig.CurrentDisplayFormatConfig.DetailViewConfig != undefined && myInstance.ChartConfig.CurrentDisplayFormatConfig.DetailViewConfig != null) {
                    var _GetDetailViewForWidget = new GetDetailViewForWidget();
                    _GetDetailViewForWidget.ParentControlId = myInstance.LodingDivId;
                    _GetDetailViewForWidget.DetailViewConfig = myInstance.ChartConfig.CurrentDisplayFormatConfig.DetailViewConfig;
                    _GetDetailViewForWidget.Load(result);
                }
            }
        }
        else {
            Chart.html('<div class="norecordsfound">No records available</div>');
        }
        removeLoadingPan(myInstance.ChartConfig.LodingDivId);
    }
}

function EasyPieChart() {
    var myInstance = this;
    this.InIt = function (divId) {
        var $this = $("#" + divId);
        var barColor = $this.css('color') || $this.data('pie-color'), trackColor = $this.data('pie-track-color') || '#eeeeee', size = parseInt($this.data('pie-size')) || 25;
        $this.easyPieChart({
            barColor: barColor,
            trackColor: trackColor,
            scaleColor: false,
            lineCap: 'butt',
            lineWidth: parseInt(size / 8.5),
            animate: 1500,
            rotate: -90,
            size: size,
            onStep: function (value) {
                this.$el.find('span').text(~~value);
            }
        });
    }
    this.InItWithlineWidth = function (divId, lineWidth) {
        var $this = $("#" + divId);
        var barColor = $this.css('color') || $this.data('pie-color'), trackColor = $this.data('pie-track-color') || '#eeeeee', size = parseInt($this.data('pie-size')) || 25;
        $this.easyPieChart({
            barColor: barColor,
            trackColor: trackColor,
            scaleColor: false,
            lineCap: 'butt',
            lineWidth: parseInt(size / lineWidth),
            animate: 1500,
            rotate: -90,
            size: size,
            onStep: function (value) {
                this.$el.find('span').text(~~value);
            }
        });
    }

    this.InitByDom = function (divDom) {
        var $this = $(divDom);
        var barColor = $this.css('color') || $this.data('pie-color'), trackColor = $this.data('pie-track-color') || '#eeeeee', size = parseInt($this.data('pie-size')) || 25;
        $this.easyPieChart({
            barColor: barColor,
            trackColor: trackColor,
            scaleColor: false,
            lineCap: 'butt',
            lineWidth: parseInt(size / 8.5),
            animate: 1500,
            rotate: -90,
            size: size,
            onStep: function (value) {
                this.$el.find('span').text(~~value);
            }
        });
    }
}

function SparklineChartInit() {
    var myInstance = this;

    this.InIt = function (divId) {
        var $this = typeof (divId) == 'string' ? $("#" + divId) : $(divId);
        var sparklineType = $this.data('sparkline-type') || 'bar';

        // BAR CHART
        if (sparklineType == 'bar') {

            var barColor = $this.data('sparkline-bar-color') || $this.css('color') || '#0000f0', sparklineHeight = $this.data('sparkline-height') || '26px', sparklineBarWidth = $this.data('sparkline-barwidth') || 5, sparklineBarSpacing = $this.data('sparkline-barspacing') || 2, sparklineNegBarColor = $this.data('sparkline-negbar-color') || '#A90329', sparklineStackedColor = $this.data('sparkline-barstacked-color') || ["#A90329", "#0099c6", "#98AA56", "#da532c", "#4490B1", "#6E9461", "#990099", "#B4CAD3"];

            $this.sparkline('html', {
                type: 'bar',
                barColor: barColor,
                type: sparklineType,
                height: sparklineHeight,
                barWidth: sparklineBarWidth,
                barSpacing: sparklineBarSpacing,
                stackedBarColor: sparklineStackedColor,
                negBarColor: sparklineNegBarColor,
                zeroAxis: 'false'
            });

        }

        //LINE CHART
        if (sparklineType == 'line') {

            var sparklineHeight = $this.data('sparkline-height') || '20px', sparklineWidth = $this.data('sparkline-width') || '90px', thisLineColor = $this.data('sparkline-line-color') || $this.css('color') || '#0000f0', thisLineWidth = $this.data('sparkline-line-width') || 1, thisFill = $this.data('fill-color') || '#c0d0f0', thisSpotColor = $this.data('sparkline-spot-color') || '#f08000', thisMinSpotColor = $this.data('sparkline-minspot-color') || '#ed1c24', thisMaxSpotColor = $this.data('sparkline-maxspot-color') || '#f08000', thishighlightSpotColor = $this.data('sparkline-highlightspot-color') || '#50f050', thisHighlightLineColor = $this.data('sparkline-highlightline-color') || 'f02020', thisSpotRadius = $this.data('sparkline-spotradius') || 1.5;
            thisChartMinYRange = $this.data('sparkline-min-y') || 'undefined', thisChartMaxYRange = $this.data('sparkline-max-y') || 'undefined', thisChartMinXRange = $this.data('sparkline-min-x') || 'undefined', thisChartMaxXRange = $this.data('sparkline-max-x') || 'undefined', thisMinNormValue = $this.data('min-val') || 'undefined', thisMaxNormValue = $this.data('max-val') || 'undefined', thisNormColor = $this.data('norm-color') || '#c0c0c0', thisDrawNormalOnTop = $this.data('draw-normal') || false;

            $this.sparkline('html', {
                type: 'line',
                width: sparklineWidth,
                height: sparklineHeight,
                lineWidth: thisLineWidth,
                lineColor: thisLineColor,
                fillColor: thisFill,
                spotColor: thisSpotColor,
                minSpotColor: thisMinSpotColor,
                maxSpotColor: thisMaxSpotColor,
                highlightSpotColor: thishighlightSpotColor,
                highlightLineColor: thisHighlightLineColor,
                spotRadius: thisSpotRadius,
                chartRangeMin: thisChartMinYRange,
                chartRangeMax: thisChartMaxYRange,
                chartRangeMinX: thisChartMinXRange,
                chartRangeMaxX: thisChartMaxXRange,
                normalRangeMin: thisMinNormValue,
                normalRangeMax: thisMaxNormValue,
                normalRangeColor: thisNormColor,
                drawNormalOnTop: thisDrawNormalOnTop

            });

        }

        //PIE CHART
        if (sparklineType == 'pie') {

            var pieColors = $this.data('sparkline-piecolor') || ["#B4CAD3", "#4490B1", "#98AA56", "#da532c", "#6E9461", "#0099c6", "#990099", "#717D8A"], pieWidthHeight = $this.data('sparkline-piesize') || 90, pieBorderColor = $this.data('border-color') || '#45494C', pieOffset = $this.data('sparkline-offset') || 0;

            $this.sparkline('html', {
                type: 'pie',
                width: pieWidthHeight,
                height: pieWidthHeight,
                tooltipFormat: '<span style="color: {{color}}">&#9679;</span> ({{percent.1}}%)',
                sliceColors: pieColors,
                offset: 0,
                borderWidth: 1,
                offset: pieOffset,
                borderColor: pieBorderColor
            });

        }

        //BOX PLOT
        if (sparklineType == 'box') {

            var thisBoxWidth = $this.data('sparkline-width') || 'auto', thisBoxHeight = $this.data('sparkline-height') || 'auto', thisBoxRaw = $this.data('sparkline-boxraw') || false, thisBoxTarget = $this.data('sparkline-targetval') || 'undefined', thisBoxMin = $this.data('sparkline-min') || 'undefined', thisBoxMax = $this.data('sparkline-max') || 'undefined', thisShowOutlier = $this.data('sparkline-showoutlier') || true, thisIQR = $this.data('sparkline-outlier-iqr') || 1.5, thisBoxSpotRadius = $this.data('sparkline-spotradius') || 1.5, thisBoxLineColor = $this.css('color') || '#000000', thisBoxFillColor = $this.data('fill-color') || '#c0d0f0', thisBoxWhisColor = $this.data('sparkline-whis-color') || '#000000', thisBoxOutlineColor = $this.data('sparkline-outline-color') || '#303030', thisBoxOutlineFill = $this.data('sparkline-outlinefill-color') || '#f0f0f0', thisBoxMedianColor = $this.data('sparkline-outlinemedian-color') || '#f00000', thisBoxTargetColor = $this.data('sparkline-outlinetarget-color') || '#40a020';

            $this.sparkline('html', {
                type: 'box',
                width: thisBoxWidth,
                height: thisBoxHeight,
                raw: thisBoxRaw,
                target: thisBoxTarget,
                minValue: thisBoxMin,
                maxValue: thisBoxMax,
                showOutliers: thisShowOutlier,
                outlierIQR: thisIQR,
                spotRadius: thisBoxSpotRadius,
                boxLineColor: thisBoxLineColor,
                boxFillColor: thisBoxFillColor,
                whiskerColor: thisBoxWhisColor,
                outlierLineColor: thisBoxOutlineColor,
                outlierFillColor: thisBoxOutlineFill,
                medianColor: thisBoxMedianColor,
                targetColor: thisBoxTargetColor

            })

        }

        //BULLET
        if (sparklineType == 'bullet') {

            var thisBulletHeight = $this.data('sparkline-height') || 'auto', thisBulletWidth = $this.data('sparkline-width') || 2, thisBulletColor = $this.data('sparkline-bullet-color') || '#ed1c24', thisBulletPerformanceColor = $this.data('sparkline-performance-color') || '#3030f0', thisBulletRangeColors = $this.data('sparkline-bulletrange-color') || ["#d3dafe", "#a8b6ff", "#7f94ff"]

            $this.sparkline('html', {

                type: 'bullet',
                height: thisBulletHeight,
                targetWidth: thisBulletWidth,
                targetColor: thisBulletColor,
                performanceColor: thisBulletPerformanceColor,
                rangeColors: thisBulletRangeColors

            })

        }

        //DISCRETE
        if (sparklineType == 'discrete') {

            var thisDiscreteHeight = $this.data('sparkline-height') || 26, thisDiscreteWidth = $this.data('sparkline-width') || 50, thisDiscreteLineColor = $this.css('color'), thisDiscreteLineHeight = $this.data('sparkline-line-height') || 5, thisDiscreteThrushold = $this.data('sparkline-threshold') || 'undefined', thisDiscreteThrusholdColor = $this.data('sparkline-threshold-color') || '#ed1c24';

            $this.sparkline('html', {

                type: 'discrete',
                width: thisDiscreteWidth,
                height: thisDiscreteHeight,
                lineColor: thisDiscreteLineColor,
                lineHeight: thisDiscreteLineHeight,
                thresholdValue: thisDiscreteThrushold,
                thresholdColor: thisDiscreteThrusholdColor

            })

        }

        //TRISTATE
        if (sparklineType == 'tristate') {

            var thisTristateHeight = $this.data('sparkline-height') || 26, thisTristatePosBarColor = $this.data('sparkline-posbar-color') || '#60f060', thisTristateNegBarColor = $this.data('sparkline-negbar-color') || '#f04040', thisTristateZeroBarColor = $this.data('sparkline-zerobar-color') || '#909090', thisTristateBarWidth = $this.data('sparkline-barwidth') || 5, thisTristateBarSpacing = $this.data('sparkline-barspacing') || 2, thisZeroAxis = $this.data('sparkline-zeroaxis') || false;

            $this.sparkline('html', {

                type: 'tristate',
                height: thisTristateHeight,
                posBarColor: thisBarColor,
                negBarColor: thisTristateNegBarColor,
                zeroBarColor: thisTristateZeroBarColor,
                barWidth: thisTristateBarWidth,
                barSpacing: thisTristateBarSpacing,
                zeroAxis: thisZeroAxis

            })

        }

        //COMPOSITE: BAR
        if (sparklineType == 'compositebar') {

            var sparklineHeight = $this.data('sparkline-height') || '20px', sparklineWidth = $this.data('sparkline-width') || '100%', sparklineBarWidth = $this.data('sparkline-barwidth') || 3, thisLineWidth = $this.data('sparkline-line-width') || 1, thisLineColor = $this.data('sparkline-color-top') || '#ed1c24', thisBarColor = $this.data('sparkline-color-bottom') || '#333333'

            $this.sparkline($this.data('sparkline-bar-val'), {

                type: 'bar',
                width: sparklineWidth,
                height: sparklineHeight,
                barColor: thisBarColor,
                barWidth: sparklineBarWidth
                //barSpacing: 5

            })

            $this.sparkline($this.data('sparkline-line-val'), {

                width: sparklineWidth,
                height: sparklineHeight,
                lineColor: thisLineColor,
                lineWidth: thisLineWidth,
                composite: true,
                fillColor: false

            })

        }

        //COMPOSITE: LINE
        if (sparklineType == 'compositeline') {

            var sparklineHeight = $this.data('sparkline-height') || '20px', sparklineWidth = $this.data('sparkline-width') || '90px', sparklineValue = $this.data('sparkline-bar-val'), sparklineValueSpots1 = $this.data('sparkline-bar-val-spots-top') || null, sparklineValueSpots2 = $this.data('sparkline-bar-val-spots-bottom') || null, thisLineWidth1 = $this.data('sparkline-line-width-top') || 1, thisLineWidth2 = $this.data('sparkline-line-width-bottom') || 1, thisLineColor1 = $this.data('sparkline-color-top') || '#333333', thisLineColor2 = $this.data('sparkline-color-bottom') || '#ed1c24', thisSpotRadius1 = $this.data('sparkline-spotradius-top') || 1.5, thisSpotRadius2 = $this.data('sparkline-spotradius-bottom') || thisSpotRadius1, thisSpotColor = $this.data('sparkline-spot-color') || '#f08000', thisMinSpotColor1 = $this.data('sparkline-minspot-color-top') || '#ed1c24', thisMaxSpotColor1 = $this.data('sparkline-maxspot-color-top') || '#f08000', thisMinSpotColor2 = $this.data('sparkline-minspot-color-bottom') || thisMinSpotColor1, thisMaxSpotColor2 = $this.data('sparkline-maxspot-color-bottom') || thisMaxSpotColor1, thishighlightSpotColor1 = $this.data('sparkline-highlightspot-color-top') || '#50f050', thisHighlightLineColor1 = $this.data('sparkline-highlightline-color-top') || '#f02020', thishighlightSpotColor2 = $this.data('sparkline-highlightspot-color-bottom') || thishighlightSpotColor1, thisHighlightLineColor2 = $this.data('sparkline-highlightline-color-bottom') || thisHighlightLineColor1, thisFillColor1 = $this.data('sparkline-fillcolor-top') || 'transparent', thisFillColor2 = $this.data('sparkline-fillcolor-bottom') || 'transparent';

            $this.sparkline(sparklineValue, {

                type: 'line',
                spotRadius: thisSpotRadius1,

                spotColor: thisSpotColor,
                minSpotColor: thisMinSpotColor1,
                maxSpotColor: thisMaxSpotColor1,
                highlightSpotColor: thishighlightSpotColor1,
                highlightLineColor: thisHighlightLineColor1,

                valueSpots: sparklineValueSpots1,

                lineWidth: thisLineWidth1,
                width: sparklineWidth,
                height: sparklineHeight,
                lineColor: thisLineColor1,
                fillColor: thisFillColor1

            })

            $this.sparkline($this.data('sparkline-line-val'), {

                type: 'line',
                spotRadius: thisSpotRadius2,

                spotColor: thisSpotColor,
                minSpotColor: thisMinSpotColor2,
                maxSpotColor: thisMaxSpotColor2,
                highlightSpotColor: thishighlightSpotColor2,
                highlightLineColor: thisHighlightLineColor2,

                valueSpots: sparklineValueSpots2,

                lineWidth: thisLineWidth2,
                width: sparklineWidth,
                height: sparklineHeight,
                lineColor: thisLineColor2,
                composite: true,
                fillColor: thisFillColor2

            })
        }
    }
}

/* For sorting the array */
var OneViewArraySorting = function (field, reverse, primer) {
    var key = primer ?
        function (x) { return primer(x[field]) } :
        function (x) { return x[field] };

    reverse = [-1, 1][+!!reverse];

    return function (a, b) {
        return a = key(a), b = key(b), reverse * ((a > b) - (b > a));
    }
}

function AppendOrSetHtml() {
    this.ControlId = '';
    this.Html = '';
    var myInstance = this;
    this.AppendHtml = function () {
        if (myInstance.ControlId != undefined && myInstance.ControlId != null && myInstance.ControlId != '') {
            var Control = document.getElementById(myInstance.ControlId);
            if (Control != undefined && Control != null) {
                $(Control).append(myInstance.Html);
            }
        }
    }

    this.AppendToHtml = function () {
        if (myInstance.ControlId != undefined && myInstance.ControlId != null && myInstance.ControlId != '') {
            var Control = document.getElementById(myInstance.ControlId);
            if (Control != undefined && Control != null) {
                $(myInstance.Html).appendTo($(Control));
            }
        }
    }

    this.SetHtml = function () {
        if (myInstance.ControlId != undefined && myInstance.ControlId != null && myInstance.ControlId != '') {
            var Control = document.getElementById(myInstance.ControlId);
            if (Control != undefined && Control != null) {
                $(Control).html(myInstance.Html);
            }
        }
    }
}

function StaticDataSourceConfig() {
    var myInstance = this;
    this.DynamicFormDataSourceConfig = null;

    this.Load = function () {
        var SessionKeyName = '';
        if (myInstance.DynamicFormDataSourceConfig != undefined && myInstance.DynamicFormDataSourceConfig != null)
            SessionKeyName = myInstance.DynamicFormDataSourceConfig.JavaScriptSessionKey;
        var value = window.localStorage.getItem(SessionKeyName);
        var result = (value != undefined && value != null && value != '' ? JSON.parse(window.localStorage.getItem(SessionKeyName)) : null);
        return (result != undefined && result != null && result != '' ? result : []);
    }
}

function GetWebConfigValue() {
    var myInstance = this;

    this.Get = function (Key) {
        return Ajaxcall(JSON.stringify({ "Key": Key }), "/Home/GetWebConfigValue");
    }

    var Ajaxcall = function (param, Url) {
        var myAjaxobj = new WiNAiMAjax();
        myAjaxobj.url = GetRelativeUrl(Url);
        myAjaxobj.webMethod = "post";
        myAjaxobj.async = false;
        myAjaxobj.contentType = 'application/json; charset=utf-8';
        myAjaxobj.dataType = 'json';
        myAjaxobj.parameter = param;
        var result = myAjaxobj.execute();
        return result;
    }
}

/* <======= OneView Common Component and Methods. Added by Devaraj.S on 25-01-2016 23:09. =======> End. */

/* Master Page Methods. Start */

function SessionUpdation() {
    var myInstance = this;
    this.SetSessionValue = function (Key, Value) {
        Ajaxcall(JSON.stringify({ "Key": Key, "Value": Value }), "/Login/SetSessionValue");
    }

    this.ClearSessionValue = function (Key) {
        Ajaxcall(JSON.stringify({ "Key": Key }), "/Login/ClearSessionValue");
    }

    this.ClearMultipleSessionKey = function (KeyLst) {
        Ajaxcall(JSON.stringify({ "KeyLst": JSON.stringify(KeyLst) }), "/Login/ClearMultipleSessionKey");
    }

    this.GetSessionValue = function (Key) {
        var result = Ajaxcall(JSON.stringify({ "Key": Key }), "/Login/GetSessionValue");
        return result;
    }

    var Ajaxcall = function (param, Url) {
        var myAjaxobj = new WiNAiMAjax();
        myAjaxobj.url = GetRelativeUrl(Url);
        myAjaxobj.webMethod = "post";
        myAjaxobj.async = false;
        myAjaxobj.contentType = 'application/json; charset=utf-8';
        myAjaxobj.dataType = 'json';
        myAjaxobj.parameter = param;
        var result = myAjaxobj.execute();
        return result;
    }
}

/* Master Page Methods. End */

/* Added by Harshil on 15-03-2016, 
    Modified By Devaraj S on 16-03-2016,
    Modified By Devaraj S on 17-03-2016 11:18 */

/* UpdateAsyncReportGenerationStatus_timerID Start */

var UpdateAsyncReportGenerationStatus_timerID = "";
var UpdateAsyncReportGenerationNotificationBar_timerID = "";
var IncreaseTimer = 0;
var MaxCountToResetTimer = 5;
var timmer = 5 * 1000;

function Start_UpdateAsyncReportGenerationStatusTimer() {
    if (UpdateAsyncReportGenerationStatus_timerID == "") {
        UpdateAsyncReportGenerationStatus_timerID = setInterval(function () {
            UpdateAsyncReportGenerationStatus();
        }, 5 * 1000);
    }
}

function Clear_UpdateAsyncReportGenerationStatusTimer() {
    clearInterval(UpdateAsyncReportGenerationStatus_timerID);
    UpdateAsyncReportGenerationStatus_timerID = "";
}

function Start_UpdateAsyncReportGenerationNotificationBarTimer() {
    if (UpdateAsyncReportGenerationNotificationBar_timerID == "") {
        UpdateAsyncReportGenerationNotificationBar_timerID = setInterval(function () {
            if (IncreaseTimer >= MaxCountToResetTimer && timmer <= (60 * 1000)) {
                IncreaseTimer = 0;
                timmer += timmer;
                clearInterval(UpdateAsyncReportGenerationNotificationBar_timerID);
                UpdateAsyncReportGenerationNotificationBar_timerID = "";
                Start_UpdateAsyncReportGenerationNotificationBarTimer();
            }
            else
                IncreaseTimer += 1;
            UpdateAsyncReportGenerationNotificationBar();
        }, timmer);
    }
}

function Clear_UpdateAsyncReportGenerationNotificationBarTimer() {
    clearInterval(UpdateAsyncReportGenerationNotificationBar_timerID);
    UpdateAsyncReportGenerationNotificationBar_timerID = "";
}

/* TODO:Notifcation bar need to populate fron systemNotification pool,
For EKFC async report release we enable this,need to change the code */
function UpdateAsyncReportGenerationNotificationBar() {
    try {
        var myAjaxobj = new WiNAiMAjax();
        myAjaxobj.url = GetRelativeUrl("/Report/GetTopAsyncReportGenerationStatus/");
        myAjaxobj.webMethod = "post";
        myAjaxobj.async = true;
        myAjaxobj.contentType = 'application/json; charset=utf-8';
        myAjaxobj.dataType = 'json';
        myAjaxobj.parameter = JSON.stringify({ "ReqAsyncJobStatusCount": "5" });

        var callBackparm = {
            success: UpdateAsyncReportGenerationNotificationBar_SuccessCallBack,
            error: UpdateAsyncReportGenerationNotificationBar_ErrorCallBack,
            sender: this
        }
        myAjaxobj.execute(callBackparm);
    } catch (e) {
        console.log('UpdateAsyncReportGenerationNotificationBar, Exception : ' + JSON.stringify(e));
    }
}

function UpdateAsyncReportGenerationNotificationBar_SuccessCallBack(response, PortalAsyncCallStatus) {
    $('#Notification_Badge').html(0);
    $('#NotificationArea').html('');
    Start_UpdateAsyncReportGenerationNotificationBarTimer();
    if (PortalAsyncCallStatus != undefined && PortalAsyncCallStatus != null && PortalAsyncCallStatus.length > 0) {
        $('#Notification_Badge').html(PortalAsyncCallStatus.length);
        var finalHtml = '';
        var Href = '';
        var AsyncCallStatusCount = 0;
        for (var itr = 0; itr < PortalAsyncCallStatus.length; itr++) {
            var Href = '';
            var oPortalAsyncCallStatus = PortalAsyncCallStatus[itr];
            finalHtml += '<li>' + 
                '<span class="padding-10 unread"><em class="badge padding-5 no-border-radius bg-color-purple txt-color-white pull-left margin-right-5">' +
                        '<i class="fa fa-table fa-fw fa-2x"></i>' +
                    '</em> <span>';

            if (oPortalAsyncCallStatus.FilePaths != undefined && oPortalAsyncCallStatus.FilePaths != null && oPortalAsyncCallStatus.FilePaths.length > 0) {
                for (var jtr = 0; jtr < oPortalAsyncCallStatus.FilePaths.length; jtr++) {
                    Href = oPortalAsyncCallStatus.FilePaths[jtr];
                }
            }
            if (oPortalAsyncCallStatus.JobDisplayName != undefined && oPortalAsyncCallStatus.JobDisplayName != null && oPortalAsyncCallStatus.JobDisplayName != '') {
                finalHtml += '<a href="' + (Href == '' ? "javascript:void(0);" : Href) + '" class="display-normal" target = "_blank"></a> ' +
                    oPortalAsyncCallStatus.JobDisplayName + ' <br>';
            }
            if (oPortalAsyncCallStatus.IsCompleted != undefined && oPortalAsyncCallStatus.IsCompleted != null && oPortalAsyncCallStatus.IsCompleted) {
                finalHtml += 'Status : <strong>' + (oPortalAsyncCallStatus.ProgressMessage != undefined && oPortalAsyncCallStatus.ProgressMessage != null && oPortalAsyncCallStatus.ProgressMessage != '' ? oPortalAsyncCallStatus.ProgressMessage : "Report Available to Download.") + '</strong>';
                AsyncCallStatusCount += 1;
            }
            else if (oPortalAsyncCallStatus.IsAnyException != undefined && oPortalAsyncCallStatus.IsAnyException != null && oPortalAsyncCallStatus.IsAnyException) {
                finalHtml += 'Status : <strong>' + oPortalAsyncCallStatus.ErrorCode + '</strong>';
                AsyncCallStatusCount += 1;
            }
            else if (oPortalAsyncCallStatus.IsStarted != undefined && oPortalAsyncCallStatus.IsStarted != null && oPortalAsyncCallStatus.IsStarted)
                finalHtml += 'Status : <strong>' + (oPortalAsyncCallStatus.ProgressMessage != undefined && oPortalAsyncCallStatus.ProgressMessage != null && oPortalAsyncCallStatus.ProgressMessage != '' ? oPortalAsyncCallStatus.ProgressMessage : "Download Initiated.") + '</strong>';
            //if (oprtaasy.startdate == '') {
            //    finalHtml += '<strong>When: 1/3/2014 (1pm - 2pm)</strong><br>';
            //}
            if (Href != '') {
                finalHtml += '<a class="btn btn-xs btn-primary margin-top-5 pull-right" href = "' + (Href == '' ? "javascript:void(0);" : Href) +
                    '" target = "_blank">Download</a></span></span></li>';
            }
        }
        if (AsyncCallStatusCount == PortalAsyncCallStatus.length)
            Clear_UpdateAsyncReportGenerationNotificationBarTimer();
        $('#NotificationArea').html(finalHtml);
    }
    else
        Clear_UpdateAsyncReportGenerationNotificationBarTimer();
}

function UpdateAsyncReportGenerationNotificationBar_ErrorCallBack(sender, Request, textStatus, errorThrown) {
    $('#Notification_Badge').html(0);
    $('#NotificationArea').html('');
    Clear_UpdateAsyncReportGenerationNotificationBarTimer();
    console.log('UpdateAsyncReportGenerationNotificationBar, Exception : ' + textStatus);
}

function UpdateAsyncReportGenerationStatus() {
    try {
        var myAjaxobj = new WiNAiMAjax();
        myAjaxobj.url = GetRelativeUrl("/Report/GetLastAsyncReportGenerationStatus/");
        myAjaxobj.webMethod = "post";
        myAjaxobj.async = true;
        myAjaxobj.contentType = 'application/json; charset=utf-8';
        myAjaxobj.dataType = 'json';
      //  var PortalAsyncCallStatus = myAjaxobj.execute();

        var callBackparm = {
            success: UpdateAsyncReportGenerationStatus_SuccessCallBack,
            error: UpdateAsyncReportGenerationStatus_ErrorCallBack,
            sender: this
        }
        myAjaxobj.execute(callBackparm);
    }
    catch (e) {
        console.log('UpdateAsyncReportGenerationStatus,  Exception :' + JSON.stringify(e));
    }
}

function UpdateAsyncReportGenerationStatus_ErrorCallBack(sender, Request, textStatus, errorThrown) {
    console.log('Error ajax call : ' + textStatus);
    Clear_UpdateAsyncReportGenerationStatusTimer();
}

function UpdateAsyncReportGenerationStatus_SuccessCallBack(response, PortalAsyncCallStatus) {
    try {
        var oAsyncReportGenLink = document.getElementById('AsyncReportGenLink');
        if (oAsyncReportGenLink != undefined && oAsyncReportGenLink != null) {
            if (PortalAsyncCallStatus != null) {
                if (PortalAsyncCallStatus.IsCompleted == true) {
                    $(oAsyncReportGenLink).removeClass('hide');
                    oAsyncReportGenLink.setAttribute('href', PortalAsyncCallStatus.FilePaths[0]);
                    document.getElementById('AsyncReportGenStatus').innerHTML = PortalAsyncCallStatus.ProgressMessage;
                    Clear_UpdateAsyncReportGenerationStatusTimer();
                }
                else if (PortalAsyncCallStatus.IsAnyException == false) {
                    $(oAsyncReportGenLink).removeClass('hide');
                    oAsyncReportGenLink.setAttribute('href', "javascript:void(0)");
                    document.getElementById('AsyncReportGenStatus').innerHTML = PortalAsyncCallStatus.ProgressMessage;
                    Start_UpdateAsyncReportGenerationStatusTimer();
                }
                else if (PortalAsyncCallStatus.IsAnyException == true) {
                    $(oAsyncReportGenLink).removeClass('hide');
                    oAsyncReportGenLink.setAttribute('href', "javascript:void(0)");
                    document.getElementById('AsyncReportGenStatus').innerHTML = PortalAsyncCallStatus.ErrorCode;
                    Clear_UpdateAsyncReportGenerationStatusTimer();
                }
            }
        }
        else
            console.log('AsyncReportGenLink is undefined.');
    }
    catch (e) {
        console.log('UpdateAsyncReportGenerationStatus Exception' + JSON.stringify(e));
    }
}

/* Added by Neetha on 18-06-2016. For Image Upload. */

function ImageUploadClickEvent(input) {
    input.value = null;
    $(input).replaceWith($(input).val('').clone(true));
};

function Show(input) {
    var imgPath = '';
    var divImgObj = document.getElementById('user_img');
    var parentHtml = '';
    if (input.files.length > 0) {
        var file = input.files[0];
        var extension = file.name.substring(file.name.lastIndexOf('.'));
        if (extension == '.png' || extension == ".jpg" || extension == ".jpeg" || extension == ".gif" || extension == ".tiff" || extension == ".JPG" || extension == ".JPEG") {
            //var filerdr = new FileReader();
            //filerdr.onload = function (e) {
            //    $('#user_img').attr('src', e.target.result);
            //}
            //filerdr.readAsDataURL(input.files[0]);

            var formdata = new FormData();
            formdata.append('uplUpload', file);
            var xhr = new XMLHttpRequest();
            xhr.open('POST', GetRelativeUrl("/DynamicPageConfig/SaveImage"));
            xhr.send(formdata);
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4 && xhr.status == "200") {
                    if (JSON.parse(xhr.responseText) == 'Session Failure') {
                        window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
                        return false;
                    }
                    else {
                        $(divImgObj).find('img').attr('src', JSON.parse(xhr.responseText));
                        //var imghtml = "<img src=" + xhr.responseText + " alt='Employee' style='border: 1px #ccc solid; padding: 2px; margin-right: 20px; margin-top: 4px;width:100%;height:100%;' />"
                       //$('#user_img').append(imghtml);
                       //divImgObj.innerHTML = imghtml;
                    }
                }
            }
        }
        else
            ShowMessage(("IN-ER-AHI-001 :: " + extension + " , File format not supported."), 4);
    }
    else
        ShowMessage("IN-IN-AHI-001 :: Please Select the file to upload.", 3);
    return divImgObj;
}

function GetTokenDetails($this) {
    var target = LoadingImage();
    this.execute = function () {
        Url = GetRelativeUrl("/Home/GetToken");
        $.ajax({
            url: Url,
            contentType: 'application/json; charset=utf-8',
            type: 'POST',
            dataType: 'json',
            async: false,
            success: function (response) {
                if (response == "Session Failure") {
                    window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
                    result = [];
                    return false;
                }
                if (response != "") {
                    // ask verification
                    $.SmartMessageBox({
                        title: "<i class='fa fa-sign-out txt-color-orangeDark'></i> Get Token <span class='txt-color-orangeDark'><strong>" + $('#show-shortcut').text() + "</strong></span> ?",
                        content: " Token Id is : " + response,
                        buttons: '[Ok]'
                    });
                }
            },
            error: function (result) {
                $.SmartMessageBox({
                    title: "<i class='fa fa-sign-out txt-color-orangeDark'></i> Get Token <span class='txt-color-orangeDark'><strong>" + $('#show-shortcut').text() + "</strong></span> ?",
                    content: ' Token Id Generation Failed',
                    buttons: '[Ok]'
                });
            }
        });
    }
   
    RemoveLoadingImage(target);
}

function GetMySignature($this) {

    this.execute = function () {  
        
        $("#myModal_MyProf").modal("show");

        setTimeout(function () {
            signaturePad = SignaturePadInitialize();

            var res = "";

            Url = GetRelativeUrl("/Home/GetUserSignature");

            parameterToLoadData = { request: "" };
            $.ajax({
                url: Url,
                contentType: 'application/json; charset=utf-8',
                type: 'POST',
                dataType: 'json',
                data: JSON.stringify(parameterToLoadData),
                async: false,
                success: function (response) {
                    if (response == "Session Failure") {
                        window.location.href = GetParentFolderOfApplication() + "/Login/LoginIndex";
                        result = [];
                        return false;
                    }
                    if (response != "") {
                        var image = signaturePad.toDataURL();
                        image = image.split(",")[0] + "," + response;
                        signaturePad.fromDataURL(image);
                    }
                },
                error: function (result) {
                    if ($(".SmallBox").length > 0) {
                        $(".SmallBox").remove();
                    }
                    $.smallBox({
                        title: "AjaxError.",
                        sound: false,
                        //content: "<i class='fa fa-clock-o'></i> <i>2 seconds ago...</i>",
                        color: "#C46A69",
                        iconSmall: "fa fa-warning bounce animated",
                        timeout: 4000
                    });
                }
            });
        }, 150);}
}

function LoadMenus() {
    var MenuMetaData = null;
    MenuMetaData = GetMenuMetaData();
    var TopMenuMetadata = [];
    var LeftMenuMetadata = [];

    this.GetMetadata = function () {
        var list = JSON.parse(MenuMetaData.MenuConfig)
        if (list != null && list != undefined) {
            for (var i = 0; i < list.SubDatMenuDetails.length; i++) {
                if (list.SubDatMenuDetails[i].IsMenu == true)
                    LeftMenuMetadata.push(list.SubDatMenuDetails[i]);

                if (list.SubDatMenuDetails[i].IsOtherMenu == true)
                    TopMenuMetadata.push(list.SubDatMenuDetails[i]);
            }
        }
    }
  
    this.LeftMenu = function () {
        var _DatMenuComponent = new DatMenuComponent();
        this.GetMetadata();
        _DatMenuComponent.MenuType = "Menu";
        _DatMenuComponent.MenuMetaData =LeftMenuMetadata;
        _DatMenuComponent.ControlId = 'menuArea';

        _DatMenuComponent.Load();
    }

    this.Smartmenu = function () {
        var _DatMenuComponent = new DatMenuComponent();
        this.GetMetadata();
        _DatMenuComponent.MenuType = "SmartMenu";
        _DatMenuComponent.MenuMetaData = TopMenuMetadata;
        _DatMenuComponent.ControlId = 'id_SmartmenuList';
        _DatMenuComponent.Load();
    }
}

function DownloadApk($this) {
    var d = new Date();
    var n = d.getTime();

    this.execute = function () {
        $this.download = "OneViewMobile.apk";
        var ServiceId = window.localStorage.getItem('ServiceId');
        $this.href = GetRelativeUrl("/ApkFolder/" + ServiceId + "/OneViewMobile.apk?time=" + n);
        window.location.href = $this.href;
    }
}

function OneViewJSSerializer() {

    // <summary>
    /// Stringify
    /// </summary>
    /// <param name="Obj">Obj</param>    
    /// <returns>String</returns> 
    this.Stringify = function (Obj) {

        try {
            return JSON.stringify(Obj).replaceAll("\"", "-vn-OVNStringify-vn-");
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Get Action NC UI Component
    /// </summary>
    /// <param name="Req">Req</param>    
    /// <returns>Obj</returns> 
    this.Parse = function (Req) {

        try {
            return JSON.parse(Req.replaceAll("-vn-OVNStringify-vn-", '\"'));
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

/* Added by Devaraj S on 17-11-2017_1449 -- Dubai Municipality Service */

function DeleteDCDMReportPage(button, lControlId, event) {
    var buttonsConfig = [{
        Name: "Yes", EventHandler: function () {
            $("#id_ConfirmationMessage").modal('close');
            var target = LoadingImage();
            setTimeout(function () {
                DeleteDCDMReportPageYesFunction(button);
                RemoveLoadingImage(target);
            }, 1000);
        }
    }, {
        Name: "No", EventHandler: function () {
            $("#id_ConfirmationMessage").modal('close');
        }
    }];
    new OneViewMessageBox().ConfirmMessage("Delete", "Are you sure want to delete?", buttonsConfig);
}

function DeleteDCDMReportPageYesFunction(buttonDom) {
    var rowData = null;
    var DcId = 0;
    if (buttonDom.getAttribute('currentRow') != undefined && buttonDom.getAttribute('currentRow') != null) {
        rowData = buttonDom.getAttribute('currentRow');
        rowData = JSON.parse(rowData);
    }
    if (rowData != undefined && rowData != null) {
        DcId = rowData["DataCaptureId"];
    }
    if (DcId > 0) {
        var parametertoLoad = {};
        parametertoLoad["DcIds"] = JSON.stringify([DcId]);
        parametertoLoad["IsDeleteFromOlap"] = true;
        parametertoLoad["IsDeleteFromOlTP"] = true;
        var _winaimAjax = new WiNAiMAjax();
        _winaimAjax.url = GetRelativeUrl("/DataCapture/DeleteDC");
        _winaimAjax.webMethod = "post";
        _winaimAjax.async = false;
        _winaimAjax.contentType = 'application/json; charset=utf-8';
        _winaimAjax.dataType = 'json';
        _winaimAjax.parameter = JSON.stringify({ request: JSON.stringify(parametertoLoad) });
        var args = {
            success: DeleteDCDMReportPageYesFunction_sucessFn,
            error: DeleteDCDMReportPageYesFunction_ErrorFn,
            sender: this
        };
        _winaimAjax.execute(args);
    }
    else {
        new OneViewMessageBox().ShowNotification("IN-WN-REP :: Please select Datacapture to Delete.", 3);
    }
}

function DeleteDCDMReportPageYesFunction_sucessFn(sender, response) {
    var result = response;
    if (result != null) {
        if (!result.isAnyException) {
            var _DynamicReportPage = new DynamicReportPage();
            _DynamicReportPage.CurrentPageSubComponent = CurrentReportingComponentConfig;
            _DynamicReportPage.CurrentPageSubComponent = CurrentReportingComponentConfig;
            _DynamicReportPage.ContentFrameHtml('ContentArea');
            new OneViewMessageBox().ShowNotification("IN-WN-REP :: Deleted Successfully.", 1);
        }
        else
            new OneViewMessageBox().ShowNotification("IN-WN-REP :: Data capture delete failed.", 1);
    }
}

function DeleteDCDMReportPageYesFunction_ErrorFn(sender, Request, textStatus, errorThrown) {
    console.log(errorThrown);
    new OneViewMessageBox().ShowNotification("IN-WN-REP :: Data capture delete failed.", 1);
}