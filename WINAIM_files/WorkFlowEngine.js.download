/*
    Added By : Devaraj S,
    Added on : 09-12-2018_2130.
    Description : Workflow Engine Framework.
*/

var WorkFlowEngineMetaDataConfig = null;
var oAppendOrSetHtml = new AppendOrSetHtml();
var oWorkflowPageOperations = null;
var oOneViewMessageBox = new OneViewMessageBox();

function WorkFlowEngine() {
    var myInstance = this;
    this.WorkFlowEngineMetaDataConfig = null;
    this.PageFrameHolderId = 'ContentFrame';
    this.PageControlHolderId = 'htmlControls';
    this.UrlToGetWorkFlowEngineMetaDataConfig = '';
    this.FooterId = "FooterContent";
    this.StageCategory = null;

    this.LoadForm = function () {
        WorkFlowEngineMetaDataConfig = myInstance.WorkFlowEngineMetaDataConfig = myInstance.GetWorkFlowEngineMetaDataConfig();
        if (myInstance.WorkFlowEngineMetaDataConfig != undefined && myInstance.WorkFlowEngineMetaDataConfig != null) {
            WorkFlowId = myInstance.WorkFlowEngineMetaDataConfig.WorkFlowId;
            try {
                var CurrentWorkFlowStage = null;
                if (myInstance.StageCategory != null && myInstance.StageCategory != undefined && myInstance.StageCategory > 0) {
                    CurrentWorkFlowStage = myInstance.WorkFlowEngineMetaDataConfig.WorkFlowStageLst.filter(OneViewArrayFilter("StageCategory", myInstance.StageCategory));
                    if (CurrentWorkFlowStage != null && CurrentWorkFlowStage.length > 0)
                        CurrentWorkFlowStage = CurrentWorkFlowStage[0];
                }
                if (CurrentWorkFlowStage == null || CurrentWorkFlowStage == undefined)
                    CurrentWorkFlowStage = GetCurrentUserStageCategory(GetRelativeUrl("/WorkFlow/GetCurrentUserStageCategory"), WorkFlowExecutionId);
                $("#PageTitle").html(CurrentWorkFlowStage.DisplayName);
                oWorkflowPageOperations = new WorkflowPageOperations(CurrentWorkFlowStage.StageCategory);
                /* Create Page based on User. */
                myInstance.CreatePage(CurrentWorkFlowStage);

                if (WorkFlowPageCriteria.ExecutionDetailsForEdit != null && WorkFlowPageCriteria.ExecutionDetailsForEdit != undefined) {
                    LoadFormWithData(WorkFlowPageCriteria.ExecutionDetailsForEdit);
                }

                if (ModelUpdate != null) {
                    var controlsDict = ModelUpdate.ControlGroupConfigLst[0].ControlConfigDict;
                    for (var item in controlsDict) {
                        if (controlsDict[item].Type == "DefaultHTMLPageAutoGenerationTextBoxControlConfig") {
                            var control = document.getElementById(controlsDict[item].ClientID);
                            if (control != null && control.value == "") {
                                var param = JSON.stringify({ request: JSON.stringify({ AttributeId: controlsDict[item].ControlID }) });
                                var autoGeneratedText = GetData(null, GetRelativeUrl('/WorkFlow/GetAutoGeneratedText'), param);
                                if (controlsDict[item].AutoGenerationTextPrefix != "" && controlsDict[item].AutoGenerationTextPrefix != null)
                                    autoGeneratedText = controlsDict[item].AutoGenerationTextPrefix + autoGeneratedText;
                                if (controlsDict[item].AutoGenerationTextSuffix != "" && controlsDict[item].AutoGenerationTextSuffix != null)
                                    autoGeneratedText += controlsDict[item].AutoGenerationTextSuffix;
                                control.value = autoGeneratedText;
                            }
                            break;
                        }
                    }
                }

                UpdateFooter(false);
            }
            catch (ex) {
                console.log(ex);
                ErrorMessage();
            }
        }
        else {
            ErrorMessage();
            UpdateFooter(true);
        }
    }

    var LoadFormWithData = function (formData) {
        var GridLoadParameters = [];
        var HtmlPageConfig = ModelUpdate;
        var _DynamicPage = new DynamicPage(HtmlPageConfig);
        if (HtmlPageConfig.RenderOrder != undefined && HtmlPageConfig.RenderOrder != null) {
            for (var item in HtmlPageConfig.RenderOrder) {
                GridLoadParameters.push(HtmlPageConfig.RenderOrder[item]);
            }
        }
        if (GridLoadParameters.length > 0) {
            for (var i = 0; i < GridLoadParameters.length; i++) {
                var controlConfig = HtmlPageConfig.ControlGroupConfigLst[0].ControlConfigDict[GridLoadParameters[i]];
                try {
                    if (controlConfig != undefined && controlConfig != null) {
                        var StageStatusLst = formData.StageStatusLst;
                        for (var j = 0; j < StageStatusLst.length; j++) {
                            var AttributeInfo = StageStatusLst[j].AttributeInfo;
                            if (AttributeInfo != null && AttributeInfo != undefined) {
                                var AnswerDetails = AttributeInfo.Answer;
                                var filteredResult = AnswerDetails.filter(OneViewArrayFilter("Attribute_Id", parseInt(controlConfig.ControlID))).reverse(function (a, b) {
                                    var dateA = new Date(a.LastUpdatedDate), dateB = new Date(b.LastUpdatedDate);
                                    return dateB - dateA;
                                });
                                if (filteredResult != null && filteredResult != undefined && filteredResult.length > 0) {
                                    var filteredResultFirstOrDefault = filteredResult[0];
                                    var Answer = "";
                                    if (filteredResultFirstOrDefault.AnswerValue != null && filteredResultFirstOrDefault.AnswerValue != '')
                                        Answer = filteredResultFirstOrDefault.AnswerValue;
                                    else
                                        Answer = filteredResultFirstOrDefault.Answer;

                                    if (controlConfig.ControlTypeName == "ComboBox" && controlConfig.ComboType == 1) {
                                        var _ComboBox = new WiNAiMComboBox(HtmlPageConfig);
                                        _ComboBox.setData(controlConfig, filteredResultFirstOrDefault.Answer.split('|').map(function (item) { return item.trim(); }));
                                        _ComboBox.onchange(controlConfig);
                                        break;
                                    }
                                    else if (controlConfig.ControlTypeName == "ComboBox") {
                                        var _ComboBox = new WiNAiMComboBox(HtmlPageConfig);
                                        _ComboBox.setData(controlConfig, filteredResultFirstOrDefault.Answer);
                                        _ComboBox.onchange(controlConfig);
                                        if (!controlConfig.IsEditable && document.getElementById(controlConfig.ClientID) != undefined && document.getElementById(controlConfig.ClientID) != null)
                                            document.getElementById(controlConfig.ClientID).setAttribute("disabled", true);
                                        break;
                                    }
                                    else if (controlConfig.ControlTypeName == "RadioButton" && controlConfig.RadioButtonType == 1) {
                                        _DynamicPage.SetData(controlConfig, filteredResultFirstOrDefault.Answer);
                                        break;
                                    }
                                    else if (controlConfig.ControlTypeName == "RadioButton" && controlConfig.RadioButtonType == 0) {
                                        _DynamicPage.SetData(controlConfig, filteredResultFirstOrDefault.Answer);
                                        break;
                                    }
                                    else if (controlConfig.ControlTypeName == "TextBox") {
                                        _DynamicPage.SetData(controlConfig, Answer);
                                        break;
                                    }
                                    else if (controlConfig.ControlTypeName == "Hidden") {
                                        _DynamicPage.SetData(controlConfig, Answer);
                                        break;
                                    }
                                    else if (controlConfig.ControlTypeName == "DatePicker") {
                                        _DynamicPage.SetData(controlConfig, Answer + ',' + Answer);
                                        break;
                                    }
                                    else if (controlConfig.ControlTypeName == "ImageControl" && controlConfig.ImageControlType == 3) {
                                        var UrlValue = '';
                                        if (MyDataCapture.MultiMediaMappingDTO != undefined && MyDataCapture.MultiMediaMappingDTO != null && MyDataCapture.MultiMediaMappingDTO.length > 0) {
                                            //var dcresultIds = atData[j].split('|');
                                            for (var itrUrl = 0; itrUrl < MyDataCapture.MultiMediaMappingDTO.length; itrUrl++) {
                                                if (UrlValue == '')
                                                    UrlValue = (MyDataCapture.MultiMediaMappingDTO[itrUrl].ServerId + "$sp$" + MyDataCapture.MultiMediaMappingDTO[itrUrl].RemoteURL);
                                                else
                                                    UrlValue = UrlValue + "|" + (MyDataCapture.MultiMediaMappingDTO[itrUrl].ServerId + "$sp$" + MyDataCapture.MultiMediaMappingDTO[itrUrl].RemoteURL);
                                            }
                                        }
                                        _DynamicPage.SetData(controlConfig, UrlValue);
                                        break;
                                    }
                                    else if (controlConfig.ControlTypeName == "ImageControl" && controlConfig.ImageControlType == 4) {
                                        var UrlValue = [];
                                        if (MyDataCapture.MultiMediaBlobSubElementDTOLst != undefined && MyDataCapture.MultiMediaBlobSubElementDTOLst != null && MyDataCapture.MultiMediaBlobSubElementDTOLst.length > 0) {
                                            //var dcresultIds = atData[j].split('|');
                                            for (var itrUrl = 0; itrUrl < MyDataCapture.MultiMediaBlobSubElementDTOLst.length; itrUrl++) {
                                                UrlValue.push({
                                                    Id: MyDataCapture.MultiMediaBlobSubElementDTOLst[itrUrl].ServerId, URL: MyDataCapture.MultiMediaBlobSubElementDTOLst[itrUrl].DataURL,
                                                    SignedDate: MyDataCapture.MultiMediaBlobSubElementDTOLst[itrUrl].TimeStamp
                                                });
                                            }
                                        }
                                        $("#" + controlConfig.ClientID).val('');
                                        _DynamicPage.SetData(controlConfig, UrlValue);
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (ex) {
                    console.error(ex);
                }
            }
        }
    }

    var UpdateFooter = function (stopSave) {
        try {
            var BackButtonHtml = '<a class="waves-effect waves-light light-green btn margin-right-10" onclick="oWorkflowPageOperations.Back()">Back</a>';
            var SaveButtonHtml = '';
            var SubmitButtonHtml = '';
            SaveButtonHtml = '<a class="waves-effect waves-light light-green btn margin-right-10" ' + (stopSave ? 'disabled' : '') + ' onclick="oWorkflowPageOperations.SaveDraft()">Save</a>';
            SubmitButtonHtml = '<a class="waves-effect waves-light light-green btn margin-right-10" ' + (stopSave ? 'disabled' : '') + ' onclick="oWorkflowPageOperations.Submit()">Submit</a>';

            var Html = '<nav>' +
                            '<div class="nav-wrapper blue-grey darken-4 padding-hrz-10">' +
                                '<div class="center-align">' +
                                    BackButtonHtml +
                                    SaveButtonHtml +
                                    SubmitButtonHtml
                                '</div>' +
                            '</div>' +
                       '</nav>';

            oAppendOrSetHtml.ControlId = myInstance.FooterId;
            oAppendOrSetHtml.Html = Html;
            oAppendOrSetHtml.SetHtml();
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    this.CreatePage = function (CurrentWorkFlowStage) {
        if (CurrentWorkFlowStage != undefined && CurrentWorkFlowStage != null) {
            var oFactory = new Factory();
            var oLoadDCPage = oFactory.GetWrokflowPageConfigObject(CurrentWorkFlowStage.WorkFlowPageConfig.Type);
            oLoadDCPage.PageConfig = CurrentWorkFlowStage.WorkFlowPageConfig.PageConfig;
            oLoadDCPage.PageFrameHolderId = myInstance.PageFrameHolderId;
            oLoadDCPage.PageControlHolderId = myInstance.PageControlHolderId;
            oLoadDCPage.Load();
        }
    }

    var ErrorMessage = function () {
        var Message = "";
        if (_GetGlobalization != undefined && _GetGlobalization != null)
            Message = _GetGlobalization.GetGlobalizationValue("Server Error, Please Contact Administrator!");
        new OneViewMessageBox().ShowNotification(Message, 4);
    }

    this.GetWorkFlowEngineMetaDataConfig = function () {
        var result = null;
        var _OneViewAjax = new WiNAiMAjax();
        _OneViewAjax.url = myInstance.UrlToGetWorkFlowEngineMetaDataConfig;
        _OneViewAjax.webMethod = "post";
        _OneViewAjax.async = false;
        _OneViewAjax.contentType = 'application/json; charset=utf-8';
        _OneViewAjax.dataType = 'json';
        result = _OneViewAjax.execute();
        if (result != undefined && result != null && result != '') {
            try {
                result = result;
                if (typeof (result) == 'object')
                    return result;
                else
                    return null;
            }
            catch (ex) {
                return null;
            }
        }
        else {
            return null;
        }
    }
}

function GetCurrentUserStageCategory(Url, WorkFlowExecutionId) {
    var parameterToLoadData = null;
    if (WorkFlowExecutionId)
        parameterToLoadData = JSON.stringify({ request: JSON.stringify({ WorkFlowExecutionId: WorkFlowExecutionId }) });
    var result;
    var myAjaxobj = new WiNAiMAjax();
    myAjaxobj.url = Url;
    myAjaxobj.webMethod = "post";
    myAjaxobj.parameter = parameterToLoadData;
    myAjaxobj.async = false;
    myAjaxobj.dataType = 'json';
    result = myAjaxobj.execute();
    if (result != undefined && result != null && result != '') {
        try {
            if (result == "Session Failure") {
                window.location.href = GetParentFolderOfApplication() + "/Login/Index";
                result = null;
                return false;
            }
            if (typeof (result) == 'object') {
                result = result;
            }
            else
                result = null;
        }
        catch (ex) {
            oOneViewMessageBox.ShowNotification("IN-ER-001 :: Error in current operation.", 4);
        }
    }
    return result;
}

function DefaultWorkflowPageView() {
    var myInstance = this;
    this.PageConfig = null;
    this.PageFrameHolderId = '';
    this.PageControlHolderId = '';

    this.Load = function () {
        var _CreateHTMLPageHTML = new CreateHTMLPageHTML();
        _CreateHTMLPageHTML.HTMLPageConfig = myInstance.PageConfig;

        /* Create Frame HTML based on the Page Config Meta Data. */
        var FilterParamHtml = _CreateHTMLPageHTML.CreateFramePartial();
        oAppendOrSetHtml.ControlId = myInstance.PageFrameHolderId;
        oAppendOrSetHtml.Html = FilterParamHtml;
        oAppendOrSetHtml.AppendToHtml();

        /* Create Controls HTML based on the Page Config Meta Data. */
        var ControlsHtml = _CreateHTMLPageHTML.CreateControls(myInstance.PageConfig.ControlGroupConfigLst);
        oAppendOrSetHtml.ControlId = myInstance.PageControlHolderId;
        oAppendOrSetHtml.Html = ControlsHtml;
        oAppendOrSetHtml.SetHtml();

        /* Set Controls into Frame based on the Page Config Meta Data. */
        _CreateHTMLPageHTML.SetControls(myInstance.PageConfig.ControlGroupConfigLst);

        var _LoadControlData = new LoadControlData(myInstance.PageConfig);
        _LoadControlData.Load();
    }
}

function GetData(args, Url, FilterParam) {
    var myAjaxobj = new WiNAiMAjax();
    myAjaxobj.url = Url;
    myAjaxobj.webMethod = "post";
    myAjaxobj.async = false;
    myAjaxobj.parameter = FilterParam;
    myAjaxobj.contentType = 'application/json; charset=utf-8';
    myAjaxobj.dataType = 'json';
    return myAjaxobj.execute(args);
}

function CustomWorkflowPageView() {
    var myInstance = this;
    this.PageConfig = null;
    this.PageFrameHolderId = '';
    this.PageControlHolderId = '';

    this.Load = function () {

        if (myInstance.PageConfig.CodeUrl != null && myInstance.PageConfig.CodeUrl != "") {

            var _oWiNAiMAjax = new WiNAiMAjax();
            _oWiNAiMAjax.url = GetRelativeUrl(myInstance.PageConfig.CodeUrl + "?" + new Date().toString());
            _oWiNAiMAjax.webMethod = "GET";

            var callBackparm = {
                success: function (response, message) {
                    if (message != "") {
                        var oScript = document.createElement("script");
                        var oScriptText = document.createTextNode(message);
                        oScript.appendChild(oScriptText);
                        document.body.appendChild(oScript);
                    }
                },
                error: function (sender, Request, textStatus, errorThrown) {
                },
                sender: this
            }

            _oWiNAiMAjax.execute(callBackparm);
        }

        if (myInstance.PageConfig.HtmlUrl != null && myInstance.PageConfig.HtmlUrl != "") {

            var _oWiNAiMAjax = new WiNAiMAjax();
            _oWiNAiMAjax.url = GetRelativeUrl(myInstance.PageConfig.HtmlUrl + "?" + new Date().toString());
            _oWiNAiMAjax.webMethod = "GET";

            var callBackparm = {
                success: function (response, message) {
                    if (message != "") {

                        oOneViewGlobalDataCaptureComponent.PreRender();

                        $("#" + myInstance.PageFrameHolderId).append(message);

                        oOneViewGlobalDataCaptureComponent.PostRender();
                    }
                },
                error: function (sender, Request, textStatus, errorThrown) {
                },
                sender: this
            }

            _oWiNAiMAjax.execute(callBackparm);
        }
    }
}

function WorkflowPageOperations(CurrentStageCategory) {
    var myInstance = this;
    this.Back = function () {
        var Title = "Confirm Navigation";
        var Content = "Are you sure you want to leave this page?";

        var buttonsConfig = [{
            Name: "Leave this Page", EventHandler: function () {
                var target = LoadingImage();
                setTimeout(function () {
                    if (WorkFlowPageCriteria != null && WorkFlowPageCriteria != '') {
                        var BackNavigationURL = WorkFlowPageCriteria["BackNavigationURL"];
                        if (BackNavigationURL != undefined && BackNavigationURL != null && BackNavigationURL != '')
                            window.location.href = GetRelativeUrl(BackNavigationURL);
                        else
                            RemoveLoadingImage(target);
                    }
                }, 100);
            }
        }, {
            Name: "Stay on this page", EventHandler: function () {
                $("#id_ConfirmationMessage").modal('close');
            }
        }];
        new OneViewMessageBox().ConfirmMessage(Title, Content, buttonsConfig);
    }

    this.SaveDraft = function () {
        var paramToLoad = createparameterToLoadData(ModelUpdate);
        paramToLoad["IsSubmit"] = false;
        SaveWorkFlowExecution(paramToLoad);
    }

    this.Submit = function () {
        var _oValidationFrameWork = new ValidationFrameWork(ModelUpdate);
        if (_oValidationFrameWork.validateControl()) {
            var paramToLoad = createparameterToLoadData(ModelUpdate);
            paramToLoad["IsSubmit"] = true;
            SaveWorkFlowExecution(paramToLoad);
        }
    }

    var SaveWorkFlowExecution = function (paramToLoad) {
        var result = SyncAjaxCall(GetRelativeUrl("/WorkFlow/SaveWorkFlowExecution"), paramToLoad);
        if (result == true) {
            oOneViewMessageBox.ShowNotification("Successfully Executed", 1);
            window.location.href = GetRelativeUrl(WorkFlowPageCriteria.BackNavigationURL);
        }
        else
            oOneViewMessageBox.ShowNotification("IN-ER-001 :: Error in current operation.", 4);
    }

    var createparameterToLoadData = function (ModelUpdate) {
        var _DynamicPage = null;
        var PageParam = {};
        _DynamicPage = new DynamicPage(ModelUpdate);
        var _LoadControlData = new LoadControlData(ModelUpdate);
        var Parameters = _LoadControlData.GetAttibuteParamFromControlConfig(ModelUpdate.ControlGroupConfigLst);
        PageParam["AttributeInfo"] = Parameters;
        PageParam["WorkFlowId"] = WorkFlowId;
        PageParam["WorkFlowExecutionId"] = WorkFlowExecutionId;
        PageParam["CurrentStageCategory"] = CurrentStageCategory;
        return PageParam;
    }

    var SyncAjaxCall = function (Url, parameterToLoadData) {
        parameterToLoadData = JSON.stringify(parameterToLoadData);
        parameterToLoadData = { request: parameterToLoadData };
        parameterToLoadData = JSON.stringify(parameterToLoadData);
        var result;
        var myAjaxobj = new WiNAiMAjax();
        myAjaxobj.url = Url;
        myAjaxobj.webMethod = "post";
        myAjaxobj.parameter = parameterToLoadData;
        myAjaxobj.async = false;
        myAjaxobj.dataType = 'json';
        result = myAjaxobj.execute();
        if (result != undefined && result != null && result != '') {
            try {
                result = result;
                if (result == "Session Failure") {
                    window.location.href = GetParentFolderOfApplication() + "/Login/Index";
                    result = null;
                    return false;
                }
                else if (typeof (result) == 'object')
                    return result.isSucess;
                else
                    return false;
            }
            catch (ex) {
                return false;
            }
        }
        else {
            return false;
        }
    }
}

function GetWorkFlowExecutionAttributeInfo(DataDisplayObject, AttributeId) {
    var Answer = '';
    try {
        if (AttributeId > 0) {
            for (var j = 0; j < DataDisplayObject.length; j++) {
                var AttributeInfo = DataDisplayObject[j].AttributeInfo;
                if (AttributeInfo != null && AttributeInfo != undefined) {
                    var AnswerDetails = AttributeInfo.Answer;
                    var filteredResult = AnswerDetails.filter(OneViewArrayFilter("Attribute_Id", parseInt(AttributeId))).reverse(function (a, b) {
                        var dateA = new Date(a.LastUpdatedDate), dateB = new Date(b.LastUpdatedDate);
                        return dateB - dateA;
                    });
                    if (filteredResult != null && filteredResult != undefined && filteredResult.length > 0) {
                        var filteredResultFirstOrDefault = filteredResult[0];
                        if (filteredResultFirstOrDefault.AnswerValue != undefined && filteredResultFirstOrDefault.AnswerValue != null && filteredResultFirstOrDefault.AnswerValue != '')
                            Answer = filteredResultFirstOrDefault.AnswerValue;
                        else if (filteredResultFirstOrDefault.Answer != undefined && filteredResultFirstOrDefault.Answer != null && filteredResultFirstOrDefault.Answer != '')
                            Answer = filteredResultFirstOrDefault.Answer;
                    }
                }
            }
        }
    } catch (error) { console.error(JSON.stringify(error)); }
    return Answer;
}

/* GetColumnValuebyconfig --
    valueReadConfig = { valuePropertyRoot : "", valuePropertyName : null, NeedToDisplayMultipleValue : false, concatenateDelimiter : "|" }

    TODO (Devaraj S) : This method not supporting read value from Array, except if the least child will be an array and get all value particular property without condition. 
*/
function GetColumnValuebyconfig(DataDisplayObject, valueReadConfig) {
    // Self invoking function (Constructor)
    (function () {
        var lValueReadConfigObj = {
            valuePropertyRoot: "", valuePropertyName: null, NeedToDisplayMultipleValue: false, concatenateDelimiter: "|"
        };
        if (valueReadConfig == null) {
            valueReadConfig = lValueReadConfigObj;
        }
        else {
            lValueReadConfigObj = Object.keys(valueReadConfig).map(function (key, index) {
                lValueReadConfigObj[key] = valueReadConfig[key];
            });
            valueReadConfig = lValueReadConfigObj;
        }
    }());

    this.Get = function () {
        var Answer = '';
        if (valueReadConfig != null && valueReadConfig != undefined) {
            if (valueReadConfig.valuePropertyRoot == "" && !valuePropertyRoot.NeedToDisplayMultipleValue) {
                Answer = DataDisplayObject[valueReadConfig.valuePropertyName];
            }
            else if (valueReadConfig.valuePropertyRoot == "" && valuePropertyRoot.NeedToDisplayMultipleValue) {
                for (var jtr = 0; jtr < valuePropertyRoot.valuePropertyName.length; jtr++) {
                    var currentSelectedValue = DataDisplayObject[valuePropertyRoot.valuePropertyName[jtr]];
                    if (Answer == '')
                        Answer = (currentSelectedValue != undefined && currentSelectedValue != null && currentSelectedValue !== '' ? currentSelectedValue : '');
                    else
                        Answer = Answer + (currentSelectedValue != undefined && currentSelectedValue != null && currentSelectedValue !== '' ? (valueReadConfig.concatenateDelimiter + currentSelectedValue) : '');
                }
            }
            else if (valueReadConfig.valuePropertyRoot != "") {
                var valuePropertyRootLst = valueReadConfig.valuePropertyRoot.split("$vn$");
                var leastObjectfromrootpath = null;
                for (var itr = 0; itr < valuePropertyRootLst.length; itr++) {
                    if (leastObjectfromrootpath == null)
                        leastObjectfromrootpath = GetObjectFromResultData(DataDisplayObject, valuePropertyRootLst[itr]);
                    else
                        leastObjectfromrootpath = GetObjectFromResultData(leastObjectfromrootpath, valuePropertyRootLst[itr]);
                }
                if (leastObjectfromrootpath != null) {
                    if (!valuePropertyRoot.NeedToDisplayMultipleValue)
                        Answer = GetCommaSeperatedValue(leastObjectfromrootpath, [valueReadConfig.valuePropertyName], valueReadConfig.concatenateDelimiter);
                    else
                        Answer = GetCommaSeperatedValue(leastObjectfromrootpath, valueReadConfig.valuePropertyName, valueReadConfig.concatenateDelimiter);
                }
            }
        }
        return Answer;
    }

    var GetObjectFromResultData = function (ResultData, objectPropertyName) {
        return ResultData[objectPropertyName];
    }

    var GetCommaSeperatedValue = function (DataDisplayObject, PropertyNameLst, concatenateDelimiter) {
        var Answer = '';
        if (DataDisplayObject != undefined && DataDisplayObject != null && DataDisplayObject.constructor == Array)/* Object type as a Array */ {
            if (DataDisplayObject != undefined && DataDisplayObject != null && DataDisplayObject.length > 0 && PropertyNameLst != undefined && PropertyNameLst != null && PropertyNameLst.length > 0) {
                for (var itr = 0; itr < DataDisplayObject.length; itr++) {
                    var userdetail = '';
                    if (Answer != undefined && Answer != '' && Answer != null)
                        Answer = Answer + concatenateDelimiter;
                    for (var jtr = 0; jtr < PropertyNameLst.length; jtr++) {
                        var currentSelectedValue = DataDisplayObject[itr][PropertyNameLst[jtr]];
                        if (userdetail == '')
                            userdetail = (currentSelectedValue != undefined && currentSelectedValue != null && currentSelectedValue !== '' ? currentSelectedValue : '');
                        else
                            userdetail = userdetail + (currentSelectedValue != undefined && currentSelectedValue != null && currentSelectedValue !== '' ? (", " + currentSelectedValue) : '');
                    }
                    Answer = Answer + userdetail;
                }
            }
        }
        else if (DataDisplayObject != undefined && DataDisplayObject != null && DataDisplayObject.constructor == Object)/* Object type as a Dictionary */ {
            if (DataDisplayObject != undefined && DataDisplayObject != null && (PropertyNameLst == undefined || PropertyNameLst == null || PropertyNameLst.length == 0)) {
                for (var item in DataDisplayObject) {
                    if (typeof (DataDisplayObject[item]) != 'function') {
                        var userdetail = '';
                        if (Answer != undefined && Answer != '' && Answer != null)
                            Answer = Answer + concatenateDelimiter;
                        Answer = Answer + DataDisplayObject[item];
                    }
                }
            }
        }
        return Answer;
    }
}