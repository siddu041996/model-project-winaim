var OneViewDcGlobalVariableInfo = null;
var OneViewGlobalDevelopementModeEnabled = false;
var oOneViewGlobalDataCaptureComponent = new DataCaptureComponent();

// DataCaptureComponent
function DataCaptureComponent() {

    var MyInstance = this;
    this.FooterId = "FooterContent";
    this.HandlerDic = {};

    /// <summary>
    /// Set
    /// </summary>
    /// <param name="RequestParam">{ "DcPlaceId": 1, "DcPlaceName": "", "DcPlaceType": 1, "DcPlaceDimension": 16, "TemplateNodeId": 153, "DcProfileId": "", "DcId": 1, "DcViewContext": 1  }</param> 
    this.Init = function (RequestParam) {

        try {           
            InitializeOneViewDcGlobalVariableInfo(RequestParam);
            OneViewDcGlobalVariableInfo.oDOM.RemoveClass("AsyncReportGenLink", "hide");
            UpdateFooter();
            UpdateSimpleStorageUrl();

            OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo = GetDCModelInfo(RequestParam);
            
            if (OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo != null && OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel != null) {

                if (OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DcClientGuid == "")
                    OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DcClientGuid = OneViewDcGlobalVariableInfo.oDcClientGuidGenerationComponent.GetClientGuid();
                if (OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DcResultsClientGuid == "")
                    OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DcResultsClientGuid = OneViewDcGlobalVariableInfo.oDcClientGuidGenerationComponent.GetClientGuid();

                var _oDcTemplateMetadataFormatterComponent = new DcTemplateMetadataFormatterComponent();
                OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo["FormatedTemplateMetadata"] = _oDcTemplateMetadataFormatterComponent.Format(OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.TemplateConfigMetaData.TemplateConfigMetaDataDetails);                

                if (OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.ActionNCModel == null)
                    OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.ActionNCModel = { DCNCModel: {}};

                OneViewDcGlobalVariableInfo.oDcActionNCComponent = new DcActionNCComponent();                
            }
            else {
                OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification("Template configuration not available", 4);
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// PreRender
    /// </summary>
    this.PreRender = function () {

        try {            
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// PostRender
    /// </summary>
    this.PostRender = function () {

        try {           
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// PageLoad
    /// </summary>
    this.PageLoad = function () {

        try {

            if (MyInstance.ExcecuteHandler("Pre_PageLoad")) { } else { return; };
            
            if (OneViewDcGlobalVariableInfo.RequestParam.DcViewContext != OneViewDcGlobalVariableInfo.DcViewContext.New) {
                UpdateUIJobs();
            }

            MyInstance.ExcecuteHandler("Post_PageLoad");              
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Add Handler
    /// </summary>
    this.AddHandler = function (Req) {

        try {            
            if (MyInstance.HandlerDic[Req.Name] == undefined) {
                MyInstance.HandlerDic[Req.Name] = [];
            }

            MyInstance.HandlerDic[Req.Name].push(Req);            
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Remove Handler
    /// </summary>
    this.RemoveHandler = function (Req) {

        try {
            if (MyInstance.HandlerDic[Req.Name] != undefined) {
                delete MyInstance.HandlerDic[Req.Name];
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Excecute Handler
    /// </summary>
    this.ExcecuteHandler = function (Name) {

        try {                
            var oHandler = MyInstance.HandlerDic[Name];
            var IsSuccess = true;

            if (oHandler != undefined && oHandler != null && oHandler != "") {

                for (var i = 0; i < oHandler.length; i++) {

                    if (oHandler[i].Handler != undefined && oHandler[i].Handler != null && oHandler[i].Handler != "") {

                        var IsJobSuccess = oHandler[i].Handler.Execute();

                        if (IsJobSuccess == false) {

                            IsSuccess = false;
                            break;
                        }
                    }                   
                }
            }

            return IsSuccess;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
    
    /// <summary>
    /// Initialize OneView Dc Global Variable Info
    /// </summary>
    var InitializeOneViewDcGlobalVariableInfo = function (RequestParam) {

        try {
            OneViewDcGlobalVariableInfo = {
                OneViewGlobalcurrentLanguage: 'en-us',
                RequestParam: RequestParam,
                SimpleStorageUrl: "",
                IsDevelopementMode: OneViewGlobalDevelopementModeEnabled,
                DcSaveTrack: [],
                OneViewDataCaptureModelInfo: null,
                oDcFactory: new DcFactory(),
                oDcSpecialCharacterValidationComponent: new DcSpecialCharacterValidationComponent(),
                oDcClientGuidGenerationComponent: new DcClientGuidGenerationComponent(),
                oOneViewMessageBox: new OneViewMessageBox(),
                oOneViewJavaScriptSerializer: new OneViewJavaScriptSerializer(),
                oDcBandDetailsCacheComponent: new DcBandDetailsCacheComponent(),
                oDcOrganizationAssestsNodeCacheComponent: new DcOrganizationAssestsNodeCacheComponent(),
                BandListViewAnswerModeDefaultColourCode: "#00ff00",
                SidePanelListViewAnswerModeDefaultColourCode: "grey",
                oDcActionNCComponent: null,
                oDOM: new DOM(),
                IsDcModelModified: false,
                IsSaveAllAttributes: false,
                ModifiedAttributeIdLst: [],
                QueuedAttributeIdLst: [],
                ModifiedActionNCRuleIdLst: [],
                QueuedActionNCRuleIdLst: [],
                IsDcOnDemandSaveEnabled: true,
                IsAsyncDcSave: true,
                IsDcSaveAsyncTaskHandlerActive: false,
                DcSaveLastTimeOutId: null,
                DataCaptureContext: {
                    DC: 1,
                    FormAction: 2,
                    Blocker: 3
                },
                CurrentAttributeId: 0,
                CurrentControlId: "",
                CurrentActionNCConfig: null,
                BandDetailsCacheDict: {},
                BandCacheDict: {},
                OrganizationAssestsNodeCacheDict: {},
                DcDefaultTreeListViewDataSourceCacheDict: {},
                DATEntityTypes: {
                    DCNCMapping: 24,
                    Action: 22
                },
                DefaulSidePanelContext: {
                    Comments: 1,
                    Action: 2
                },
                DefaulSidePanelClickContext: {
                    StatusBar: 1,
                    Tab: 2
                },
                DcViewContext: {
                    New: 1,
                    Edit: 2,
                    Disable: 3
                }
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Update Simple Storage Url
    /// </summary>
    var UpdateSimpleStorageUrl = function () {

        try {            
            var _oWiNAiMAjax = new WiNAiMAjax();
            _oWiNAiMAjax.url = GetRelativeUrl("/DataCapture/GetSimpleStorageHostInfo");
            _oWiNAiMAjax.webMethod = "post";
            _oWiNAiMAjax.async = false;
            _oWiNAiMAjax.dataType = "json";

            var callBackparm = {
                success: function (response, message) {
                   
                    var Response = message;

                    if (Response != null && Response != "") {

                        OneViewDcGlobalVariableInfo.SimpleStorageUrl = "http://" + Response.ServerIp + ":" + Response.PortNo + "/" + Response.InstanceName + "/SimpleStorageService.svc/SimpleStorageService";
                    }
                },
                error: function (sender, Request, textStatus, errorThrown) {
                },
                sender: this
            }

            _oWiNAiMAjax.execute(callBackparm);
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Update Footer
    /// </summary>
    var UpdateFooter = function () {

        try {
            var BackButtonHtml = '<a class="waves-effect waves-light light-green btn margin-right-10" onclick="oOneViewGlobalDataCaptureComponent.Back()">Back</a>';
            var SaveButtonHtml = '';
            var SubmitButtonHtml = '';
            var DevelopmentModeHtml = '';

            if (OneViewDcGlobalVariableInfo.RequestParam.DcViewContext != OneViewDcGlobalVariableInfo.DcViewContext.Disable) {
                SaveButtonHtml = '<a class="waves-effect waves-light light-green btn margin-right-10" onclick="oOneViewGlobalDataCaptureComponent.SaveDraft()">Save</a>';
                SubmitButtonHtml = '<a class="waves-effect waves-light light-green btn margin-right-10" onclick="oOneViewGlobalDataCaptureComponent.Submit()">Submit</a>';
            }

            if (OneViewDcGlobalVariableInfo.IsDevelopementMode == true) {
                DevelopmentModeHtml += '<a class="waves-effect waves-light light-green btn margin-right-10" onclick="new DcSaveTestReportComponent().MakeAllNA()">Make All NA</a>';
                DevelopmentModeHtml += '<a class="waves-effect waves-light light-green btn margin-right-10" onclick="new DcSaveTestReportComponent().Open()">Test Report</a>';
            }

            var Html = '<nav>' +
                            '<div class="nav-wrapper blue-grey darken-4 padding-hrz-10">' +
                                '<div class="center-align">' +
                                    BackButtonHtml +
                                    SaveButtonHtml +
                                    SubmitButtonHtml +
                                    DevelopmentModeHtml +
                                '</div>' +
                            '</div>' +
                       '</nav>';

            OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml(MyInstance.FooterId, Html);            
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Update UIJobs
    /// </summary>
    var UpdateUIJobs = function () {

        try {
            var DataCaptureDetailsModel = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DataCaptureDetailsModel;
           
            for (var itr in DataCaptureDetailsModel) {

                for (var i = 0; i < DataCaptureDetailsModel[itr].Answers.length; i++) {

                    var _oDcTemplateUIEventJobComponent = new DcTemplateUIEventJobComponent(OneViewDcGlobalVariableInfo.DataCaptureContext.DC, itr, DataCaptureDetailsModel[itr].Answers[i].ControlId);
                    _oDcTemplateUIEventJobComponent.IsDcPageLoad = true;
                    _oDcTemplateUIEventJobComponent.IsNotificationEnabledForMessageKey = false;
                    _oDcTemplateUIEventJobComponent.ExcecutePostControlUIJobs();
                }
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get DCModel Info
    /// </summary>
    /// <param name="RequestParam">{ "DcPlaceId": 1, "DcPlaceName": "", "DcPlaceType": 1, "DcPlaceDimension": 16, "TemplateNodeId": 153, "DcProfileId": "", "DcId": 1 }</param>   
    /// <returns>DCModelInfo</returns> 
    var GetDCModelInfo = function (RequestParam) {

        try {
            var Result = null;
            
            var _oWiNAiMAjax = new WiNAiMAjax();
            _oWiNAiMAjax.url = GetRelativeUrl("/DataCapture/GetModel");
            _oWiNAiMAjax.webMethod = "post";
            _oWiNAiMAjax.parameter = JSON.stringify(RequestParam);
            //_oWiNAiMAjax.async = true;
            _oWiNAiMAjax.dataType = "json";

            var callBackparm = {
                success: function (response, message) {
                    Result = message;                    
                },
                error: function (sender, Request, textStatus, errorThrown) {
                },
                sender: this
            }

            _oWiNAiMAjax.execute(callBackparm);

            return Result;
        }
        catch (Excep) {
            console.log(Excep);
        }
        finally {
        }
    }

    /// <summary>
    /// Save
    /// </summary>    
    this.Save = function () {

        try {
            // Todo: Need to remove service id hard coding
            if (OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.ServiceId == 16) {
                var _oDcCustomAttributeGroupSummary_3_16 = new DcCustomAttributeGroupSummary_3_16();
                _oDcCustomAttributeGroupSummary_3_16.Excecute();
            }

            if (navigator != undefined && navigator != null && navigator.onLine) {

                if (OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.length > 0 || OneViewDcGlobalVariableInfo.IsDcModelModified == true) {

                    if (OneViewDcGlobalVariableInfo.IsAsyncDcSave == false || OneViewDcGlobalVariableInfo.IsDcSaveAsyncTaskHandlerActive == false) {

                        if (OneViewDcGlobalVariableInfo.IsAsyncDcSave == true) {
                            OneViewDcGlobalVariableInfo.IsDcSaveAsyncTaskHandlerActive = true;
                        }

                        OneViewDcGlobalVariableInfo.IsDcModelModified = false;

                        OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("AsyncOperationStatus", "Saving...");

                        var SaveDataCaptureModelRequest = null;

                        if (OneViewDcGlobalVariableInfo.IsSaveAllAttributes == true) {
                            SaveDataCaptureModelRequest = JSON.stringify(OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel);
                        }
                        else {
                            SaveDataCaptureModelRequest = JSON.stringify(GetSaveDataCaptureModelRequest());
                        }

                        var _oWiNAiMAjax = new WiNAiMAjax();
                        _oWiNAiMAjax.url = GetRelativeUrl("/DataCapture/Save");
                        _oWiNAiMAjax.webMethod = "post";
                        _oWiNAiMAjax.parameter = JSON.stringify({ "Req": SaveDataCaptureModelRequest });
                        _oWiNAiMAjax.async = OneViewDcGlobalVariableInfo.IsAsyncDcSave;
                        _oWiNAiMAjax.dataType = "json";

                        var callBackparm = {
                            success: function (response, message) {

                                if (OneViewDcGlobalVariableInfo.IsDevelopementMode == true) {
                                    OneViewDcGlobalVariableInfo.DcSaveTrack[OneViewDcGlobalVariableInfo.DcSaveTrack.length - 1].EndTime = new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds();
                                    OneViewDcGlobalVariableInfo.DcSaveTrack[OneViewDcGlobalVariableInfo.DcSaveTrack.length - 1].Response = message;
                                    OneViewDcGlobalVariableInfo.DcSaveTrack[OneViewDcGlobalVariableInfo.DcSaveTrack.length - 1].Status = "Completed";
                                    OneViewDcGlobalVariableInfo.DcSaveTrack[OneViewDcGlobalVariableInfo.DcSaveTrack.length - 1].AttributeIds = OneViewDcGlobalVariableInfo.QueuedAttributeIdLst.toString();
                                    OneViewDcGlobalVariableInfo.DcSaveTrack[OneViewDcGlobalVariableInfo.DcSaveTrack.length - 1].ActionNCRuleIds = OneViewDcGlobalVariableInfo.QueuedActionNCRuleIdLst.toString();
                                }

                                UpdateSaveDcResponse(message);

                                if (OneViewDcGlobalVariableInfo.IsAsyncDcSave == true) {
                                    OneViewDcGlobalVariableInfo.IsDcSaveAsyncTaskHandlerActive = false;
                                }

                                var LastUpdatedTime = new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds();
                                OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("AsyncOperationStatus", "All Changes Saved (Last Updated On " + LastUpdatedTime + ")");
                                OneViewDcGlobalVariableInfo.QueuedAttributeIdLst = [];
                                OneViewDcGlobalVariableInfo.QueuedActionNCRuleIdLst = [];

                                if (OneViewDcGlobalVariableInfo.IsDcModelModified == true && OneViewDcGlobalVariableInfo.IsDcOnDemandSaveEnabled == true) {
                                    MyInstance.Save();
                                }
                            },
                            error: function (sender, Request, textStatus, errorThrown) {

                                if (OneViewDcGlobalVariableInfo.IsDevelopementMode == true) {
                                    OneViewDcGlobalVariableInfo.DcSaveTrack[OneViewDcGlobalVariableInfo.DcSaveTrack.length - 1].EndTime = new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds();
                                    OneViewDcGlobalVariableInfo.DcSaveTrack[OneViewDcGlobalVariableInfo.DcSaveTrack.length - 1].Response = errorThrown;
                                    OneViewDcGlobalVariableInfo.DcSaveTrack[OneViewDcGlobalVariableInfo.DcSaveTrack.length - 1].Status = "Failed";
                                    OneViewDcGlobalVariableInfo.DcSaveTrack[OneViewDcGlobalVariableInfo.DcSaveTrack.length - 1].AttributeIds = OneViewDcGlobalVariableInfo.QueuedAttributeIdLst.toString();
                                    OneViewDcGlobalVariableInfo.DcSaveTrack[OneViewDcGlobalVariableInfo.DcSaveTrack.length - 1].ActionNCRuleIds = OneViewDcGlobalVariableInfo.QueuedActionNCRuleIdLst.toString();
                                }

                                if (OneViewDcGlobalVariableInfo.IsAsyncDcSave == true) {
                                    OneViewDcGlobalVariableInfo.IsDcSaveAsyncTaskHandlerActive = false;
                                }

                                var LastUpdatedTime = new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds();
                                OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("AsyncOperationStatus", "Error While Saving (Last Updated On " + LastUpdatedTime + ")");
                                //OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification("Error While Saving", 4);
                            },
                            sender: this
                        }

                        if (OneViewDcGlobalVariableInfo.IsDevelopementMode == true) {
                            OneViewDcGlobalVariableInfo.DcSaveTrack.push(
                                {
                                    "Id": "" + new Date().getHours() + new Date().getMinutes() + new Date().getSeconds(),
                                    "StartTime": new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds(),
                                    "EndTime": "",
                                    "Status": "On Progress",
                                    "Response": null,
                                    "AttributeIds": "",
                                    "ActionNCRuleIds": ""
                                }
                            );
                        }

                        _oWiNAiMAjax.execute(callBackparm);
                    }
                }
                else {
                    var LastUpdatedTime = new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds();
                    OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("AsyncOperationStatus", "All Changes Saved (Last Updated On " + LastUpdatedTime + ")");
                }
            }
            else {
                var LastUpdatedTime = new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds();
                OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("AsyncOperationStatus", "Saving...");
                OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("AsyncOperationStatus", "All Changes Saved Offline (Last Updated On " + LastUpdatedTime + ")");
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Save Draft
    /// </summary>    
    this.SaveDraft = function () {

        try {           
            if (navigator != undefined && navigator != null && navigator.onLine) {

                if (OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.length > 0 || OneViewDcGlobalVariableInfo.IsDcModelModified == true) {

                    var target = LoadingImage();

                    setTimeout(function () {

                        OneViewDcGlobalVariableInfo.IsAsyncDcSave = false;
                        MyInstance.Save();
                        OneViewDcGlobalVariableInfo.IsAsyncDcSave = true;

                        RemoveLoadingImage(target);

                        var Title = "Info";
                        var Content = "Inspection saved successfully";

                        var buttonsConfig = [{
                            Name: "Ok", EventHandler: function () {
                            }
                        }
                        ];
                        new OneViewMessageBox().ConfirmMessage(Title, Content, buttonsConfig);

                    }, 100);
                }
                else {
                    var Title = "Info";
                    var Content = "Inspection saved successfully";

                    var buttonsConfig = [{
                        Name: "Ok", EventHandler: function () {
                        }
                    }
                    ];
                    new OneViewMessageBox().ConfirmMessage(Title, Content, buttonsConfig);
                }
            }
            else {
                var LastUpdatedTime = new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds();
                OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("AsyncOperationStatus", "Saving...");
                OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("AsyncOperationStatus", "All Changes Saved Offline (Last Updated On " + LastUpdatedTime + ")");

                var Title = "Caution";
                var Content = "Please check your intenet connectivity and try again.";

                var buttonsConfig = [{
                    Name: "Ok", EventHandler: function () {
                    }
                }
                ];
                new OneViewMessageBox().ConfirmMessage(Title, Content, buttonsConfig);
            }            
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Submit
    /// </summary>    
    this.Submit = function () {

        try {
            if (OneViewDcGlobalVariableInfo.IsDcSaveAsyncTaskHandlerActive == false) {

                var Response = { IsSuccess: true, Message: "" };

                // Todo: Need to remove service id hard coding
                var ServiceId = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.ServiceId;
                if (ServiceId == 16) {
                    Response = new DcCustomMandatoryValidationComponent_3_16().Excecute();
                }

                if (Response.IsSuccess) {

                    if (navigator != undefined && navigator != null && navigator.onLine) {

                        var target = LoadingImage();
                        setTimeout(function () {

                            OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.IsCompleted = Response.IsSuccess;
                            OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.IsSubmit = Response.IsSuccess;

                            OneViewDcGlobalVariableInfo.IsDcModelModified = true;

                            // Todo: Need to remove service id hard coding
                            if (ServiceId == 16) {
                                new DcCustomScoringLogicComponent_3_16().Excecute();
                            }

                            OneViewDcGlobalVariableInfo.IsAsyncDcSave = false;
                            MyInstance.Save();
                            OneViewDcGlobalVariableInfo.IsAsyncDcSave = true;

                            RemoveLoadingImage(target);

                            // Todo: Need to remove service id hard coding
                            if (ServiceId == 16) {
                                window.localStorage.setItem("DcId", DCPageCriteria["DcId"]);
                                window.localStorage.removeItem("DCPageCriteria");
                                window.location.href = GetRelativeUrl("/DubaiFSCustom/AuditSaveSummary");
                            }
                        }, 100);
                    }
                    else {
                        var LastUpdatedTime = new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds();
                        OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("AsyncOperationStatus", "Saving...");
                        OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("AsyncOperationStatus", "All Changes Saved Offline (Last Updated On " + LastUpdatedTime + ")");

                        var Title = "Caution";
                        var Content = "Please check your intenet connectivity and try again.";

                        var buttonsConfig = [{
                            Name: "Ok", EventHandler: function () {
                            }
                        }
                        ];
                        new OneViewMessageBox().ConfirmMessage(Title, Content, buttonsConfig);
                    }
                }
                else {
                    OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification(Response.Message, 4);
                }
            }
            else {
                var Title = "Caution";
                var Content = "Updation on progress, Please try again.";

                var buttonsConfig = [{
                    Name: "Ok", EventHandler: function () {
                    }
                }
                ];
                new OneViewMessageBox().ConfirmMessage(Title, Content, buttonsConfig);
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
    
    /// <summary>
    ///  Get Save DataCapture Model Request
    /// </summary>    
    var GetSaveDataCaptureModelRequest = function () {

        try {
            var DataCaptureModelRequest = JSON.stringify(OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel);
            DataCaptureModelRequest = JSON.parse(DataCaptureModelRequest);

            if (OneViewDcGlobalVariableInfo.QueuedAttributeIdLst.length == 0) {

                OneViewDcGlobalVariableInfo.QueuedAttributeIdLst = JSON.stringify(OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst);
                OneViewDcGlobalVariableInfo.QueuedAttributeIdLst = JSON.parse(OneViewDcGlobalVariableInfo.QueuedAttributeIdLst);

                OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst = [];
            }
           
            if (OneViewDcGlobalVariableInfo.QueuedActionNCRuleIdLst.length == 0) {

                OneViewDcGlobalVariableInfo.QueuedActionNCRuleIdLst = JSON.stringify(OneViewDcGlobalVariableInfo.ModifiedActionNCRuleIdLst);
                OneViewDcGlobalVariableInfo.QueuedActionNCRuleIdLst = JSON.parse(OneViewDcGlobalVariableInfo.QueuedActionNCRuleIdLst);

                OneViewDcGlobalVariableInfo.ModifiedActionNCRuleIdLst = [];
            }

            for (var itr in DataCaptureModelRequest.DataCaptureDetailsModel) {

                if (OneViewDcGlobalVariableInfo.QueuedAttributeIdLst.indexOf(itr) == -1) {

                    delete DataCaptureModelRequest.DataCaptureDetailsModel[itr];
                }
            }

            if (DataCaptureModelRequest.ActionNCModel != null) {

                for (var itr in DataCaptureModelRequest.ActionNCModel.DCNCModel) {

                    if (OneViewDcGlobalVariableInfo.QueuedActionNCRuleIdLst.indexOf(parseInt(itr)) == -1) {

                        delete DataCaptureModelRequest.ActionNCModel.DCNCModel[parseInt(itr)];
                    }
                }
            }

            return DataCaptureModelRequest;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    ///  Update SaveDc Response
    /// </summary>    
    var UpdateSaveDcResponse = function (Reponse) {

        try {           
            if (Reponse != null && Reponse != "") {

                Reponse = JSON.parse(Reponse);

                if (Reponse.IsAnyException == false) {

                    var _oOnlineDCDefaultReponseDTO = Reponse.OnlineDCDefaultReponseDTO;

                    OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DcServerId = _oOnlineDCDefaultReponseDTO.DcId;
                    OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DcResultsServerId = _oOnlineDCDefaultReponseDTO.DcResultId;

                    if (_oOnlineDCDefaultReponseDTO.DCResultDetailsDefaultReponseDct != null) {

                        for (var itr in _oOnlineDCDefaultReponseDTO.DCResultDetailsDefaultReponseDct) {

                            var oDataCaptureDetailsModel = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DataCaptureDetailsModel[itr];

                            if (oDataCaptureDetailsModel != undefined) {

                                for (i = 0; i < oDataCaptureDetailsModel.Answers.length; i++) {

                                    for (var j = 0; j < _oOnlineDCDefaultReponseDTO.DCResultDetailsDefaultReponseDct[itr].length; j++) {

                                        if (oDataCaptureDetailsModel.Answers[i].ClientGuid == _oOnlineDCDefaultReponseDTO.DCResultDetailsDefaultReponseDct[itr][j].ClientGuid) {

                                            oDataCaptureDetailsModel.Answers[i].ServerId = _oOnlineDCDefaultReponseDTO.DCResultDetailsDefaultReponseDct[itr][j].DcResultDetailId;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    if (_oOnlineDCDefaultReponseDTO.DCNCModelDefaultReponseDct != null) {

                        var ActionNCModelDic = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.ActionNCModel.DCNCModel;

                        for (var itr in _oOnlineDCDefaultReponseDTO.DCNCModelDefaultReponseDct) {

                            if (ActionNCModelDic[itr] != undefined) {

                                ActionNCModelDic[itr].ActionServerId = _oOnlineDCDefaultReponseDTO.DCNCModelDefaultReponseDct[itr].ActionId;
                                ActionNCModelDic[itr].DNNCMappingServerId = _oOnlineDCDefaultReponseDTO.DCNCModelDefaultReponseDct[itr].DNNCMappingId;

                                var ActionModelDefaultReponseLst = _oOnlineDCDefaultReponseDTO.DCNCModelDefaultReponseDct[itr].ActionModelDefaultReponseLst;

                                if (ActionModelDefaultReponseLst != null) {

                                    for (var i = 0; i < ActionModelDefaultReponseLst.length; i++) {

                                        for (var j = 0; j < ActionNCModelDic[itr].Actions.length; j++) {

                                            if (ActionNCModelDic[itr].Actions[j].ActionDetailsClientGuid == ActionModelDefaultReponseLst[i].ActionDetailsClientGuid) {

                                                ActionNCModelDic[itr].Actions[j].ActionDetailsServerId = ActionModelDefaultReponseLst[i].ActionDetailsId;
                                            }
                                        }                                        
                                    }
                                }

                                var ActionMultiMediaDefaultReponseLst = _oOnlineDCDefaultReponseDTO.DCNCModelDefaultReponseDct[itr].ActionMultiMediaDefaultReponseLst;

                                if (ActionMultiMediaDefaultReponseLst != null) {

                                    for (var i = 0; i < ActionMultiMediaDefaultReponseLst.length; i++) {

                                        for (var j = 0; j < ActionNCModelDic[itr].ActionMultiMediaSubElements.length; j++) {

                                            if (ActionNCModelDic[itr].ActionMultiMediaSubElements[j].ClientGuid == ActionMultiMediaDefaultReponseLst[i].MultiMediaSubElementsClientGuid) {

                                                ActionNCModelDic[itr].ActionMultiMediaSubElements[j].ServerId = ActionMultiMediaDefaultReponseLst[i].MultiMediaSubElementsId;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    UpdateRequestParam(_oOnlineDCDefaultReponseDTO.DcId);
                }
                else {
                    //OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification("Server error", 4);
                    var LastUpdatedTime = new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds();
                    OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("AsyncOperationStatus", "Error While Saving (Last Updated On " + LastUpdatedTime + ")");
                }
            }
            else {
                //OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification("Error while saving", 4);
                var LastUpdatedTime = new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds();
                OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("AsyncOperationStatus", "Error While Saving (Last Updated On " + LastUpdatedTime + ")");
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    ///  Update eRequest Param
    /// </summary>    
    var UpdateRequestParam = function (DcId) {
       
        try {
            if (DCPageCriteria != null && DCPageCriteria != '') {
                DCPageCriteria["DcId"] = DcId;
                DCPageCriteria["DcViewContext"] = OneViewDcGlobalVariableInfo.DcViewContext.Edit;
                window.localStorage.setItem("DCPageCriteria", JSON.stringify(DCPageCriteria));
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    ///  Back
    /// </summary>    
    this.Back = function () {

        var Title = "Confirm Navigation";
        var Content = "Are you sure you want to leave this page?";
        if (OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.length > 0 || OneViewDcGlobalVariableInfo.IsDcModelModified == true) {
            Content = "Unsaved data will be lost. Are you sure you want to leave this page?";
        }

        var buttonsConfig = [{
            Name: "Leave this Page", EventHandler: function () {
                var target = LoadingImage();
                setTimeout(function () {
                    if (DCPageCriteria != null && DCPageCriteria != '') {
                        var BackNavigationURL = DCPageCriteria["BackNavigationURL"];
                        RemoveLoadingImage(target);
                        if (BackNavigationURL != undefined && BackNavigationURL != null && BackNavigationURL != '')
                            window.location.href = GetRelativeUrl(BackNavigationURL);
                    }
                }, 100);
            }
        }, {
                Name: "Stay on this page", EventHandler: function () {
                $("#id_ConfirmationMessage").modal('close');
           }
        }];
        new OneViewMessageBox().ConfirmMessage(Title, Content, buttonsConfig);        
    }
}

// DcDefaultAttributeComponent
function DcDefaultAttributeComponent(Context, AttributeId) {

    var MyInstance = this;    

    var AttributeConfig = null;    
    var AttributeModel = null;
    this.ActionNCUIComponentKey = "DcDefaultActionNCUIComponent";
    this.NAComponentKey = "DcDefaultNAComponent";
    this.BlockerComponentKey = "DcDefaultBlockerComponent";
    this.AttributeGroupHeaderClassName = "template-header";

    // Self invoking function (Constructor)
    (function () {
        if (Context == OneViewDcGlobalVariableInfo.DataCaptureContext.DC) {
            AttributeConfig = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.FormatedTemplateMetadata[AttributeId];
            AttributeModel = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DataCaptureDetailsModel[AttributeId];
        }
    }());
  
    /// <summary>
    /// Get Html
    /// </summary>
    /// <returns>Html</returns> 
    this.GetHtml = function (Req) {

        try {
            var Input_AttributeId = "'" + AttributeId + "'";

            var AnswerModeHtml = GetAnswerModeHtml();
            var SatusHtml = GetSatusHtml(Req);

            var AttributeNameStyle = '';

            if (AttributeConfig.FontColor != undefined && AttributeConfig.FontColor != "") {
                AttributeNameStyle += 'color:' + AttributeConfig.FontColor;
            }

            var IsHide = true;
            if (AttributeModel.OtherInfoModel != null) {
                for (var itranserMode in AttributeModel.OtherInfoModel) {
                    if (AttributeModel.OtherInfoModel[itranserMode].UIJobsModel.IsHide == false) {
                        IsHide = false;
                        break;
                    }
                }
            }

            if (IsHide == true) {
                MyInstance.Hide();
            }

            var NAHtml = '';
            var oNAComponent = OneViewDcGlobalVariableInfo.oDcFactory.GetNAComponent(Context, AttributeId, MyInstance.NAComponentKey);
            if (oNAComponent != null) {
                NAHtml = oNAComponent.GetHtml();
            }

            var BlockerHtml = '';
            var oBlockerComponent = OneViewDcGlobalVariableInfo.oDcFactory.GetBlockerComponent(Context, AttributeId, MyInstance.BlockerComponentKey);
            if (oNAComponent != null) {
                BlockerHtml = oBlockerComponent.GetHtml();
            }

            var NAAndNPClass = '';
            if (NAHtml != '' && BlockerHtml != '') {
                NAAndNPClass = 'na-np';
            }
            else if (NAHtml != '') {
                NAAndNPClass = 'na';
            }
            else if (BlockerHtml != '') {
                NAAndNPClass = 'np';
            }

            if (AttributeModel.IsNA == true) {
                OneViewDcGlobalVariableInfo.oDOM.AddClass("Container_" + AttributeId, 'na-disabled');
            }
            else if (AttributeModel.IsBlocker == true) {
                OneViewDcGlobalVariableInfo.oDOM.AddClass("Container_" + AttributeId, 'np-disabled');
            }

            if (OneViewDcGlobalVariableInfo.RequestParam.DcViewContext == OneViewDcGlobalVariableInfo.DcViewContext.Disable) {
                MyInstance.Disable();
            }

            var Html = '<div id="AttributeContainer_' + AttributeId + '">' +
                            '<div class="question ' + NAAndNPClass + '">' +
                                '<span style="' + AttributeNameStyle + '">' + AttributeConfig.Name + '</span>' +
                                '<a class="blue-grey-text darken-4 waves-effect waves-dark more-btn hide-on-med-and-up" onclick="new DcDefaultAttributeComponent(' + Context + ',' + Input_AttributeId + ').ToggleSatusBar()"><i class="small mdi mdi-unfold-more-horizontal" id="StatusBarIcon_' + AttributeId + '"></i></a>' +
                                NAHtml +
                                BlockerHtml +
                            '</div>' +
                            AnswerModeHtml +
                            SatusHtml +
                       '</div>';

            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Hide
    /// </summary>
    this.Hide = function () {

        try {
            OneViewDcGlobalVariableInfo.oDOM.Hide("Container_" + AttributeId);
            
            var Siblings = OneViewDcGlobalVariableInfo.oDOM.GetSiblings("Container_" + AttributeId);
            var IsHideParent = true;
           
            for (var i = 0; i < Siblings.length; i++) {

                if (Siblings[i].style.display == "" || Siblings[i].style.display == "block") {

                    IsHideParent = false;
                    break;
                }                
            }

            if (IsHideParent == true) {

                var _oChildObj = OneViewDcGlobalVariableInfo.oDOM.GetObjectById("Container_" + AttributeId);

                if (_oChildObj != null) {

                    var _oParentNodeObj = _oChildObj.parentNode;

                    if (_oParentNodeObj != null) {
                       
                        var IsPreviousSiblingExist = (_oParentNodeObj.previousSibling != null && _oParentNodeObj.previousSibling.className != MyInstance.AttributeGroupHeaderClassName) ? true : false;
                        var Sibling = _oParentNodeObj.previousSibling;

                        while (IsPreviousSiblingExist) {

                            if (Sibling.style != null && Sibling.style != "") {

                                if (Sibling.style.display == "" || Sibling.style.display == "block") {

                                    IsHideParent = false;
                                }
                            }

                            IsPreviousSiblingExist = (Sibling.previousSibling != null && Sibling.previousSibling.className != MyInstance.AttributeGroupHeaderClassName) ? true : false;
                            Sibling = Sibling.previousSibling;
                        }

                        var IsNextSiblingExist = (_oParentNodeObj.nextSibling != null) ? true : false;
                        var Sibling = _oParentNodeObj.nextSibling;

                        while (IsNextSiblingExist) {

                            if (Sibling.style != null && Sibling.style != "") {

                                if (Sibling.style.display == "" || Sibling.style.display == "block") {

                                    IsHideParent = false;
                                }
                            }

                            IsNextSiblingExist = (Sibling.nextSibling != null && Sibling.nextSibling.className != MyInstance.AttributeGroupHeaderClassName) ? true : false;
                            Sibling = Sibling.nextSibling;
                        }

                        if (IsHideParent == true) {

                            var _oParentNodeHeader = _oParentNodeObj.parentNode;

                            if (_oParentNodeHeader != null) {

                                if (_oParentNodeHeader.style != null && _oParentNodeHeader.style != "") {

                                    _oParentNodeHeader.style.display = "none";
                                }
                            }
                        }
                    }
                }
            }

            if (AttributeModel.OtherInfoModel != null) {
                for (var itranserMode in AttributeModel.OtherInfoModel) {
                    AttributeModel.OtherInfoModel[itranserMode].UIJobsModel.IsHide = true;
                }
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Show
    /// </summary>
    this.Show = function () {

        try {
            OneViewDcGlobalVariableInfo.oDOM.Show("Container_" + AttributeId);

            var Siblings = OneViewDcGlobalVariableInfo.oDOM.GetSiblings("Container_" + AttributeId);
            var IsShowParent = false;
           
            for (var i = 0; i < Siblings.length; i++) {

                if (Siblings[i].style.display == "" || Siblings[i].style.display == "block") {

                    IsShowParent = true;
                    break;
                }
            }

            if (IsShowParent == true) {

                var _oChildObj = OneViewDcGlobalVariableInfo.oDOM.GetObjectById("Container_" + AttributeId);

                if (_oChildObj != null) {

                    var _oParentNodeObj = _oChildObj.parentNode;

                    if (_oParentNodeObj != null) {

                        var IsPreviousSiblingExist = (_oParentNodeObj.previousSibling != null && _oParentNodeObj.previousSibling != MyInstance.AttributeGroupHeaderClassName) ? true : false;
                        var Sibling = _oParentNodeObj.previousSibling;

                        while (IsPreviousSiblingExist) {

                            if (Sibling.style != null && Sibling.style != "") {

                                if (Sibling.style.display == "" || Sibling.style.display == "block") {

                                    IsShowParent = true;
                                }
                            }

                            IsPreviousSiblingExist = (Sibling.previousSibling != null && Sibling.previousSibling.className != MyInstance.AttributeGroupHeaderClassName) ? true : false;
                            Sibling = Sibling.previousSibling;
                        }

                        var IsNextSiblingExist = (_oParentNodeObj.nextSibling != null) ? true : false;
                        var Sibling = _oParentNodeObj.nextSibling;

                        while (IsNextSiblingExist) {

                            if (Sibling.style != null && Sibling.style != "") {

                                if (Sibling.style.display == "" || Sibling.style.display == "block") {

                                    IsShowParent = true;
                                }
                            }

                            IsNextSiblingExist = (Sibling.nextSibling != null && Sibling.nextSibling.className != MyInstance.AttributeGroupHeaderClassName) ? true : false;
                            Sibling = Sibling.nextSibling;
                        }

                        if (IsShowParent == true) {

                            var _oParentNodeHeader = _oParentNodeObj.parentNode;

                            if (_oParentNodeHeader != null) {

                                if (_oParentNodeHeader.style != null && _oParentNodeHeader.style != "") {

                                    _oParentNodeHeader.style.display = "";
                                }
                            }
                        }
                    }
                }
            }

            if (AttributeModel.OtherInfoModel != null) {
                for (var itranserMode in AttributeModel.OtherInfoModel) {
                    AttributeModel.OtherInfoModel[itranserMode].UIJobsModel.IsHide = false;
                }
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Disable
    /// </summary>
    this.Disable = function () {

        try {
            OneViewDcGlobalVariableInfo.oDOM.RemoveClass("Container_" + AttributeId, 'na-disabled');
            OneViewDcGlobalVariableInfo.oDOM.RemoveClass("Container_" + AttributeId, 'np-disabled');
            OneViewDcGlobalVariableInfo.oDOM.AddClass("Container_" + AttributeId, 'disabled');
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Enable
    /// </summary>
    this.Enable = function () {

        try {
            OneViewDcGlobalVariableInfo.oDOM.RemoveClass("Container_" + AttributeId, 'disabled');
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Clear
    /// </summary>
    this.Clear = function () {

        try {
            for (var i = 0; i < AttributeConfig.AnswerModes.length; i++) {

                AttributeModel.IsModified = true;
                AttributeModel.Comments = "";
                new DcDefaultAnswerModeComponent(Context, AttributeId, AttributeConfig.AnswerModes[i].ControlId).Clear();
            }

            var oActionNCConfigList = OneViewDcGlobalVariableInfo.oDcActionNCComponent.GetActionNCConfig(AttributeId);

            if (oActionNCConfigList != null && oActionNCConfigList.length > 0) {

                for (var i = 0; i < oActionNCConfigList.length; i++) {

                    var _oDcDefaultActionNCUIComponent = new DcDefaultActionNCUIComponent();
                    _oDcDefaultActionNCUIComponent.DisableRule(oActionNCConfigList[i].RuleId);
                }
            }

            OneViewDcGlobalVariableInfo.IsDcModelModified = true;

            if (OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.indexOf(AttributeId) == -1) {
                OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.push(AttributeId);
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Refresh
    /// </summary>
    this.Refresh = function () {

        try {            
            for (var i = 0; i < AttributeConfig.AnswerModes.length; i++) {             
                new DcDefaultAnswerModeComponent(Context, AttributeId, AttributeConfig.AnswerModes[i].ControlId).Refresh();
            }           
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Toggle Satus Bar
    /// </summary>
    this.ToggleSatusBar = function () {

        try {            
            var _oStatusBarContainer = OneViewDcGlobalVariableInfo.oDOM.GetObjectById("StatusBarContainer_" + AttributeId);

            if (_oStatusBarContainer != null) {

                if (_oStatusBarContainer.className != null && _oStatusBarContainer.className.indexOf('hide-on-small-only') != -1) {
                    OneViewDcGlobalVariableInfo.oDOM.RemoveClass("StatusBarContainer_" + AttributeId, 'hide-on-small-only');
                    OneViewDcGlobalVariableInfo.oDOM.RemoveClass("StatusBarIcon_" + AttributeId, 'mdi-unfold-more-horizontal');
                    OneViewDcGlobalVariableInfo.oDOM.AddClass("StatusBarIcon_" + AttributeId, 'mdi-unfold-more-vertical');
                }
                else {
                    OneViewDcGlobalVariableInfo.oDOM.AddClass("StatusBarContainer_" + AttributeId, 'hide-on-small-only');
                    OneViewDcGlobalVariableInfo.oDOM.RemoveClass("StatusBarIcon_" + AttributeId, 'mdi-unfold-more-vertical');
                    OneViewDcGlobalVariableInfo.oDOM.AddClass("StatusBarIcon_" + AttributeId, 'mdi-unfold-more-horizontal');
                }
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get AnswerMode Html
    /// </summary>
    /// <returns>Html</returns> 
    var GetAnswerModeHtml = function () {

        try {
            var Html = "";

            for (var i = 0; i < AttributeConfig.AnswerModes.length; i++) {
                Html += new DcDefaultAnswerModeComponent(Context, AttributeId, AttributeConfig.AnswerModes[i].ControlId).GetHtml();
            }

            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Satus Html
    /// </summary>
    /// <returns>Html</returns> 
    var GetSatusHtml = function (Req) {

        try {
            var Html = "";

            if (Req == null || (Req != null && Req.IsStatusBarEnabled == true)) {

                var Input_AttributeId = "'" + AttributeId + "'";

                Html = '<div class="toolbar row hide-on-small-only" id="StatusBarContainer_' + AttributeId + '">';
                if (Req == null || (Req != null && Req.IsCommentsEnabled == true)) {
                    Html += '<div class="col">' +
                                //'<a onclick="new DcDefaultAttributeComponent(' + Context + ',' + Input_AttributeId + ').SetComments()" class="btn-flat waves-effect waves-light"><i class="mdi mdi-comment-text-outline"></i> <span class="hide-on-small-only">COMMENT</span></a>' +
                                '<a class="btn-flat waves-effect waves-light" onclick="new DcDefaultAttributeComponent(' + Context + ',' + Input_AttributeId + ').OpenCommentsPanel(' + OneViewDcGlobalVariableInfo.DefaulSidePanelClickContext.StatusBar + ')"><i class="mdi mdi-comment-text-outline"></i> <span class="hide-on-small-only">COMMENT</span></a>' +
                            '</div>';
                }
                if (Req == null || (Req != null && Req.IsActionEnabled == true)) {
                    Html += '<div class="col">' +
                                '<a href="#" class="btn-flat waves-effect waves-light" onclick="new DcDefaultAttributeComponent(' + Context + ',' + Input_AttributeId + ').OpenActionPanel(' + OneViewDcGlobalVariableInfo.DefaulSidePanelClickContext.StatusBar + ')"><i class="mdi mdi-format-list-bulleted"></i> <span class="hide-on-small-only">ACTION</span></a>' +
                            '</div>';
                }

                //'<div class="col">' +
                //    '<a href="#" class="btn-flat waves-effect waves-light"><i class="mdi mdi-file-image"></i> <span class="hide-on-small-only">MEDIA</span></a>' +
                //'</div>' +

                Html += '</div>';
            }

            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Open Comments Panel
    /// </summary>
    this.OpenCommentsPanel = function (SidePanelClickContext) {

        try {
            OneViewDcGlobalVariableInfo.CurrentAttributeId = AttributeId;
            var oSidePanelUIComponent = OneViewDcGlobalVariableInfo.oDcFactory.GetDefaultSidePanelUIComponent(OneViewDcGlobalVariableInfo.DefaulSidePanelContext.Comments, "DcDefaultSidePanelUIComponent");

            if (oSidePanelUIComponent != null) {

                oSidePanelUIComponent.SidePanelClickContext = SidePanelClickContext;
                oSidePanelUIComponent.AttributeId = AttributeId;
                oSidePanelUIComponent.Excecute();
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Open Action Panel
    /// </summary>
    this.OpenActionPanel = function (SidePanelClickContext) {

        try {
            OneViewDcGlobalVariableInfo.CurrentAttributeId = AttributeId;
            var ActionNCConfigLst = OneViewDcGlobalVariableInfo.oDcActionNCComponent.GetActionNCConfig(AttributeId);

            if (ActionNCConfigLst != null && ActionNCConfigLst.length > 0) {

                if (ActionNCConfigLst.length > 1) {
                    OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification("Action NC for multiple rules : Not implemented exception", 4);
                }
                else {
                    var obj = OneViewDcGlobalVariableInfo.oDcFactory.GetActionNCUIComponent(MyInstance.ActionNCUIComponentKey);

                    if (obj != null) {

                        obj.SidePanelClickContext = SidePanelClickContext;
                        obj.Excecute(ActionNCConfigLst);
                    }
                }
            }
            else {
                if (SidePanelClickContext == OneViewDcGlobalVariableInfo.DefaulSidePanelClickContext.Tab) {
                    var _oDcDefaultSidePanelUIComponent = new DcDefaultSidePanelUIComponent();
                    _oDcDefaultSidePanelUIComponent.Clear();
                }
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Set Comments
    /// </summary>   
    this.SetComments = function () {

        try {           
            var _otxtComments = OneViewDcGlobalVariableInfo.oDOM.GetObjectById("txtComments");

            if (_otxtComments != null) {

                var EnteredComments = _otxtComments.value;

                EnteredComments = OneViewDcGlobalVariableInfo.oDcSpecialCharacterValidationComponent.RemoveSpecialCharacters(EnteredComments);

                if (EnteredComments != null && AttributeModel.Comments != EnteredComments) {

                    AttributeModel.Comments = EnteredComments;
                    AttributeModel.IsModified = true;

                    for (var i = 0; i < AttributeModel.Answers.length; i++) {

                        if (AttributeModel.Answers[i].ClientGuid == "") {
                            AttributeModel.Answers[i].ClientGuid = OneViewDcGlobalVariableInfo.oDcClientGuidGenerationComponent.GetClientGuid();
                        }

                        AttributeModel.Answers[i].IsModified = true;
                    }

                    OneViewDcGlobalVariableInfo.IsDcModelModified = true;

                    if (OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.indexOf(AttributeId) == -1) {
                        OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.push(AttributeId);
                    }
                }             
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Is NA
    /// </summary>   
    this.IsNA = function () {

        try {
            return AttributeModel.IsNA;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Is Blocker
    /// </summary>   
    this.IsBlocker = function () {

        try {
            return AttributeModel.IsBlocker;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Summary
    /// </summary>   
    // ConsiderPendingAttributeScore = true => It will consider pending attribute score (Considers Only answered controls score under attribute)
    // ConsiderMaxScoreForPendingAttribute = true => It will consider max score for pending attribute (Only answered controls max score under attribute)
    this.GetSummary = function (TemplateNode, ConsiderPendingAttributeScore, ConsiderMaxScoreForPendingAttribute) {

        try {            
            if (TemplateNode.Childs.length == 0) {
                var AttributeSummary = GetAttributeSummary(TemplateNode, ConsiderPendingAttributeScore, ConsiderMaxScoreForPendingAttribute);
                return AttributeSummary.IsAnswered ? new SummaryResult(1, 1, AttributeSummary.Score, AttributeSummary.MaxScore, 1, 1, AttributeSummary.ESTTime, AttributeSummary.ActualTime) : new SummaryResult(0, 1, AttributeSummary.Score, AttributeSummary.MaxScore, 0, 1, AttributeSummary.ESTTime, AttributeSummary.ActualTime);
            }
            else {
                var CompletedCount = 0, Score = 0, MaxScore = 0, CompletedAttributeCount = 0, TotalAttributeCount = 0, ESTTime = 0, ActualTime = 0;
                var TotalCount = TemplateNode.Childs.length;

                for (var i = 0; i < TotalCount; i++) {

                    var Summary = MyInstance.GetSummary(TemplateNode.Childs[i], ConsiderPendingAttributeScore, ConsiderMaxScoreForPendingAttribute);

                    MaxScore += Summary.MaxScore;
                    Score += Summary.Score;

                    CompletedAttributeCount += Summary.CompletedAttributeCount;
                    TotalAttributeCount += Summary.TotalAttributeCount;

                    ESTTime += Summary.ESTTime;
                    ActualTime += Summary.ActualTime;

                    if (Summary.CompletedCount == Summary.TotalCount)
                        CompletedCount++;
                }

                UpdateScore(TemplateNode, Score, MaxScore, CompletedCount, TotalCount, CompletedAttributeCount, TotalAttributeCount, ESTTime, ActualTime);
                return new SummaryResult(CompletedCount, TotalCount, Score, MaxScore, CompletedAttributeCount, TotalAttributeCount, ESTTime, ActualTime);
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Set Comments
    /// </summary>   
    var SummaryResult = function (CompletedCount, TotalCount, Score, MaxScore, CompletedAttributeCount, TotalAttributeCount, ESTTime, ActualTime) {

        try {
            return {
                "CompletedCount": CompletedCount,
                "TotalCount": TotalCount,
                "Score": Score,
                "MaxScore": MaxScore,
                "Percentage": (MaxScore > 0) ? ((Score == MaxScore) ? 100 : ((Score / MaxScore) * 100).toFixed(2)) : 0,
                "CompletedAttributeCount": CompletedAttributeCount,
                "TotalAttributeCount": TotalAttributeCount,
                "ESTTime": ESTTime,
                "ActualTime": ActualTime
            };
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Set Comments
    /// </summary>   
    var GetAttributeSummary = function (TemplateNode, ConsiderPendingAttributeScore, ConsiderMaxScoreForPendingAttribute) {

        try {
            var AttributeModel = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DataCaptureDetailsModel[TemplateNode.Id];
            var AttributeConfig = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.FormatedTemplateMetadata[TemplateNode.Id];

            if (AttributeModel == undefined) {

                return { IsAnswered: false, Score: 0, MaxScore: (ConsiderMaxScoreForPendingAttribute == false ? GetMaxScore(TemplateNode.AnswerModes) : 0), ESTTime: 0, ActualTime: 0 };
            }

            if (AttributeModel.NA || AttributeModel.IsBlocker) {

                return { IsAnswered: true, Score: 0, MaxScore: 0, ESTTime: 0, ActualTime: 0 };
            }

            var Score = 0, IsPending = true, MaxScore = 0, ESTTime = 0, ActualTime = AttributeModel.ActualTime;

            for (var i = 0; i < AttributeModel.Answers.length; i++) {

                var AnswerModeConfig = AttributeConfig[AttributeModel.Answers[i].ControlId];

                Score += AttributeModel.Answers[i].Score;

                if (ConsiderMaxScoreForPendingAttribute == false || (ConsiderMaxScoreForPendingAttribute == true && AttributeModel.Answers[i].Answer != "")) {
                    MaxScore += AnswerModeConfig.MaxScore;
                    ESTTime += AttributeConfig.ESTTime;
                }
                //if (AttributeModel.Answers[i].Answer == "") {
                //    IsPending = false;
                //}

                //if (IsPending == true && AttributeModel.IsSubmitMandatoryExist == false) {
                    if (AttributeModel.Answers[i].Answer == "") {
                        IsPending = false;
                    }
                //} 
                // Need to check from TemplateConfig Metadata (SaveMandatoryInfo or SubmitMandatoryInfo for attribute answer status (Completed or pending))
                //else if (IsPending == true
                //    && AttributeModel.SubmitMandatoryInfo[AttributeModel.Answers[i].ControlId] != undefined
                //    && AttributeModel.SubmitMandatoryInfo[AttributeModel.Answers[i].ControlId].CurrentMandatoryStatus == false) {
                //    IsPending = false;
                //}
                //else if (IsPending == true
                //    && AttributeModel.SaveMandatoryInfo[AttributeModel.Answers[i].ControlId] != undefined
                //    && AttributeModel.SaveMandatoryInfo[AttributeModel.Answers[i].ControlId].CurrentMandatoryStatus == false) {
                //    IsPending = false;
                //}
            }

            if (ConsiderPendingAttributeScore) {
                return { "IsAnswered": IsPending, "Score": Score, "MaxScore": MaxScore, "ESTTime": ESTTime, "ActualTime": (IsPending ? ActualTime : 0) };
            }
            else {
                return { "IsAnswered": IsPending, "Score": (IsPending ? Score : 0), "MaxScore": MaxScore, "ESTTime": ESTTime, "ActualTime": (IsPending ? ActualTime : 0) };
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Set Comments
    /// </summary>   
    var GetMaxScore = function (Answermodes) {

        try {
            var MaxScore = 0;

            for (var i = 0; i < Answermodes.length; i++) {
                MaxScore += Answermodes[i].MaxScore;
            }

            return MaxScore;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get ESTTime
    /// </summary>   
    var GetESTTime = function (Answermodes) {

        try {
            var ESTTime = 0;

            for (var i = 0; i < Answermodes.length; i++) {
                ESTTime += Answermodes[i].ESTTime;
            }

            return ESTTime;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

     /// <summary>
    /// Update Score
    /// </summary>  
    var UpdateScore = function (TemplateNode, Score, MaxScore, CompletedCount, TotalCount, CompletedAttributeCount, TotalAttributeCount, ESTTime, ActualTime) {

        try {
            var AttributeModel = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DataCaptureDetailsModel[TemplateNode.Id];

            if (AttributeModel != undefined) {
                AttributeModel.Answers[0].Score = Score;
                AttributeModel.Answers[0].MaxScore = MaxScore;
                AttributeModel.Answers[0].Percentage = (MaxScore > 0) ? ((Score / MaxScore) * 100).toFixed(2) : 0;
                AttributeModel.Answers[0].CompletedChildCount = CompletedCount;
                AttributeModel.Answers[0].TotalChildCount = TotalCount;
                AttributeModel.Answers[0].CompletedAttributeCount = CompletedAttributeCount;
                AttributeModel.Answers[0].TotalAttributeCount = TotalAttributeCount;
                if (ESTTime > 0) {
                    AttributeModel.ESTTime = ESTTime;
                    AttributeModel.ActualTime = ActualTime;
                }
                AttributeModel.Answers[0].IsModified = true;
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DcDefaultAnswerModeComponent
function DcDefaultAnswerModeComponent(Context, AttributeId, ControlId) {

    var MyInstance = this;

    this.AttributeConfig = null;
    this.AnswerModeConfig = null;
    this.AttributeModel = null;
    var AnswerModeComponent = null;
    this.ActionNCUIComponentKey = "DcDefaultActionNCUIComponent";
    this.ScoringLogicComponentKey = "DcDefaultScoringLogicComponent";

    // Self invoking function (Constructor)
    (function () {
        if (Context == OneViewDcGlobalVariableInfo.DataCaptureContext.DC) {
           
            MyInstance.AttributeConfig = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.FormatedTemplateMetadata[AttributeId];
            MyInstance.AnswerModeConfig = MyInstance.AttributeConfig[ControlId];
            MyInstance.AttributeModel = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DataCaptureDetailsModel[AttributeId];

            // Because of supporting existing configured templates
            if (MyInstance.AnswerModeConfig.Type == "DCTextBoxControlConfig" &&
                (MyInstance.AnswerModeConfig.DataType == "DATETIMELOCAL" ||
                MyInstance.AnswerModeConfig.DataType == "DATE" ||
                MyInstance.AnswerModeConfig.DataType == "DATETIME" ||
                MyInstance.AnswerModeConfig.DataType == "TIME" ||
                MyInstance.AnswerModeConfig.DataType == "MONTHYEAR")
                ) {
                AnswerModeComponent = OneViewDcGlobalVariableInfo.oDcFactory.GetAnswerModeComponent(Context, AttributeId, ControlId, "DCDateTimeControlConfig");
            }
            else {
                AnswerModeComponent = OneViewDcGlobalVariableInfo.oDcFactory.GetAnswerModeComponent(Context, AttributeId, ControlId, MyInstance.AnswerModeConfig.Type);
            }

            if (AnswerModeComponent != null) {
                AnswerModeComponent.oDcDefaultAnswerModeComponent = MyInstance;
            }
        }
    }());

    /// <summary>
    /// Get Html
    /// </summary>
    /// <returns>Html</returns> 
    this.GetHtml = function () {

        try {
            var Html = '';
           
            if (AnswerModeComponent != null) {
                Html = AnswerModeComponent.GetHtml();
            }

            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {            
        }
    }

    /// <summary>
    /// Set
    /// </summary>
    /// <param name="DOMObj">DOMObj</param>  
    /// <param name="Answer">Answer</param>  
    /// <param name="AnswerValue">AnswerValue</param>  
    this.Set = function (DOMObj, Answer, AnswerValue) {

        try {
            OneViewDcGlobalVariableInfo.CurrentAttributeId = AttributeId;
            OneViewDcGlobalVariableInfo.CurrentControlId = ControlId;

            if (AnswerModeComponent != null) {

                var Response = AnswerModeComponent.Set(DOMObj, Answer, AnswerValue);

                if (Response.IsModified == true) {

                    var _oDcTemplateUIEventJobComponent = new DcTemplateUIEventJobComponent(Context, AttributeId, ControlId);
                    _oDcTemplateUIEventJobComponent.ExcecutePostControlUIJobs();
                    
                    var ActionNCConfigLst = OneViewDcGlobalVariableInfo.oDcActionNCComponent.GetActionNCConfig(AttributeId);

                    if (ActionNCConfigLst != null && ActionNCConfigLst.length > 0) {

                        var obj = OneViewDcGlobalVariableInfo.oDcFactory.GetActionNCUIComponent(MyInstance.ActionNCUIComponentKey);

                        if (obj != null) {

                            obj.SidePanelClickContext = (MyInstance.AnswerModeConfig.Type == "DCListViewControlConfig" &&
                                (MyInstance.AnswerModeConfig.ListViewDisplay == 4 || MyInstance.AnswerModeConfig.ListViewDisplay == 5))
                                ? OneViewDcGlobalVariableInfo.DefaulSidePanelClickContext.Tab
                                : 0;

                            obj.Excecute(ActionNCConfigLst);
                        }
                    }
                    else {                        
                        if (MyInstance.AnswerModeConfig.Type == "DCTextBoxControlConfig" ||
                            MyInstance.AnswerModeConfig.Type == "DCNumericTextBoxControlConfig" ||
                            MyInstance.AnswerModeConfig.Type == "DCDateTimeControlConfig"
                        ) {                           
                            if (OneViewDcGlobalVariableInfo.DcSaveLastTimeOutId != null)
                                clearTimeout(OneViewDcGlobalVariableInfo.DcSaveLastTimeOutId);

                            OneViewDcGlobalVariableInfo.DcSaveLastTimeOutId = setTimeout(function () {

                                OneViewDcGlobalVariableInfo.IsDcModelModified = Response.IsModified;

                                if (OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.indexOf(AttributeId) == -1) {
                                    OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.push(AttributeId);
                                }

                                if (OneViewDcGlobalVariableInfo.IsDcOnDemandSaveEnabled == true)
                                    oOneViewGlobalDataCaptureComponent.Save();
                            }, 1000);
                        }
                        else {
                            OneViewDcGlobalVariableInfo.IsDcModelModified = Response.IsModified;

                            if (OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.indexOf(AttributeId) == -1) {
                                OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.push(AttributeId);
                            }

                            if (OneViewDcGlobalVariableInfo.IsDcOnDemandSaveEnabled == true)
                                oOneViewGlobalDataCaptureComponent.Save();
                        }
                    }
                }
            }           
        }
        catch (Excep) {
            throw Excep;
        }
        finally {            
        }
    }

    /// <summary>
    /// Clear
    /// </summary>
    this.Clear = function () {

        try {
            var AttributeModel = MyInstance.AttributeModel;

            for (var i = 0; i < AttributeModel.Answers.length; i++) {

                if (AttributeModel.Answers[i].ClientGuid == "") {
                    AttributeModel.Answers[i].ClientGuid = OneViewDcGlobalVariableInfo.oDcClientGuidGenerationComponent.GetClientGuid();
                }

                if (AttributeModel.Answers[i].ControlId == ControlId && AttributeModel.Answers[i].Answer != "") {

                    AttributeModel.Answers[i].Answer = "";
                    AttributeModel.Answers[i].AnswerValue = "";
                    AttributeModel.Answers[i].Comments = "";
                    AttributeModel.Answers[i].Score = 0;
                    AttributeModel.Answers[i].MaxScore = 0;
                    AttributeModel.Answers[i].Percentage = 0;
                    AttributeModel.Answers[i].CompletedChildCount = 0;
                    AttributeModel.Answers[i].TotalChildCount = 0;
                    AttributeModel.Answers[i].CompletedAttributeCount = 0;
                    AttributeModel.Answers[i].TotalAttributeCount = 0;
                    
                    if (AnswerModeComponent != null) {
                        AnswerModeComponent.Clear();
                    }
                }

                AttributeModel.Answers[i].IsModified = true;
            }

            AttributeModel.IsModified = true;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Refresh
    /// </summary>
    this.Refresh = function () {

        try {
            MyInstance.Clear();
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Load
    /// </summary>
    this.Load = function () {

        try {            
            if (AnswerModeComponent != null) {
                AnswerModeComponent.Load();
            }
        }
        catch (Excep) {
        }
        finally {
        }
    }

    /// <summary>
    /// Search
    /// </summary>
    this.Search = function (SearchValue) {

        try {
            if (AnswerModeComponent != null) {
                AnswerModeComponent.Search(SearchValue);
            }
        }
        catch (Excep) {
        }
        finally {
        }
    }

    /// <summary>
    /// Update Answer And AnswerValue
    /// </summary>
    /// <param name="Answer">Answer</param>  
    /// <param name="AnswerValue">AnswerValue</param>  
    this.UpdateAnswerAndAnswerValue = function (Answer, AnswerValue) {

        try {
            var Response = { IsModified: false };

            var AttributeModel = MyInstance.AttributeModel;

            for (var i = 0; i < AttributeModel.Answers.length; i++) {

                if (AttributeModel.Answers[i].ControlId == ControlId && AttributeModel.Answers[i].Answer != Answer) {

                    if (AttributeModel.Answers[i].ClientGuid == "") {
                        AttributeModel.Answers[i].ClientGuid = OneViewDcGlobalVariableInfo.oDcClientGuidGenerationComponent.GetClientGuid();
                    }

                    AttributeModel.Answers[i].Answer = Answer;
                    AttributeModel.Answers[i].AnswerValue = AnswerValue;
                    AttributeModel.Answers[i].IsModified = true;
                    
                    //MyInstance.UpdateScore(AttributeModel.Answers[i]);
                    
                    Response.IsModified = true;
                }
            }

            AttributeModel.IsModified = Response.IsModified;

            return Response;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Update Answer And AnswerValue For Multi Select
    /// </summary>
    /// <param name="Answer">Answer</param>  
    /// <param name="AnswerValue">AnswerValue</param>  
    this.UpdateAnswerAndAnswerValueForMultiSelect = function (Answer, AnswerValue) {

        try {
            var Response = { IsModified: false };

            var AttributeModel = MyInstance.AttributeModel;
            var oNewAnswer = JSON.stringify(AttributeModel.Answers[0]);
            oNewAnswer = JSON.parse(oNewAnswer);
            var IsNewAnswer = true;
            
            for (var i = 0; i < AttributeModel.Answers.length; i++) {

                if (AttributeModel.Answers.length == 1 && AttributeModel.Answers[i].ControlId == ControlId && AttributeModel.Answers[i].Answer == "") {

                    if (AttributeModel.Answers[i].ClientGuid == "") {
                        AttributeModel.Answers[i].ClientGuid = OneViewDcGlobalVariableInfo.oDcClientGuidGenerationComponent.GetClientGuid();
                    }

                    AttributeModel.Answers[i].IndexId = 0;
                    AttributeModel.Answers[i].IsMulti = true;
                    AttributeModel.Answers[i].Answer = Answer;
                    AttributeModel.Answers[i].AnswerValue = AnswerValue;
                    AttributeModel.Answers[i].IsDisable = false;
                    AttributeModel.Answers[i].IsModified = true;

                    //MyInstance.UpdateScore(AttributeModel.Answers[i]);

                    Response.IsModified = true;

                    IsNewAnswer = false;
                    break;
                }
                else if (AttributeModel.Answers[i].ControlId == ControlId && AttributeModel.Answers[i].Answer == Answer) {
                   
                    AttributeModel.Answers[i].IsMulti = true;
                    AttributeModel.Answers[i].Answer = Answer;
                    AttributeModel.Answers[i].AnswerValue = AnswerValue;
                    AttributeModel.Answers[i].IsDisable = !(AttributeModel.Answers[i].IsDisable);
                    AttributeModel.Answers[i].IsModified = true;

                    //MyInstance.UpdateScore(AttributeModel.Answers[i]);

                    Response.IsModified = true;

                    IsNewAnswer = false;
                    break;
                }                
            }

            if (IsNewAnswer == true) {
                for (var i = 0; i < AttributeModel.Answers.length; i++) {

                    if (AttributeModel.Answers[i].ControlId == ControlId && AttributeModel.Answers[i].Answer == "") {

                        AttributeModel.Answers[i].IsMulti = true;
                        AttributeModel.Answers[i].Answer = Answer;
                        AttributeModel.Answers[i].AnswerValue = AnswerValue;
                        AttributeModel.Answers[i].IsDisable = false;
                        AttributeModel.Answers[i].IsModified = true;

                        //MyInstance.UpdateScore(AttributeModel.Answers[i]);

                        Response.IsModified = true;

                        IsNewAnswer = false;
                        break;
                    }
                }
            }

            if (IsNewAnswer == true) {

                oNewAnswer.ServerId = 0;
                oNewAnswer.ClientId = 0;

                oNewAnswer.ClientGuid = OneViewDcGlobalVariableInfo.oDcClientGuidGenerationComponent.GetClientGuid();

                oNewAnswer.Answer = Answer;
                oNewAnswer.AnswerValue = AnswerValue;
                oNewAnswer.IndexId = GetNextIndexId(AttributeModel.Answers);
                oNewAnswer.IsMulti = true;

                oNewAnswer.IsModified = true;
                oNewAnswer.IsDisable = false;

                AttributeModel.Answers.push(oNewAnswer);

                //MyInstance.UpdateScore(AttributeModel.Answers[i]);

                Response.IsModified = true;
            }

            AttributeModel.IsModified = Response.IsModified;
          
            return Response;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Update Score
    /// </summary>
    /// <param name="Answer">Answer</param>  
    /// <param name="AnswerValue">AnswerValue</param>  
    this.UpdateScore = function (oAnswerMode) {

        try {
            //var ScoreSummary = null;
            
            //if (OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.TemplateConfigMetaData.IsScoringLogicEnabled == true &&
            //    OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.TemplateConfigMetaData.ScoringLogicType == 1                
            //) {
            //    var _oScoringLogicComponent = OneViewDcGlobalVariableInfo.oDcFactory.GetScoringLogicComponent(this.ScoringLogicComponentKey);
            //    _oScoringLogicComponent.oDcDefaultAnswerModeComponent = MyInstance;

            //    ScoreSummary = _oScoringLogicComponent.GetScore(Context, AttributeId, ControlId, oAnswerMode.Answer);

            //    if (ScoreSummary != null) {

            //        oAnswerMode.Score = ScoreSummary.Score;
            //        oAnswerMode.MaxScore = ScoreSummary.MaxScore;
            //        oAnswerMode.Percentage = ScoreSummary.Percentage;
            //        oAnswerMode.CompletedChildCount = ScoreSummary.CompletedCount;
            //        oAnswerMode.TotalChildCount = ScoreSummary.TotalCount;
            //        oAnswerMode.CompletedAttributeCount = ScoreSummary.CompletedAttributeCount;
            //        oAnswerMode.TotalAttributeCount = ScoreSummary.TotalAttributeCount;
            //    }
               
            //    var oAttributeGroupComponent = new DcDefaultAttributeComponent(Context, AttributeId);
            //    var Summary = oAttributeGroupComponent.GetSummary(OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.TemplateConfigMetaData.TemplateConfigMetaDataDetails, true, true);

            //    var DataCaptureModel = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel;
            //    DataCaptureModel.Score = Summary.Score;
            //    DataCaptureModel.MaxScore = Summary.MaxScore;
            //    DataCaptureModel.Percentage = Summary.Percentage;
            //    DataCaptureModel.CompletedChildCount = Summary.CompletedCount;
            //    DataCaptureModel.TotalChildCount = Summary.TotalCount;
            //    DataCaptureModel.CompletedAttributeCount = Summary.CompletedAttributeCount;
            //    DataCaptureModel.TotalAttributeCount = Summary.TotalAttributeCount;
            //}           
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Next IndexId
    /// </summary>
    /// <param name="AnswersLst">AnswersLst</param>
    /// <param name="IndexId">IndexId</param>
    var GetNextIndexId = function (AnswersLst) {

        try {            
            var IndexId = Math.max.apply(Math, AnswersLst.map(function (o) { return o.IndexId; }));

            return ++IndexId;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Answer
    /// </summary>
    /// <returns>Answer</returns>  
    this.GetAnswer = function () {

        try {            
            var Answer = "";
           
            var AttributeModel = MyInstance.AttributeModel;

            for (var i = 0; i < AttributeModel.Answers.length; i++) {

                if (AttributeModel.Answers[i].ControlId == ControlId && AttributeModel.Answers[i].IsDisable == false) {

                    Answer = AttributeModel.Answers[i].Answer;
                    break;
                }
            }

            return Answer;          
        }
        catch (Excep) {
        }
        finally {
        }
    }

    /// <summary>
    /// Get Answer List
    /// </summary>
    /// <returns>Answer List</returns>  
    this.GetAnswerList = function () {

        try {            
            var AnswerList = [];
            
            var AttributeModel = MyInstance.AttributeModel;

            for (var i = 0; i < AttributeModel.Answers.length; i++) {

                if (AttributeModel.Answers[i].ControlId == ControlId && AttributeModel.Answers[i].IsDisable == false) {

                    AnswerList.push(parseInt(AttributeModel.Answers[i].Answer));                    
                }
            }

            return AnswerList;
        }
        catch (Excep) {
        }
        finally {
        }
    }
}

// DcDefaultTextBoxAnswerModeComponent
function DcDefaultTextBoxAnswerModeComponent(Context, AttributeId, ControlId) {

    var MyInstance = this;
    this.oDcDefaultAnswerModeComponent = null;

    /// <summary>
    /// Get Html
    /// </summary>
    /// <returns>Html</returns> 
    this.GetHtml = function () {

        try {            
            var Answer = "";
            var AttributeModel = MyInstance.oDcDefaultAnswerModeComponent.AttributeModel;
            var AnswerModeConfig = MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig;

            var PlaceHolderText = (AnswerModeConfig.LabelKey != null && AnswerModeConfig.LabelKey != "") ? AnswerModeConfig.LabelKey : "Please enter";

            if (AttributeModel.IsNA != true && AttributeModel.IsBlocker != true) {

                for (var i = 0; i < AttributeModel.Answers.length; i++) {

                    if (AttributeModel.Answers[i].ControlId == ControlId) {
                        Answer = AttributeModel.Answers[i].Answer;
                        break;
                    }
                }
            }

            var Input_AttributeId = "'" + AttributeId + "'";
            var Input_ControlId = "'" + ControlId + "'";

            var Html = '<div class="row responsive-sm no-margin ans-mode" id="AnswerModeContainer_' + ControlId + '">'+
                            '<div class="col no-padding">'+
                                '<div class="input-field no-margin">'+
                '<input class="no-margin" type="' + GetInputType(MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig.DataType) + '" value="' + Answer + '" id="' + ControlId + '" oninput="new DcDefaultAnswerModeComponent(' + Context + ',' + Input_AttributeId + ',' + Input_ControlId + ').Set(this)" placeHolder="' + PlaceHolderText + '"/>' +
                                '</div>'+
                            '</div>'+
                       '</div>';

            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Set
    /// </summary>
    /// <param name="DOMObj">DOMObj</param>   
    /// <param name="Answer">Answer</param>  
    /// <param name="AnswerValue">AnswerValue</param>  
    this.Set = function (DOMObj, Answer, AnswerValue) {

        try {
            var Response = { IsModified: false };

            var AttributeModel = MyInstance.oDcDefaultAnswerModeComponent.AttributeModel;

            if (DOMObj != null && Answer == undefined) {
                Answer = DOMObj.value;
            }
            else {
                Answer = Answer;
            }

            if (Answer != "") {
                Answer = OneViewDcGlobalVariableInfo.oDcSpecialCharacterValidationComponent.RemoveSpecialCharacters(Answer);
            }

            Response = MyInstance.oDcDefaultAnswerModeComponent.UpdateAnswerAndAnswerValue(Answer, "");

            return Response;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {            
        }
    }

    /// <summary>
    /// Clear
    /// </summary>
    this.Clear = function () {

        try {
            OneViewDcGlobalVariableInfo.oDOM.Clear(ControlId);
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Get InputType
    /// </summary>
    /// <param name="DataType">DataType</param>    
    /// <returns>InputType</returns> 
    var GetInputType = function (DataType) {

        try {           
            switch (DataType) {
                case "STRING": return "text";
                case "INTEGER": return "tel";
                case "TIME": return "time";
                case "DATE": return "date";
                case "DATETIME": return "datetime";
                case "DATETIMELOCAL": return "datetime-local";
                case "MONTHYEAR": return "month";
                case "PASSWORD": return "password";
                default: return "text";
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DcDefaultNumericTextBoxAnswerModeComponent
function DcDefaultNumericTextBoxAnswerModeComponent(Context, AttributeId, ControlId) {

    var MyInstance = this;
    this.oDcDefaultAnswerModeComponent = null;

    /// <summary>
    /// Get Html
    /// </summary>
    /// <returns>Html</returns> 
    this.GetHtml = function () {

        try {           
            var Answer = "";
            var AttributeModel = MyInstance.oDcDefaultAnswerModeComponent.AttributeModel;
            var AnswerModeConfig = MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig;

            var PlaceHolderText = (AnswerModeConfig.LabelKey != null && AnswerModeConfig.LabelKey != "") ? AnswerModeConfig.LabelKey : "Please enter";

            if (AttributeModel.IsNA != true && AttributeModel.IsBlocker != true) {

                for (var i = 0; i < AttributeModel.Answers.length; i++) {

                    if (AttributeModel.Answers[i].ControlId == ControlId) {
                        Answer = AttributeModel.Answers[i].Answer;
                        break;
                    }
                }
            }

            var Input_AttributeId = "'" + AttributeId + "'";
            var Input_ControlId = "'" + ControlId + "'";

            var Html = '<div class="row responsive-sm no-margin ans-mode" id="AnswerModeContainer_' + ControlId + '">' +
                           '<div class="col no-padding">' +
                               '<div class="input-field no-margin">' +
                '<input class="no-margin" type="tel" value="' + Answer + '" id="' + ControlId + '" oninput="new DcDefaultAnswerModeComponent(' + Context + ',' + Input_AttributeId + ',' + Input_ControlId + ').Set(this)" placeHolder="' + PlaceHolderText + '"/>' +
                                '</div>' +
                            '</div>' +
                       '</div>';

            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Set
    /// </summary>
    /// <param name="DOMObj">DOMObj</param>   
    /// <param name="Answer">Answer</param>  
    /// <param name="AnswerValue">AnswerValue</param>  
    this.Set = function (DOMObj, Answer, AnswerValue) {

        try {
            var Response = { IsModified: false };
            var AttributeModel = MyInstance.oDcDefaultAnswerModeComponent.AttributeModel;

            if (DOMObj != null && Answer == undefined) {
                Answer = DOMObj.value;
            }
            else {
                Answer = Answer;
            }

            if (Answer != "") {
                Answer = Validate(DOMObj);
            }

            Response = MyInstance.oDcDefaultAnswerModeComponent.UpdateAnswerAndAnswerValue(Answer, "");

            return Response;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Clear
    /// </summary>
    this.Clear = function () {

        try {
            OneViewDcGlobalVariableInfo.oDOM.Clear(ControlId);
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Validate
    /// </summary>
    /// <param name="DOMObj">DOMObj</param>   
    var Validate = function (DOMObj) {

        try {
            var Format = MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig.Format;

            if (Format == undefined || Format == null && Format == "") {

                var value = DOMObj.value;
                value = value.replace(/\s/g, '');
                value = value.replace(/[^ 0-9]/g, '');
                value = value.trim();

                DOMObj.value = value;

                return value;
            }
            else {

                var value = DOMObj.value;
                value = value.replace(/\s/g, '');
                value = value.replace(/[^- 0-9 .]/g, '');
                if (value.split(".").length - 1 > 1) {
                    value = value.substring(0, value.length - 1);
                }
                else if (value.split("-").length - 1 > 1) {
                    value = value.substring(0, value.length - 1);
                }
                else if (value.indexOf("-") > 0) {
                    value = value.substring(0, value.length - 1);
                }

                //todo:need make it dynamic with reg exp.(its a temp solution)
                if (Format != undefined && Format != null && Format != "") {
                    if (Format == '#.#') {
                        if (value != undefined && value != "" && value.indexOf('.') != -1) {
                            var temp = value.split('.');
                            if (temp[1].length > 1) {
                                value = value.substring(0, value.length - 1);
                            }
                            if (temp[0].length == 0) {
                                value = "0" + value;
                            }
                            if (temp[0].length == 1) {
                                if (temp[0] == "-") {
                                    value = temp[0] + "0." + temp[1];
                                }
                            }

                        }
                    }
                }

                value = value.trim();
                DOMObj.value = value;

                return value;
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DcDefaultDateTimeAnswerModeComponent
function DcDefaultDateTimeAnswerModeComponent(Context, AttributeId, ControlId) {

    var MyInstance = this;
    this.oDcDefaultAnswerModeComponent = null;

    /// <summary>
    /// Get Html
    /// </summary>
    /// <returns>Html</returns> 
    this.GetHtml = function () {

        try {
            var Answer = "";
            var AttributeModel = MyInstance.oDcDefaultAnswerModeComponent.AttributeModel;

            if (AttributeModel.IsNA != true && AttributeModel.IsBlocker != true) {

                for (var i = 0; i < AttributeModel.Answers.length; i++) {

                    if (AttributeModel.Answers[i].ControlId == ControlId) {
                        Answer = AttributeModel.Answers[i].Answer;
                        break;
                    }
                }
            }

            if (Answer != "") {
                Answer = GetFormatedValueForUI(Answer);
            }

            var Input_AttributeId = "'" + AttributeId + "'";
            var Input_ControlId = "'" + ControlId + "'";

            var Html = '<div class="row responsive-sm no-margin ans-mode" id="AnswerModeContainer_' + ControlId + '">' +
                             '<div class="col no-padding">' +
                                '<div class="input-field no-margin">' +
                                     '<i class="mdi mdi-calendar-clock prefix"></i>' +
                                     '<input class="datepicker no-margin-bottom" type="' + GetInputType(MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig.DataType) + '" value="' + Answer + '" id="' + ControlId + '" oninput="new DcDefaultAnswerModeComponent(' + Context + ',' + Input_AttributeId + ',' + Input_ControlId + ').Set(this)"/>' +
                                '</div>' +
                            '</div>' +
                       '</div>';

            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Set
    /// </summary>
    /// <param name="DOMObj">DOMObj</param>   
    /// <param name="Answer">Answer</param>  
    /// <param name="AnswerValue">AnswerValue</param>  
    this.Set = function (DOMObj, Answer, AnswerValue) {

        try {
            var Response = { IsModified: false };
            var AttributeModel = MyInstance.oDcDefaultAnswerModeComponent.AttributeModel;

            if (DOMObj != null && Answer == undefined) {
                Answer = DOMObj.value;
            }
            else {
                Answer = Answer;
            }

            if (Answer != "") {
                Answer = GetFormatedValue(DOMObj);
            }

            Response = MyInstance.oDcDefaultAnswerModeComponent.UpdateAnswerAndAnswerValue(Answer, "");

            return Response;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Clear
    /// </summary>
    this.Clear = function () {

        try {
            OneViewDcGlobalVariableInfo.oDOM.Clear(ControlId);
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Get InputType
    /// </summary>
    /// <param name="DataType">DataType</param>    
    /// <returns>InputType</returns> 
    var GetInputType = function (DataType) {

        try {
            switch (DataType) {                
                case "TIME": return "time";
                case "DATE": return "date";
                case "DATETIME": return "datetime";
                case "DATETIMELOCAL": return "datetime-local";
                case "MONTHYEAR": return "month";               
                default: return "DATETIMELOCAL";
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Formated Value
    /// </summary>
    /// <param name="DOMObj">DOMObj</param>
    /// <returns>Formated Value</returns> 
    var GetFormatedValue = function (DOMObj) {

        try {            
            var DataType = MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig.DataType;
            var Answer = DOMObj.value;

            if (DataType == "DATETIMELOCAL") {
                if (DOMObj != null && DOMObj.value.indexOf('T') != -1) {
                    var DateTime = DOMObj.value.split('T');
                    var Date = DateTime[0].split('-');
                    Answer = Date[2] + "-" + Date[1] + "-" + Date[0] + " " + DateTime[1] + ":00";
                }
            }
            else if (DataType == "DATE") {
                if (DOMObj != null && DOMObj.value.indexOf('-') != -1) {
                    var Date = DOMObj.value.split('-');
                    Answer = Date[2] + "-" + Date[1] + "-" + Date[0];
                }
            }
            else if (DataType == "MONTHYEAR") {
                if (DOMObj != null && DOMObj.value.indexOf('-') != -1) {
                    var Date = DOMObj.value.split('-');
                    Answer = Date[1] + "-" + Date[0];
                }
            }

            return Answer;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Formated Value For UI
    /// </summary>
    /// <param name="DOMObj">DOMObj</param>
    /// <returns>Formated Value</returns> 
    var GetFormatedValueForUI = function (Answer) {

        try {
            var DataType = MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig.DataType;

            if (DataType == "DATETIMELOCAL") {
                if (Answer != "" && Answer.indexOf(' ') != -1) {
                    var DateTime = Answer.split(' ');
                    var Date = DateTime[0].split('-');
                    Answer = Date[2] + "-" + Date[1] + "-" + Date[0] + "T" + DateTime[1];
                }
            }
            else if (DataType == "DATE") {
                if (Answer != "" && Answer.indexOf('-') != -1) {
                    var Date = Answer.split('-');
                    Answer = Date[2] + "-" + Date[1] + "-" + Date[0];
                }
            }
            else if (DataType == "MONTHYEAR") {
                if (Answer != "" && Answer.indexOf('-') != -1) {
                    var Date = Answer.split('-');
                    Answer = Date[1] + "-" + Date[0];
                }
            }
            
            return Answer;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DcDefaultDateTimeAnswerModeComponent
function DcAdvanceTimePickerAnswerModeComponent(Context, AttributeId, ControlId) {

    var MyInstance = this;
    this.oDcDefaultAnswerModeComponent = null;

    /// <summary>
    /// Get Html
    /// </summary>
    /// <returns>Html</returns> 
    this.GetHtml = function () {

        try {
            var Answer = "";
            var AttributeModel = MyInstance.oDcDefaultAnswerModeComponent.AttributeModel;

            if (AttributeModel.IsNA != true && AttributeModel.IsBlocker != true) {

                for (var i = 0; i < AttributeModel.Answers.length; i++) {

                    if (AttributeModel.Answers[i].ControlId == ControlId) {
                        Answer = AttributeModel.Answers[i].Answer;
                        break;
                    }
                }
            }

            if (Answer != "") {
                Answer = GetFormatedValueForUI(Answer);
            }

            var Input_AttributeId = "'" + AttributeId + "'";
            var Input_ControlId = "'" + ControlId + "'";

            var Html = '<div class="row responsive-sm no-margin ans-mode" id="AnswerModeContainer_' + ControlId + '">' +
                             '<div class="col no-padding">' +
                                '<div class="flatpickr">' +
                                        '<input id="' + ControlId + '" type="text" class="reportrange flatpickr-input flattimepicker" style = "color:black;" onchange="new DcDefaultAnswerModeComponent(' +
                                        Context + ',' + Input_AttributeId + ',' + Input_ControlId + ').Set(this)">' +
                                '</div>' +
                                //'<div class="input-field no-margin">' +
                                //     '<i class="mdi mdi-calendar-clock prefix"></i>' +
                                //     '<input class="datepicker no-margin-bottom" type="' + GetInputType(MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig.DataType) +
                                //     '" value="' + Answer + '" id="' + ControlId +
                                //     '" oninput="new DcDefaultAnswerModeComponent(' + Context + ',' + Input_AttributeId + ',' + Input_ControlId + ').Set(this)"/>' +
                                //'</div>' +
                            '</div>' +
                       '</div>';

            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Set
    /// </summary>
    /// <param name="DOMObj">DOMObj</param>   
    /// <param name="Answer">Answer</param>  
    /// <param name="AnswerValue">AnswerValue</param>  
    this.Set = function (DOMObj, Answer, AnswerValue) {

        try {
            var Response = { IsModified: false };
            var AttributeModel = MyInstance.oDcDefaultAnswerModeComponent.AttributeModel;

            if (DOMObj != null && Answer == undefined) {
                Answer = DOMObj.value;
            }
            else {
                Answer = Answer;
            }

            if (Answer != "") {
                Answer = GetFormatedValue(DOMObj);
            }

            Response = MyInstance.oDcDefaultAnswerModeComponent.UpdateAnswerAndAnswerValue(Answer, "");

            return Response;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Clear
    /// </summary>
    this.Clear = function () {

        try {
            OneViewDcGlobalVariableInfo.oDOM.Clear(ControlId);
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Get InputType
    /// </summary>
    /// <param name="DataType">DataType</param>    
    /// <returns>InputType</returns> 
    var GetInputType = function (DataType) {

        try {
            switch (DataType) {
                case "TIME": return "time";
                case "DATE": return "date";
                case "DATETIME": return "datetime";
                case "DATETIMELOCAL": return "datetime-local";
                case "MONTHYEAR": return "month";
                default: return "DATETIMELOCAL";
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Formated Value
    /// </summary>
    /// <param name="DOMObj">DOMObj</param>
    /// <returns>Formated Value</returns> 
    var GetFormatedValue = function (DOMObj) {

        try {
            var DataType = MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig.DataType;
            var Answer = DOMObj.value;

            if (DataType == "DATETIMELOCAL") {
                if (DOMObj != null && DOMObj.value.indexOf('T') != -1) {
                    var DateTime = DOMObj.value.split('T');
                    var Date = DateTime[0].split('-');
                    Answer = Date[2] + "-" + Date[1] + "-" + Date[0] + " " + DateTime[1] + ":00";
                }
            }
            else if (DataType == "DATE") {
                if (DOMObj != null && DOMObj.value.indexOf('-') != -1) {
                    var Date = DOMObj.value.split('-');
                    Answer = Date[2] + "-" + Date[1] + "-" + Date[0];
                }
            }
            else if (DataType == "MONTHYEAR") {
                if (DOMObj != null && DOMObj.value.indexOf('-') != -1) {
                    var Date = DOMObj.value.split('-');
                    Answer = Date[1] + "-" + Date[0];
                }
            }

            return Answer;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Formated Value For UI
    /// </summary>
    /// <param name="DOMObj">DOMObj</param>
    /// <returns>Formated Value</returns> 
    var GetFormatedValueForUI = function (Answer) {

        try {
            var DataType = MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig.DataType;

            if (DataType == "DATETIMELOCAL") {
                if (Answer != "" && Answer.indexOf(' ') != -1) {
                    var DateTime = Answer.split(' ');
                    var Date = DateTime[0].split('-');
                    Answer = Date[2] + "-" + Date[1] + "-" + Date[0] + "T" + DateTime[1];
                }
            }
            else if (DataType == "DATE") {
                if (Answer != "" && Answer.indexOf('-') != -1) {
                    var Date = Answer.split('-');
                    Answer = Date[2] + "-" + Date[1] + "-" + Date[0];
                }
            }
            else if (DataType == "MONTHYEAR") {
                if (Answer != "" && Answer.indexOf('-') != -1) {
                    var Date = Answer.split('-');
                    Answer = Date[1] + "-" + Date[0];
                }
            }

            return Answer;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DcDefaultListViewAnswerModeComponent
function DcDefaultListViewAnswerModeComponent(Context, AttributeId, ControlId) {

    var MyInstance = this;
    this.oDcDefaultAnswerModeComponent = null;

    var AnswerModeComponent = null;
    this.DataSourceLst = null;

    /// <summary>
    /// Get Html
    /// </summary>
    /// <returns>Html</returns> 
    this.GetHtml = function () {

        try {
            SetListViewAnswerModeComponent();
            var Html = '';

            if (AnswerModeComponent != null) {
                
                var Response = new Array();

                var AnswerModeConfig = MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig;

                if (AnswerModeConfig.ListViewDisplay == 0 ||
                    AnswerModeConfig.ListViewDisplay == 1 ||
                    AnswerModeConfig.ListViewDisplay == 2 ||
                    AnswerModeConfig.ListViewDisplay == 3
                ) {
                    if (AnswerModeConfig.ListViewDataSourceConfig.Type == "BandListViewDataSourceConfig") {
                        MyInstance.DataSourceLst = OneViewDcGlobalVariableInfo.oDcBandDetailsCacheComponent.GetBandDetailsByBandId(AnswerModeConfig.ListViewDataSourceConfig.BandId);
                        AnswerModeComponent.DataSourceLst = MyInstance.DataSourceLst;
                    }
                    else if (AnswerModeConfig.ListViewDataSourceConfig.Type == "DefaultTreeListViewDataSourceConfig") {
                        var _oDcDefaultTreeListViewDataSourceComponent = new DcDefaultTreeListViewDataSourceComponent(Context, AttributeId, ControlId);
                        MyInstance.DataSourceLst = _oDcDefaultTreeListViewDataSourceComponent.GetData(AnswerModeConfig, "");
                        AnswerModeComponent.DataSourceLst = MyInstance.DataSourceLst;
                    }
                }

                if (AnswerModeComponent != null) {
                    Html = AnswerModeComponent.GetHtml();
                }
            }

            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Set
    /// </summary>
    /// <param name="DOMObj">DOMObj</param>   
    /// <param name="Answer">Answer</param>  
    /// <param name="AnswerValue">AnswerValue</param>  
    this.Set = function (DOMObj, Answer, AnswerValue) {

        try {
            SetListViewAnswerModeComponent();
            var Response = { IsModified: false };

            if (AnswerModeComponent != null) {

                if (AnswerModeComponent != null) {
                    Response = AnswerModeComponent.Set(DOMObj, Answer, AnswerValue);
                }
            }

            return Response;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Clear
    /// </summary>
    this.Clear = function () {

        try {
            SetListViewAnswerModeComponent();

            if (AnswerModeComponent != null) {
                AnswerModeComponent.Clear();
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Load
    /// </summary>
    this.Load = function () {

        try {
            SetListViewAnswerModeComponent();
            if (AnswerModeComponent != null) {
                AnswerModeComponent.Load();
            }
        }
        catch (Excep) {
        }
        finally {
        }
    }

    /// <summary>
    /// Search
    /// </summary>
    this.Search = function (SearchValue) {

        try {
            SetListViewAnswerModeComponent();
            if (AnswerModeComponent != null) {
                AnswerModeComponent.Search(SearchValue);
            }
        }
        catch (Excep) {
        }
        finally {
        }
    }

    /// <summary>
    /// Set ListView AnswerMode Component
    /// ListViewDisplay
    ///     BAND = 0,
    ///     RADIOBUTTON = 1,
    ///     CHECKBOXLIST = 2,
    ///     DDL_HtmlDefault = 3,
    ///     CHECKBOXLIST_SidePanel = 4,
    ///     RADIOBUTTON_SidePanel = 5
    /// </summary>    
    var SetListViewAnswerModeComponent = function () {

        try {
            if (MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig.ListViewDisplay == 0) {
                AnswerModeComponent = new DcDefaultBandListViewAnswerModeComponent(Context, AttributeId, ControlId);                
            }
            else if (MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig.ListViewDisplay == 1 || MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig.ListViewDisplay == 2) {
                AnswerModeComponent = new DcDefaultCheckBoxAndRadioButtonListViewAnswerModeComponent(Context, AttributeId, ControlId);
            }
            else if (MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig.ListViewDisplay == 3) {
                AnswerModeComponent = new DcDefaultHtmlDropdownListViewAnswerModeComponent(Context, AttributeId, ControlId);
            }
            else if (MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig.ListViewDisplay == 4 || MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig.ListViewDisplay == 5) {
                AnswerModeComponent = new DcSidePanelCheckBoxAndRadioButtonListViewAnswerModeComponent(Context, AttributeId, ControlId);
            }           
              
            AnswerModeComponent.oDcDefaultAnswerModeComponent = MyInstance.oDcDefaultAnswerModeComponent;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DcDefaultBandListViewAnswerModeComponent
function DcDefaultBandListViewAnswerModeComponent(Context, AttributeId, ControlId) {

    var MyInstance = this;
    this.oDcDefaultAnswerModeComponent = null;
   
    this.DataSourceLst = null;

    /// <summary>
    /// Get Html
    /// </summary>
    /// <returns>Html</returns> 
    this.GetHtml = function () {

        try {
            var Html = "";
            var AnswerModeConfig = MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig;

            if (AnswerModeConfig.DisplayMode == 0) {
                Html = GetBandHorizontalHtml();
            }
            else {
                OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification("AnswerMode DisplayMode : " + AnswerModeConfig.DisplayMode + " Not implemented exception, DcDefaultBandListViewAnswerModeComponent.GetBandHtml)", 4);
            }

            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Band Horizontal Html
    /// </summary>
    /// <returns>Html</returns> 
    var GetBandHorizontalHtml = function () {

        try {           
            var Input_AttributeId = "'" + AttributeId + "'";
            var Input_ControlId = "'" + ControlId + "'";
            var Input_Answer = "";
            var Input_AnswerValue = "";
            var Input_Id = "";

            var AttributeModel = MyInstance.oDcDefaultAnswerModeComponent.AttributeModel;
            var AnswerModeConfig = MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig;

            var Html = '<div class="row responsive-sm no-margin ans-mode" id="AnswerModeContainer_' + ControlId + '">';
            
            for (var i = 0; i < MyInstance.DataSourceLst.length; i++) {

                Input_Id = ControlId + "_" + MyInstance.DataSourceLst[i].Id;
                Input_Answer = MyInstance.DataSourceLst[i].Id;
                Input_AnswerValue = "'" + MyInstance.DataSourceLst[i].Name + "'";
                
                var ColourCode = "";
                if (AnswerModeConfig.ListViewDataSourceConfig.Type == "BandListViewDataSourceConfig") {
                    ColourCode = OneViewDcGlobalVariableInfo.oDcBandDetailsCacheComponent.GetColourCode(MyInstance.DataSourceLst[i].Id);                    
                }
                else if (AnswerModeConfig.ListViewDataSourceConfig.Type == "DefaultTreeListViewDataSourceConfig") {
                    ColourCode = OneViewDcGlobalVariableInfo.oDcOrganizationAssestsNodeCacheComponent.GetColourCode(MyInstance.DataSourceLst[i].Id);
                }
                ColourCode = (ColourCode != "") ? ColourCode : OneViewDcGlobalVariableInfo.BandListViewAnswerModeDefaultColourCode;

                var ButtonHtml = '<a class="waves-effect waves-light blue-grey lighten-3 btn z-depth-0" style="" id="' + Input_Id + '" name="' + ControlId + '" onclick="new DcDefaultAnswerModeComponent(' + Context + ',' + Input_AttributeId + ',' + Input_ControlId + ').Set(this,' + Input_Answer + ',' + Input_AnswerValue + ')">' + MyInstance.DataSourceLst[i].Name + '</a>';

                if (AttributeModel.IsNA != true && AttributeModel.IsBlocker != true) {

                    for (var j = 0; j < AttributeModel.Answers.length; j++) {

                        if (AttributeModel.Answers[j].ControlId == ControlId && AttributeModel.Answers[j].Answer == MyInstance.DataSourceLst[i].Id && AttributeModel.Answers[j].IsDisable == false) {

                            ButtonHtml = '<a class="waves-effect waves-light btn z-depth-0" style="background-color:' + ColourCode + '" id="' + Input_Id + '" name="' + ControlId + '" onclick="new DcDefaultAnswerModeComponent(' + Context + ',' + Input_AttributeId + ',' + Input_ControlId + ').Set(this,' + Input_Answer + ',' + Input_AnswerValue + ')">' + MyInstance.DataSourceLst[i].Name + '</a>';
                            break;
                        }
                    }
                }

                Html += '<div class="col no-padding">' +
                            ButtonHtml +
                        '</div>';
            }

            Html += '</div>';
           
            return Html;
        }
        catch (Excep) {            
            throw Excep;
        }
    }

    /// <summary>
    /// Set
    /// </summary>
    /// <param name="DOMObj">DOMObj</param>   
    /// <param name="Answer">Answer</param>  
    /// <param name="AnswerValue">AnswerValue</param>  
    this.Set = function (DOMObj, Answer, AnswerValue) {

        try {
            var Response = { IsModified: false };
            var AnswerModeConfig = MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig;
            var AttributeModel = MyInstance.oDcDefaultAnswerModeComponent.AttributeModel;

            var ColourCode = "";
            if (AnswerModeConfig.ListViewDataSourceConfig.Type == "BandListViewDataSourceConfig") {
                var ColourCode = OneViewDcGlobalVariableInfo.oDcBandDetailsCacheComponent.GetColourCode(Answer);
            }
            else if (AnswerModeConfig.ListViewDataSourceConfig.Type == "DefaultTreeListViewDataSourceConfig") {
                ColourCode = OneViewDcGlobalVariableInfo.oDcOrganizationAssestsNodeCacheComponent.GetColourCode(Answer);
            }
            ColourCode = (ColourCode != "") ? ColourCode : OneViewDcGlobalVariableInfo.BandListViewAnswerModeDefaultColourCode;
                  
            if (AnswerModeConfig.SelectionType == 0) {                
                SetBandColorForSingleSelection(ControlId + "_" + Answer, ControlId, ColourCode);
                Response = MyInstance.oDcDefaultAnswerModeComponent.UpdateAnswerAndAnswerValue(Answer, AnswerValue);
            }
            else {
                SetBandColorForMultiSelection(ControlId + "_" + Answer, ControlId, ColourCode);
                Response = MyInstance.oDcDefaultAnswerModeComponent.UpdateAnswerAndAnswerValueForMultiSelect(Answer, AnswerValue);
            }
            
            return Response;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Clear
    /// </summary>
    this.Clear = function () {

        try {
            ClearAllColors(ControlId);
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Set Band Color For Single Selection
    /// </summary>
    /// <param name="DOMObj">DOMObj</param>   
    /// <param name="Answer">Answer</param>  
    /// <param name="AnswerValue">AnswerValue</param> 
    var SetBandColorForSingleSelection = function (Id, Name, ColourCode) {

        try {
            var CurrentObj = document.getElementById(Id);
            if (CurrentObj != null && CurrentObj.style.backgroundColor == "") {
                ClearAllColors(Name);
                CurrentObj.style.backgroundColor = ColourCode;
                //CurrentObj.style.color = "white";
                OneViewDcGlobalVariableInfo.oDOM.RemoveClass(Id, "blue-grey");
                OneViewDcGlobalVariableInfo.oDOM.RemoveClass(Id, "lighten-3");
            }            
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Set Band Color For Multi Selection
    /// </summary>
    /// <param name="DOMObj">DOMObj</param>   
    /// <param name="Answer">Answer</param>  
    /// <param name="AnswerValue">AnswerValue</param> 
    var SetBandColorForMultiSelection = function (Id, Name, ColourCode) {

        try {
            var CurrentObj = document.getElementById(Id);
            if (CurrentObj != null && CurrentObj.style.backgroundColor == "") {                
                CurrentObj.style.backgroundColor = ColourCode;
                //CurrentObj.style.color = "white";
                OneViewDcGlobalVariableInfo.oDOM.RemoveClass(Id, "blue-grey");
                OneViewDcGlobalVariableInfo.oDOM.RemoveClass(Id, "lighten-3");
            }
            else {
                CurrentObj.style.backgroundColor = "";
                //AllObj[i].style.color = "#444";  
                OneViewDcGlobalVariableInfo.oDOM.AddClass(Id, "blue-grey");
                OneViewDcGlobalVariableInfo.oDOM.AddClass(Id, "lighten-3");  
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Clear All Colors
    /// </summary>
    /// <param name="Name">Name</param>       
    var ClearAllColors = function (Name) {

        try {            
            var AllObj = document.getElementsByName(Name);
            if (AllObj != null) {
                for (var i = 0; i < AllObj.length; i++) {
                    AllObj[i].style.backgroundColor = "";
                    //AllObj[i].style.color = "#444";  
                    OneViewDcGlobalVariableInfo.oDOM.AddClass(AllObj[i].id, "blue-grey");
                    OneViewDcGlobalVariableInfo.oDOM.AddClass(AllObj[i].id, "lighten-3");                    
                }
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DcDefaultCheckBoxAndRadioButtonListViewAnswerModeComponent
function DcDefaultCheckBoxAndRadioButtonListViewAnswerModeComponent(Context, AttributeId, ControlId) {

    var MyInstance = this;
    this.oDcDefaultAnswerModeComponent = null;  

    this.DataSourceLst = null;

    /// <summary>
    /// Get Html
    /// </summary>
    /// <returns>Html</returns> 
    this.GetHtml = function () {

        try {
            var AttributeModel = MyInstance.oDcDefaultAnswerModeComponent.AttributeModel;
            var AnswerModeConfig = MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig;
            var AttributeModel = MyInstance.oDcDefaultAnswerModeComponent.AttributeModel;

            var Input_AttributeId = "'" + AttributeId + "'";
            var Input_ControlId = "'" + ControlId + "'";
            
            var CheckBoxHtml = '';
            var InputType = '';
            if (AnswerModeConfig.ListViewDisplay == 1) {
                InputType = 'radio';
            }
            else if (AnswerModeConfig.ListViewDisplay == 2) {
                InputType = 'checkbox';
            }

            for (var i = 0; i < MyInstance.DataSourceLst.length; i++) {

                Input_Id = ControlId + "_" + MyInstance.DataSourceLst[i].Id;
                Input_Answer = MyInstance.DataSourceLst[i].Id;
                Input_AnswerValue = "'" + MyInstance.DataSourceLst[i].Name + "'";

                var IsChecked = "";

                for (var j = 0; j < AttributeModel.Answers.length; j++) {

                    if (AttributeModel.Answers[j].IsDisable != true && AttributeModel.Answers[j].ControlId == ControlId && AttributeModel.Answers[j].Answer == MyInstance.DataSourceLst[i].Id) {
                        IsChecked = "checked";
                        break;
                    }
                }

                CheckBoxHtml += '<div class="check-box">' +
                                    '<input type="' + InputType+'" class="filled-in" id="' + Input_Id + '" name="' + ControlId +'" onclick="new DcDefaultAnswerModeComponent(' + Context + ',' + Input_AttributeId + ',' + Input_ControlId + ').Set(this,' + Input_Answer + ',' + Input_AnswerValue + ')" ' + IsChecked + '/>' +
                                    '<label for="' + Input_Id + '"></label>' +
                                    MyInstance.DataSourceLst[i].Name +
                                '</div>';
            }

            var Html = '<div class="row responsive-sm no-margin ans-mode" id="AnswerModeContainer_' + ControlId + '">' +
                            '<div class="col no-padding">' +
                                '<div class="input-field no-margin">' +
                                    CheckBoxHtml +
                                '</div>' +
                            '</div>' +
                        '</div>';

            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Set
    /// </summary>
    /// <param name="DOMObj">DOMObj</param>   
    /// <param name="Answer">Answer</param>  
    /// <param name="AnswerValue">AnswerValue</param>  
    this.Set = function (DOMObj, Answer, AnswerValue) {

        try {
            var Response = { IsModified: false };
            var AnswerModeConfig = MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig;
            var AttributeModel = MyInstance.oDcDefaultAnswerModeComponent.AttributeModel;

            if (AnswerModeConfig.ListViewDisplay == 1) {
                Response = MyInstance.oDcDefaultAnswerModeComponent.UpdateAnswerAndAnswerValue(Answer, AnswerValue);
            }
            else if (AnswerModeConfig.ListViewDisplay == 2) {
                Response = MyInstance.oDcDefaultAnswerModeComponent.UpdateAnswerAndAnswerValueForMultiSelect(Answer, AnswerValue);
            }

            return Response;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Clear
    /// </summary>
    this.Clear = function () {

        try {
            var obj = OneViewDcGlobalVariableInfo.oDOM.GetObjectByName(ControlId);

            if (obj != null) {

                for (var i = 0; i < obj.length; i++) {
                    obj[i].checked = false;
                }
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }  
}

// DcDefaultHtmlDropdownListViewAnswerModeComponent
function DcDefaultHtmlDropdownListViewAnswerModeComponent(Context, AttributeId, ControlId) {

    var MyInstance = this;
    this.oDcDefaultAnswerModeComponent = null;

    this.DataSourceLst = null;

    /// <summary>
    /// Get Html
    /// </summary>
    /// <returns>Html</returns> 
    this.GetHtml = function () {

        try {
            var AttributeModel = MyInstance.oDcDefaultAnswerModeComponent.AttributeModel;
            var AnswerModeConfig = MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig;
            var AttributeModel = MyInstance.oDcDefaultAnswerModeComponent.AttributeModel;

            var Input_AttributeId = "'" + AttributeId + "'";
            var Input_ControlId = "'" + ControlId + "'";
            
            var OptionsHtml = '<option value="0">Select</option>';
            
            for (var i = 0; i < MyInstance.DataSourceLst.length; i++) {

                Input_Id = ControlId + "_" + MyInstance.DataSourceLst[i].Id;
                Input_Answer = MyInstance.DataSourceLst[i].Id;
                Input_AnswerValue = "'" + MyInstance.DataSourceLst[i].Name + "'";

                var IsSelected = "";

                for (var j = 0; j < AttributeModel.Answers.length; j++) {

                    if (AttributeModel.Answers[j].IsDisable != true && AttributeModel.Answers[j].ControlId == ControlId && AttributeModel.Answers[j].Answer == MyInstance.DataSourceLst[i].Id) {
                        IsSelected = "selected";
                        break;
                    }
                }

                OptionsHtml += '<option value="' + MyInstance.DataSourceLst[i].Id + '" ' + IsSelected + '>' + MyInstance.DataSourceLst[i].Name + '</option>';                   
            }

            var Html = '<div class="row responsive-sm no-margin ans-mode" id="AnswerModeContainer_' + ControlId + '">' +
                            '<div class="col no-padding">' +
                                '<div class="input-field no-margin">' +
                                    '<select id="' + ControlId + '" style="display:block;border-color:#8d8c8c;" onChange="new DcDefaultAnswerModeComponent(' + Context + ',' + Input_AttributeId + ',' + Input_ControlId + ').Set(this)">' +
                                        OptionsHtml +
                                    '</select>'+    
                                '</div>' +
                            '</div>' +
                        '</div>';

            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Set
    /// </summary>
    /// <param name="DOMObj">DOMObj</param>   
    /// <param name="Answer">Answer</param>  
    /// <param name="AnswerValue">AnswerValue</param>  
    this.Set = function (DOMObj, Answer, AnswerValue) {

        try {
            var Response = { IsModified: false };

            var AttributeModel = MyInstance.oDcDefaultAnswerModeComponent.AttributeModel;

            if (DOMObj != null && Answer == undefined) {
                if (DOMObj.value != 0) {
                    Answer = DOMObj.value;
                    AnswerValue = DOMObj.options[DOMObj.selectedIndex].text;
                }
                else {
                    Answer = "";
                    AnswerValue = "";
                }
            }
            
            if (AnswerValue != "") {
                AnswerValue = OneViewDcGlobalVariableInfo.oDcSpecialCharacterValidationComponent.RemoveSpecialCharacters(Answer);
            }
            
            Response = MyInstance.oDcDefaultAnswerModeComponent.UpdateAnswerAndAnswerValue(Answer, AnswerValue);

            return Response;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Clear
    /// </summary>
    this.Clear = function () {

        try {
            var obj = OneViewDcGlobalVariableInfo.oDOM.GetObjectById(ControlId);
            if (obj != null) {
                obj.selectedIndex = 0;
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DcSidePanelCheckBoxAndRadioButtonListViewAnswerModeComponent
function DcSidePanelCheckBoxAndRadioButtonListViewAnswerModeComponent(Context, AttributeId, ControlId) {

    var MyInstance = this;
    this.oDcDefaultAnswerModeComponent = null;
    this.HeaderId = "DefaultSidePanelHeader";
    this.ContentId = "DefaultSidePanelContent";
    this.FooterId = "DefaultSidePanelFooter";
    
    this.DataSourceLst = null;

    /// <summary>
    /// Get Html
    /// </summary>
    /// <returns>Html</returns> 
    this.GetHtml = function () {

        try {
            var SelectedAnswers = "";
            var AttributeModel = MyInstance.oDcDefaultAnswerModeComponent.AttributeModel;

            if (AttributeModel.IsNA != true && AttributeModel.IsBlocker != true) {

                for (var i = 0; i < AttributeModel.Answers.length; i++) {

                    if (AttributeModel.Answers[i].IsDisable != true && AttributeModel.Answers[i].ControlId == ControlId && AttributeModel.Answers[i].Answer != "") {
                        SelectedAnswers += AttributeModel.Answers[i].AnswerValue + ((AttributeModel.Answers.length - 1 == i) ? "" : ", ");
                    }
                }
            }

            var Input_AttributeId = "'" + AttributeId + "'";
            var Input_ControlId = "'" + ControlId + "'";

            var Html = '<div class="row responsive-sm no-margin ans-mode" id="AnswerModeContainer_' + ControlId + '" onclick="new DcDefaultAnswerModeComponent(' + Context + ',' + Input_AttributeId + ',' + Input_ControlId + ').Load();">' +
                            '<div class="col no-padding">' +
                                '<div class="input-field no-margin">' +
                                    '<input class="no-margin" type="text" value="' + SelectedAnswers + '" id="' + ControlId + '" disabled/>' +
                                '</div>' +
                            '</div>' +
                        '</div>';
        
            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }  

    /// <summary>
    /// Load
    /// </summary>
    this.Load = function () {

        try {
            var Input_AttributeId = "'" + AttributeId + "'";
            var Input_ControlId = "'" + ControlId + "'";
            var AnswerModeConfig = MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig;
            var AttributeModel = MyInstance.oDcDefaultAnswerModeComponent.AttributeModel;
            
            var HeaderHtml = GetHeaderHtml();                                
            var FooterHtml = GetFooterHtml();
            var ContentHtml = GetContentHtml(""); 

            OneViewDcGlobalVariableInfo.oDOM.SetStyle(MyInstance.ContentId, "top", "78px");

            OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml(MyInstance.HeaderId, HeaderHtml);
            OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml(MyInstance.ContentId, ContentHtml);
            OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml(MyInstance.FooterId, FooterHtml);

            $('.btn-right-panel').sideNav('show');
            InitializeUIControls();
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }  

    /// <summary>
    /// Search
    /// </summary>
    this.Search = function (SearchValue) {

        try {
            var ContentHtml = GetContentHtml(SearchValue);           
            OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml(MyInstance.ContentId, ContentHtml);           
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Header Html
    /// </summary>
    var GetHeaderHtml = function () {

        try {
            var Input_AttributeId = "'" + AttributeId + "'";
            var Input_ControlId = "'" + ControlId + "'";

            var Html = '<div class="padding-hrz-15 padding-ver-5"><strong>Please select</strong></div>' +
                            '<div class="input-field no-margin padding-hrz-15">' +
                            '<i class="mdi mdi-magnify prefix"></i>' +
                            '<input id="icon_prefix" type="text" class="" style="margin-bottom: 0px;" oninput="new DcDefaultAnswerModeComponent(' + Context + ',' + Input_AttributeId + ',' + Input_ControlId + ').Search(this.value)">' +
                        '</div>';

            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Footer Html
    /// </summary>
    var GetFooterHtml = function () {

        try {
            var Input_AttributeId = "'" + AttributeId + "'";
            var Input_ControlId = "'" + ControlId + "'";

            var Html = '<nav class="side-panel-footer grey lighten-5 z-depth-1">' +
                            '<div class="nav-wrapper padding-hrz-10">' +
                                //'<div class="right"><a href="#!" class="modal-action modal-close waves-effect waves-green btn-flat">Close</a> <a href="#!" class="modal-action modal-close waves-effect waves-green btn-flat">Done</a></div>' +
                                '<div class="right"><div class="right"><a href="#!" class="modal-action modal-close waves-effect waves-green btn-flat" onclick="new DcSidePanelCheckBoxAndRadioButtonListViewAnswerModeComponent(' + Context + ',' + Input_AttributeId + ',' + Input_ControlId + ').Close()">Close</a></div>' +
                            '</div>' +
                       '</nav>';

            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Content Html
    /// </summary>
    var GetContentHtml = function (SearchValue) {

        try {
            var Input_AttributeId = "'" + AttributeId + "'";
            var Input_ControlId = "'" + ControlId + "'";
            var AnswerModeConfig = MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig;
            var AttributeModel = MyInstance.oDcDefaultAnswerModeComponent.AttributeModel;

            if (MyInstance.DataSourceLst == null) {
                if (AnswerModeConfig.ListViewDataSourceConfig.Type == "BandListViewDataSourceConfig") {
                    MyInstance.DataSourceLst = OneViewDcGlobalVariableInfo.oDcBandDetailsCacheComponent.GetBandDetailsByBandId(AnswerModeConfig.ListViewDataSourceConfig.BandId);
                }
                else if (AnswerModeConfig.ListViewDataSourceConfig.Type == "DefaultTreeListViewDataSourceConfig") {
                    var _oDcDefaultTreeListViewDataSourceComponent = new DcDefaultTreeListViewDataSourceComponent(Context, AttributeId, ControlId);
                    MyInstance.DataSourceLst = _oDcDefaultTreeListViewDataSourceComponent.GetData(AnswerModeConfig, SearchValue);
                }
            }
           
            var CheckBoxHtml = '';
            var InputType = '';
            if (AnswerModeConfig.ListViewDisplay == 4) {
                InputType = 'checkbox';
            }
            else if (AnswerModeConfig.ListViewDisplay == 5) {
                InputType = 'radio';
            }

            var Html = '<div class="action-content"><ul class="collection">';

            for (var i = 0; i < MyInstance.DataSourceLst.length; i++) {

                if (IsSearchValidationSuccess(MyInstance.DataSourceLst[i].Name, SearchValue)) {

                    Input_Id = ControlId + "_" + MyInstance.DataSourceLst[i].Id;
                    Input_Answer = MyInstance.DataSourceLst[i].Id;
                    Input_AnswerValue = "'" + MyInstance.DataSourceLst[i].Name + "'";
                    
                    var ColourCode = "";
                    if (AnswerModeConfig.ListViewDataSourceConfig.Type == "BandListViewDataSourceConfig") {
                        var ColourCode = OneViewDcGlobalVariableInfo.oDcBandDetailsCacheComponent.GetColourCode(MyInstance.DataSourceLst[i].Id);
                    }
                    else if (AnswerModeConfig.ListViewDataSourceConfig.Type == "DefaultTreeListViewDataSourceConfig") {
                        ColourCode = OneViewDcGlobalVariableInfo.oDcOrganizationAssestsNodeCacheComponent.GetColourCode(MyInstance.DataSourceLst[i].Id);
                    }
                    ColourCode = (ColourCode != "") ? ColourCode : OneViewDcGlobalVariableInfo.SidePanelListViewAnswerModeDefaultColourCode;
                   
                    var IsChecked = "";

                    for (var j = 0; j < AttributeModel.Answers.length; j++) {

                        if (AttributeModel.Answers[j].IsDisable != true && AttributeModel.Answers[j].ControlId == ControlId && AttributeModel.Answers[j].Answer == MyInstance.DataSourceLst[i].Id) {
                            IsChecked = "checked";
                            break;
                        }
                    }

                    Html += '<li class="collection-item bordered" style="border-left-color:' + ColourCode + '">' +
                                '<div>' + MyInstance.DataSourceLst[i].Name + '</div>' +
                                '<div class="check-box">' +
                                    '<input type="' + InputType +'" class="filled-in" id="' + Input_Id + '" name="' + ControlId + '" onclick="new DcDefaultAnswerModeComponent(' + Context + ',' + Input_AttributeId + ',' + Input_ControlId + ').Set(this,' + Input_Answer + ',' + Input_AnswerValue + ')" ' + IsChecked + '/>' +
                                    '<label for="' + Input_Id + '"></label>' +
                                '</div>' +
                            '</li>';
                }
            }

            Html += '</div></ul>';

            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// IsSearchValidationSuccess
    /// </summary>
    var IsSearchValidationSuccess = function (SearchString, SearchValue) {

        try {
            var IsSuccess = true;

            if (SearchValue != "") {

                var SearchString = SearchString.toLowerCase().trim();
                var SearchValue = SearchValue.toLowerCase().trim();

                if (SearchValue.indexOf(" ") != -1) {

                    var SearchValueArray = SearchValue.split(" ");

                    for (var i = 0; i < SearchValueArray.length; i++) {

                        if (SearchString.indexOf(SearchValueArray[i].trim()) == -1) {
                            IsSuccess = false;
                            break;
                        }
                    }
                }
                else if (SearchString.indexOf(SearchValue) == -1) {
                    IsSuccess = false;
                }
            }

            return IsSuccess;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Set
    /// </summary>
    /// <param name="DOMObj">DOMObj</param>   
    /// <param name="Answer">Answer</param>  
    /// <param name="AnswerValue">AnswerValue</param>  
    this.Set = function (DOMObj, Answer, AnswerValue) {

        try {            
            var Response = { IsModified: false };
            var AnswerModeConfig = MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig;
            var AttributeModel = MyInstance.oDcDefaultAnswerModeComponent.AttributeModel;

            if (AnswerModeConfig.ListViewDisplay == 4) {
                Response = MyInstance.oDcDefaultAnswerModeComponent.UpdateAnswerAndAnswerValueForMultiSelect(Answer, AnswerValue);                
            }
            else if (AnswerModeConfig.ListViewDisplay == 5) {
                Response = MyInstance.oDcDefaultAnswerModeComponent.UpdateAnswerAndAnswerValue(Answer, AnswerValue);
            }

            UpdateUI();
           
            return Response;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
    
    /// <summary>
    /// Clear
    /// </summary>
    this.Clear = function () {

        try {
            OneViewDcGlobalVariableInfo.oDOM.Clear(ControlId);
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Close
    /// </summary>
    this.Close = function () {

        try {
            $('.btn-right-panel').sideNav('hide');
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// UpdateUI
    /// </summary>
    var UpdateUI = function () {

        try {
            var SelectedAnswers = "";
            var AttributeModel = MyInstance.oDcDefaultAnswerModeComponent.AttributeModel;
            
            for (var i = 0; i < AttributeModel.Answers.length; i++) {

                if (AttributeModel.Answers[i].IsDisable != true && AttributeModel.Answers[i].ControlId == ControlId && AttributeModel.Answers[i].Answer != "") {
                    SelectedAnswers += AttributeModel.Answers[i].AnswerValue + ((AttributeModel.Answers.length - 1 == i) ? "" : ", ");
                }
            }

            OneViewDcGlobalVariableInfo.oDOM.SetValue(ControlId, SelectedAnswers);            
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }  
}

// DcDefaultScoringLogicComponent
function DcDefaultScoringLogicComponent() {

    var MyInstance = this;
    this.oDcDefaultAnswerModeComponent = null;

    /// <summary>
    /// Get Score based on Weightage
    /// </summary>
    /// <param name="AttributeId">AttributeId</param>
    /// <param name="ControlId">ControlId</param>
    /// <param name="Value">Selected value score</param>
    /// <returns>Final score based on Weightage</returns>     
    this.GetScore = function (Context, AttributeId, ControlId, Answer) {
        try {
            var Score = 0;
            var MaxScore = 0;
            var TotalCount = 0;
            var CompletedCount = 0;
            var CompletedAttributeCount = 0;
            var TotalAttributeCount = 0;

            var AnswerModeConfig = MyInstance.oDcDefaultAnswerModeComponent.AnswerModeConfig;
          
            var Value = 0;
            if (AnswerModeConfig.ListViewDataSourceConfig.Type == "BandListViewDataSourceConfig") {
                Value = OneViewDcGlobalVariableInfo.oDcBandDetailsCacheComponent.GetValue(Answer);
            }
            else if (AnswerModeConfig.ListViewDataSourceConfig.Type == "DefaultTreeListViewDataSourceConfig") {
                Value = OneViewDcGlobalVariableInfo.oDcOrganizationAssestsNodeCacheComponent.GetValue(Answer);
            }

            var Weightage = AnswerModeConfig.Weightage;
            Weightage = (Weightage != undefined) ? Weightage : 0;

            Score = Weightage * Value;
            MaxScore = (AnswerModeConfig.MaxScore != undefined) ? AnswerModeConfig.MaxScore : 0;

            return {
                "CompletedCount": CompletedCount,
                "TotalCount": TotalCount,
                "Score": Score,
                "MaxScore": MaxScore,
                "Percentage": (MaxScore > 0) ? ((Score / MaxScore) * 100).toFixed(2) : 0,
                "CompletedAttributeCount": CompletedAttributeCount,
                "TotalAttributeCount": TotalAttributeCount
            };
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DcTemplateMetadataFormatterComponent
function DcTemplateMetadataFormatterComponent() {

    var MyInstance = this;
    var Result = {};

    /// <summary>
    /// Format
    /// </summary> 
    /// <param name="TemplateNode">Template config Metadata</param>    
    /// <returns>Formatted Template config Metadata</returns> 
    this.Format = function (TemplateNode) {

        try {
            if (TemplateNode.Childs.length == 0) {

                var TemplateNodeCopy = GetTemplateNodeCopy(TemplateNode);

                Result[TemplateNode.Id] = TemplateNodeCopy;

                for (var i = 0; i < TemplateNode.AnswerModes.length; i++) {
                    Result[TemplateNode.Id][TemplateNode.AnswerModes[i].ControlId] = TemplateNode.AnswerModes[i];
                }

                DeleteChilds(TemplateNodeCopy);
                //DeleteAnswerModes(TemplateNodeCopy);
            }
            else {
                var TotalCount = TemplateNode.Childs.length;

                if (TotalCount > 0) {

                    var TemplateNodeCopy = GetTemplateNodeCopy(TemplateNode);

                    Result[TemplateNode.Id] = TemplateNodeCopy;

                    for (var i = 0; i < TotalCount; i++) {
                        TemplateNode.Childs[i].Parent = TemplateNode;
                        MyInstance.Format(TemplateNode.Childs[i]);
                    }

                    DeleteChilds(TemplateNodeCopy);
                }
            }

            return Result;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get TemplateNode Copy
    /// </summary> 
    /// <param name="TemplateNode">TemplateNode</param>    
    var GetTemplateNodeCopy = function (TemplateNode) {

        try {
            var TemplateNodeCopy = TemplateNode.constructor();

            for (var itrNode in TemplateNode) {
                if (TemplateNode.hasOwnProperty(itrNode)) TemplateNodeCopy[itrNode] = TemplateNode[itrNode];
            }

            return TemplateNodeCopy;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Delete Childs
    /// </summary> 
    /// <param name="TemplateNode">TemplateNode</param>    
    var DeleteChilds = function (TemplateNode) {

        try {
            delete TemplateNode.Childs;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Delete AnswerModes
    /// </summary> 
    /// <param name="TemplateNode">TemplateNode</param>    
    var DeleteAnswerModes = function (TemplateNode) {

        try {
            delete TemplateNode.AnswerModes;
        }
        catch (Excep) {
            throw Excep;
        }
    }
}

// DcSpecialCharacterValidationComponent
function DcSpecialCharacterValidationComponent() {

    var MyInstance = this;

    /// <summary>
    /// RemoveSpecialCharacters
    /// </summary>           
    this.RemoveSpecialCharacters = function (Value) {

        try {
            if (OneViewDcGlobalVariableInfo.OneViewGlobalcurrentLanguage == 'en-us') {
                if (Value != undefined && Value != null && Value != '' && typeof (Value) == 'string') {
                    Value = Value.replace(/[^-_<>@:()^,&/| 0-9 .a-zA-Z]/g, ' ');
                    //Value = Value.replace(/\s/g, "");
                    //Value = Value.trim();
                }
            }

            return Value;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DcClientGuidGenerationComponent
function DcClientGuidGenerationComponent() {

    /// <summary>
    /// Get ClientGuid
    /// </summary>  
    /// <returns>ClientGuid</returns> 
    this.GetClientGuid = function () {
        try {
            var Guid = ""; //Used to assign unique id

            function createId() {
                return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
            }

            Guid = (createId() + createId() + "-" + createId() + "-4" + createId().substr(0, 3) + "-" + createId() + "-" + createId() + createId() + createId()).toLowerCase();

            return Guid;
        }
        catch (Excep) {
        }
        finally {
        }
    }
}

// DcBandDetailsCacheComponent
function DcBandDetailsCacheComponent() {

    var MyInstance = this;

    /// <summary>
    /// Get Band Details By BandId
    /// <param name="BandId">BandId</param>   
    /// <returns>Band Details List</returns> 
    /// </summary>         
    this.GetBandDetailsByBandId = function (BandId) {

        try {            
            var IsExist = true;

            if (OneViewDcGlobalVariableInfo.BandCacheDict[BandId] == undefined) {

                var BandDetailsLst = GetBandDetailsByMaster(BandId);

                for (var i = 0; i < BandDetailsLst.length; i++) {
                    BandDetailsLst[i].Id = BandDetailsLst[i].ServerId;
                }

                if (BandDetailsLst.length > 0) {
                    OneViewDcGlobalVariableInfo.BandCacheDict[BandId] = BandDetailsLst;

                    for (var i = 0; i < BandDetailsLst.length; i++) {
                        OneViewDcGlobalVariableInfo.BandDetailsCacheDict[BandDetailsLst[i].Id] = BandDetailsLst[i];
                    }
                }
                else {
                    IsExist = false;
                }
            }

            if (IsExist == true) {
                return OneViewDcGlobalVariableInfo.BandCacheDict[BandId];
            }
            else {
                OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification("Band details not available for requested BandId " + BandId, 4);
                return new Array();
            }
        }
        catch (Excep) {
        }
        finally {
        }
    }

    /// <summary>
    /// Get Band Details By Master
    /// <returns>Band Details List</returns> 
    /// </summary>    
    var GetBandDetailsByMaster = function (BandId) {

        try {
            var Response = new Array();
           
            var _oWiNAiMAjax = new WiNAiMAjax();
            _oWiNAiMAjax.url = GetRelativeUrl("/Report/GetBandDetailsByMaster");
            _oWiNAiMAjax.webMethod = "post";
            _oWiNAiMAjax.parameter = JSON.stringify({ "request": JSON.stringify({ BandMasterId: BandId }) });
            _oWiNAiMAjax.async = false;
            _oWiNAiMAjax.dataType = "json";

            var callBackparm = {
                success: function (response, message) {
                    Response = message;
                },
                error: function (sender, Request, textStatus, errorThrown) {
                    throw "Error while getting band details";
                },
                sender: this
            }

            _oWiNAiMAjax.execute(callBackparm);
           
            return Response;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Band Detail
    /// <param name="BandId">BandDetailId</param>
    /// <returns>Band Detail</returns> 
    /// </summary>         
    this.GetBandDetail = function (BandDetailId) {

        try {
            return OneViewDcGlobalVariableInfo.BandDetailsCacheDict[BandDetailId];
        }
        catch (Excep) {
        }
        finally {
        }
    }

    /// <summary>
    /// Get Colour Code
    /// <param name="BandId">BandDetailId</param>
    /// <returns>Band Detail ColourCode</returns>
    /// </summary>         
    this.GetColourCode = function (BandDetailId) {

        try {
            var ColourCode = "";
            var oBandDetail = OneViewDcGlobalVariableInfo.BandDetailsCacheDict[BandDetailId];

            if (oBandDetail != undefined && oBandDetail.ColourCode != null && oBandDetail.ColourCode != "") {
                ColourCode = oBandDetail.ColourCode;
            }

            return ColourCode;
        }
        catch (Excep) {
        }
        finally {
        }
    }
    
    /// <summary>
    /// Get Value
    /// <param name="BandId">BandDetailId</param>
    /// <returns>Band Detail Value</returns>
    /// </summary>         
    this.GetValue = function (BandDetailId) {

        try {
            var Value = 0;
            var oBandDetail = OneViewDcGlobalVariableInfo.BandDetailsCacheDict[BandDetailId];

            if (oBandDetail != undefined && oBandDetail.Value != null && oBandDetail.Value != undefined) {
                ColourCode = oBandDetail.Value;
            }

            return ColourCode;
        }
        catch (Excep) {
        }
        finally {
        }
    }
}

// DcOrganizationAssestsNodeCacheComponent
function DcOrganizationAssestsNodeCacheComponent() {

    var MyInstance = this;
   
    /// <summary>
    /// Get
    /// <param name="NodeId">NodeId</param>
    /// <returns>AssestNode</returns>
    /// </summary>         
    this.Get = function (NodeId) {

        try {
            return OneViewDcGlobalVariableInfo.OrganizationAssestsNodeCacheDict[NodeId];
        }
        catch (Excep) {
        }
        finally {
        }
    }

    /// <summary>
    /// Get Colour Code
    /// <param name="NodeId">NodeId</param>
    /// <returns>ColourCode</returns>
    /// </summary>         
    this.GetColourCode = function (NodeId) {

        try {
            var ColourCode = "";
            var oAssetNode = OneViewDcGlobalVariableInfo.OrganizationAssestsNodeCacheDict[NodeId];

            if (oAssetNode != undefined && oAssetNode.ColourCode != null && oAssetNode.ColourCode != "") {
                ColourCode = oAssetNode.ColourCode;
            }

            return ColourCode;
        }
        catch (Excep) {
        }
        finally {
        }
    }

    /// <summary>
    /// Get Value
    /// <param name="NodeId">NodeId</param>
    /// <returns>Value</returns>
    /// </summary>         
    this.GetValue = function (NodeId) {

        try {
            var Value = 0;
            
            var oAssetNode = OneViewDcGlobalVariableInfo.OrganizationAssestsNodeCacheDict[NodeId];
            
            if (oAssetNode != undefined && oAssetNode.Value != null && oAssetNode.Value != undefined) {
                Value = oAssetNode.Value;
            }

            return Value;
        }
        catch (Excep) {
        }
        finally {
        }
    }
}

// DcDefaultTreeListViewDataSourceComponent
function DcDefaultTreeListViewDataSourceComponent(Context, AttributeId, ControlId) {

    var MyInstance = this;
    var ChildDbElementTypeId = "";

    /// <summary>
    /// Get Data  
    /// <param name="AnswerModeConfig">AnswerMode config</param>
    /// <returns>DataSourceLst</returns>
    this.GetData = function (AnswerModeConfig) {

        try {
            var DataSourceLst = GetData(AnswerModeConfig, true);

            return DataSourceLst;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Data
    /// </summary>
    /// <param name="AttributeId">AttributeId</param>
    /// <param name="ControlId">ControlId</param> 
    /// <param name="AnswerModeConfig">AnswerMode config</param>
    /// <param name="IsFirstTime">For recursive call (Intenel use)</param>
    /// <returns>DataSourceLst</returns>
    var GetData = function (AnswerModeConfig, IsFirstTime) {

        try {           
            var DataSourceLst = new Array();

            ChildDbElementTypeId = (IsFirstTime == false)
                ? ChildDbElementTypeId
                : AnswerModeConfig.ListViewDataSourceConfig.ChildDbElementTypeId;

            var ParentNodeId = 0;

            if (AnswerModeConfig.ListViewDataSourceConfig.LoadParms != null) {

                if (AnswerModeConfig.ListViewDataSourceConfig.LoadParms['ParentNodeId'] != undefined &&
                    AnswerModeConfig.ListViewDataSourceConfig.LoadParms['ParentNodeId'] != null &&
                    AnswerModeConfig.ListViewDataSourceConfig.LoadParms['ParentNodeId'] != ""
                ) {
                    ParentNodeId = AnswerModeConfig.ListViewDataSourceConfig.LoadParms['ParentNodeId'];
                }
                else {                    
                    var AttributeIdControlId = AnswerModeConfig.ListViewDataSourceConfig.LoadParms['AttributeIdControlId'];

                    if (AttributeIdControlId != undefined && AttributeIdControlId.indexOf('$sp$') != -1) {

                        var AttributeIdControlIds = AttributeIdControlId.split('$sp$');
                        var AttributeId = AttributeIdControlIds[0];
                        var ControlId = AttributeIdControlIds[1];

                        var Answer = new DcDefaultAnswerModeComponent(Context, AttributeId, ControlId).GetAnswer();

                        if (Answer != "") {
                            ParentNodeId = Answer;
                        }
                        else {
                            var AnswerModeConfig = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.FormatedTemplateMetadata[AttributeId][ControlId];
                            if (AnswerModeConfig != null && AnswerModeConfig != undefined) {
                                GetData(AnswerModeConfig, false);
                            }
                        }
                    }
                }
            }
            
            var ListViewDataSourceCacheKey = AnswerModeConfig.ListViewDataSourceConfig.TreeDATEntityTypeId + "_" + ParentNodeId + "_" + ChildDbElementTypeId;
            var ListViewDataSourceCacheObject = OneViewDcGlobalVariableInfo.DcDefaultTreeListViewDataSourceCacheDict[ListViewDataSourceCacheKey];
            
            if (ListViewDataSourceCacheObject != undefined) {
                DataSourceLst = ListViewDataSourceCacheObject;
            }
            else{               
                if (AnswerModeConfig.ListViewDataSourceConfig.IsOnline === true) {
                    
                    DataSourceLst = GetDefaultTreeListViewDataSource(
                        AnswerModeConfig.ListViewDataSourceConfig.TreeDATEntityTypeId,
                        ParentNodeId,
                        ChildDbElementTypeId,
                        "",
                        0,
                        0
                    );
                }

                if (DataSourceLst.length > 0) {
                    
                    OneViewDcGlobalVariableInfo.DcDefaultTreeListViewDataSourceCacheDict[ListViewDataSourceCacheKey] = DataSourceLst;

                    for (var i = 0; i < DataSourceLst.length; i++) {

                        if (AnswerModeConfig.ListViewDataSourceConfig.TreeDATEntityTypeId == 16 &&
                            OneViewDcGlobalVariableInfo.OrganizationAssestsNodeCacheDict[DataSourceLst[i].Id] == undefined
                        ) {
                            OneViewDcGlobalVariableInfo.OrganizationAssestsNodeCacheDict[DataSourceLst[i].Id] = DataSourceLst[i];
                        }
                    }
                }
            }
            
            return DataSourceLst;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Band Details By Master
    /// <returns>Band Details List</returns> 
    /// </summary>    
    var GetDefaultTreeListViewDataSource = function (TreeDATEntityTypeId, ParentNodeId, ChildDbElementTypeId, SearchParam, PageNumber, PazeSize) {

        try {
            var Response = new Array();
           
            var _oWiNAiMAjax = new WiNAiMAjax();
            _oWiNAiMAjax.url = GetRelativeUrl("/DataCapture/GetDefaultTreeListViewDataSource");
            _oWiNAiMAjax.webMethod = "post";
            _oWiNAiMAjax.parameter = JSON.stringify({
                "TreeDATEntityTypeId": TreeDATEntityTypeId,
                "ParentNodeId": ParentNodeId,
                "ChildDbElementTypeId": ChildDbElementTypeId,
                "SearchParam": SearchParam,
                "PageNumber": PageNumber,
                "PazeSize": PazeSize
            });
            _oWiNAiMAjax.async = false;
            _oWiNAiMAjax.dataType = "json";

            var callBackparm = {
                success: function (response, message) {                    
                    if (message != null && message != "") {
                        Response = message;
                    }
                },
                error: function (sender, Request, textStatus, errorThrown) {
                    throw "Error while getting tree details";
                },
                sender: this
            }

            _oWiNAiMAjax.execute(callBackparm);

            return Response;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DcActionNCComponent
function DcActionNCComponent() {

    var ActionNCProfile = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.ActionNCProfile;

    /// <summary>
    /// Get Action NC Config
    /// </summary>
    /// <param name="TemplateNodeId">TemplateNodeId</param>  
    /// <returns>ActionNCConfig</returns> 
    this.GetActionNCConfig = function (TemplateNodeId) {

        try {
            var ActionNCConfigLst = new Array();

            if (ActionNCProfile != null) {

                var AttributeWiseActionNCConfigList = GetAttributeActionNCConfig(TemplateNodeId);
                var MultipleAttributeActionNCConfigList = GetMultipleAttributeActionNCConfig(TemplateNodeId);

                if (AttributeWiseActionNCConfigList.length > 0 && MultipleAttributeActionNCConfigList.length == 0) {
                    ActionNCConfigLst = AttributeWiseActionNCConfigList;
                }

                else if (AttributeWiseActionNCConfigList.length == 0 && MultipleAttributeActionNCConfigList.length > 0) {
                    ActionNCConfigLst = MultipleAttributeActionNCConfigList;
                }

                else if (AttributeWiseActionNCConfigList.length > 0 && MultipleAttributeActionNCConfigList.length > 0) {
                    ActionNCConfigLst.concat(AttributeWiseActionNCConfigList, MultipleAttributeActionNCConfigList)
                }
            }

            return ActionNCConfigLst;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Attribute Action NC Config
    /// </summary>
    /// <param name="TemplateNodeId">TemplateNodeId</param>  
    /// <returns>ActionNCConfig</returns> 
    var GetAttributeActionNCConfig = function (TemplateNodeId) {

        try {            
            var AttributeWiseActionNCConfigList = ActionNCProfile.AttributeWiseActionNCConfig[TemplateNodeId];

            if (AttributeWiseActionNCConfigList == undefined) {
                AttributeWiseActionNCConfigList = new Array();
            }
            else {
                for (var i = 0; i < AttributeWiseActionNCConfigList.length; i++) {
                    AttributeWiseActionNCConfigList[i].TemplateNodeIds = "," + TemplateNodeId + ",";
                    AttributeWiseActionNCConfigList[i]['IsRuleViolated'] = ValidateRule(AttributeWiseActionNCConfigList[i].FinalJavaScriptEquation, TemplateNodeId);
                }
            }

            return AttributeWiseActionNCConfigList;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Multiple Attribute Action NC Config
    /// </summary>
    /// <param name="TemplateNodeId">TemplateNodeId</param>  
    /// <returns>ActionNCConfig</returns> 
    var GetMultipleAttributeActionNCConfig = function (TemplateNodeId) {

        try {
            var MultipleAttributeActionNCConfigList = new Array();
            var MultipleAttributeActionNCConfigDict = ActionNCProfile.MultipleAttributeActionNCConfig;

            var IsSuccess = false;

            for (var irtMultipleAttributeActionNCConfigDict in MultipleAttributeActionNCConfigDict) {

                var AttributeKeys = irtMultipleAttributeActionNCConfigDict.split(':');
                var TemplateNodeIds = irtMultipleAttributeActionNCConfigDict.replace(/:/g, ", ");

                for (var i = 0; i < AttributeKeys.length; i++) {
                    if (AttributeKeys[i] == TemplateNodeId) {
                        MultipleAttributeActionNCConfigList = MultipleAttributeActionNCConfigDict[irtMultipleAttributeActionNCConfigDict];
                        if (MultipleAttributeActionNCConfigList == undefined) {
                            MultipleAttributeActionNCConfigList = new Array();
                        }
                        else {
                            for (var i = 0; i < MultipleAttributeActionNCConfigList.length; i++) {
                                MultipleAttributeActionNCConfigList[i].TemplateNodeIds = ", " + TemplateNodeIds + ", ";
                                MultipleAttributeActionNCConfigList[i]['IsRuleViolated'] = ValidateRule(MultipleAttributeActionNCConfigList[i].FinalJavaScriptEquation, TemplateNodeId);
                            }
                        }
                        IsSuccess = true;
                        break;
                    }
                }
            }

            return MultipleAttributeActionNCConfigList;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Validate Rule
    /// </summary>
    /// <param name="Rule">Rule</param>   
    /// <param name="TemplateNodeId">TemplateNodeId</param>  
    /// <returns>true or false</returns> 
    var ValidateRule = function (Rule, TemplateNodeId) {

        try {
            var IsSuccess = false;
            
            Rule = Rule.replace(/#/g, "'");
            IsSuccess = eval(Rule);

            return IsSuccess;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DcDefaultActionNCUIComponent
function DcDefaultActionNCUIComponent() {

    var MyInstance = this;
    this.SidePanelClickContext = 0;
    this.NotificationType = 3;

    /// <summary>
    /// Excecute
    /// </summary>
    /// <param name="ActionNCConfigLst">ActionNCConfigLst</param>  
    this.Excecute = function (ActionNCConfigLst) {

        try {            
            if (ActionNCConfigLst.length > 1) {
                OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification("Action NC for multiple rules : Not implemented exception", 4);
            }
            else {                
                if (ActionNCConfigLst[0].IsRuleViolated == true) {

                    if (ActionNCConfigLst[0].CriteriaDisplayLabelKey != "") {
                        OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification(ActionNCConfigLst[0].CriteriaDisplayLabelKey, MyInstance.NotificationType);
                    }

                    if (ActionNCConfigLst[0].IsNC == true && ActionNCConfigLst[0].IsActionEnable == true) {

                        if (ActionNCConfigLst[0].IsManual == true) {
                            LoadManualAction(ActionNCConfigLst);
                        }
                        else {
                            RaiseAutomaticAction(ActionNCConfigLst);
                        }                       
                    } 
                    else if (ActionNCConfigLst[0].IsNC == true) {
                     
                        if (ActionNCConfigLst[0].IsManual == true) {
                            LoadManualNC(ActionNCConfigLst);
                        }
                        else {
                            RaiseAutomaticNC(ActionNCConfigLst);
                        }
                    }
                }
                else {
                    var IsSuccess = MyInstance.DisableRule(ActionNCConfigLst[0].RuleId);

                    if (IsSuccess == true || MyInstance.SidePanelClickContext != OneViewDcGlobalVariableInfo.DefaulSidePanelClickContext.StatusBar) {

                        OneViewDcGlobalVariableInfo.IsDcModelModified = true;

                        if (OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.indexOf(OneViewDcGlobalVariableInfo.CurrentAttributeId) == -1) {
                            OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.push(OneViewDcGlobalVariableInfo.CurrentAttributeId);
                        }

                        if (OneViewDcGlobalVariableInfo.IsDcOnDemandSaveEnabled == true)
                            oOneViewGlobalDataCaptureComponent.Save();

                         var _oDcDefaultSidePanelUIComponent = new DcDefaultSidePanelUIComponent();
                         _oDcDefaultSidePanelUIComponent.Clear();
                    }

                    //var _oDcDefaultSidePanelUIComponent = new DcDefaultSidePanelUIComponent();
                    //_oDcDefaultSidePanelUIComponent.Clear();
                }               
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Disable Rule
    /// </summary>
    this.DisableRule = function (RuleId) {

        try {
            var IsSuccess = false;

            var ActionNCModelDic = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.ActionNCModel.DCNCModel;

            if (ActionNCModelDic[RuleId] != undefined && ActionNCModelDic[RuleId].IsDisable == false) {

                // Disable DCNC Mapping
                ActionNCModelDic[RuleId].IsDisable = true;

                // Disable Actions
                var Actions = ActionNCModelDic[RuleId].Actions;

                for (var i = 0; i < Actions.length; i++) {

                    Actions[i].IsDisable = true;
                }

                // Disable Action MultiMedia
                var ActionMultiMediaSubElements = ActionNCModelDic[RuleId].ActionMultiMediaSubElements;

                for (var i = 0; i < ActionMultiMediaSubElements.length; i++) {

                    ActionMultiMediaSubElements[i].IsDisable = true;
                }

                IsSuccess = true;

                if (OneViewDcGlobalVariableInfo.ModifiedActionNCRuleIdLst.indexOf(RuleId) == -1) {
                    OneViewDcGlobalVariableInfo.ModifiedActionNCRuleIdLst.push(RuleId);
                }
            }

            return IsSuccess;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Load Manual NC
    /// </summary>
    var LoadManualNC = function (ActionNCConfigLst) {

        try {
            OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification("Manual NC: Not implemented exception", 4);
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Raise Automatic NC
    /// </summary>
    var RaiseAutomaticNC = function (ActionNCConfigLst) {

        try {
            OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification("Automatic NC: Not implemented exception", 4);
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Load Manual Action
    /// </summary>
    var LoadManualAction = function (ActionNCConfigLst) {

        try {
            if (ActionNCConfigLst.length > 1) {
                OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification("Action NC for multiple rules : Not implemented exception", 4);
            }
            else {
                var _oActionNCConfig = OneViewDcGlobalVariableInfo.oOneViewJavaScriptSerializer.Stringify(ActionNCConfigLst[0]);

                var oSidePanelUIComponent = OneViewDcGlobalVariableInfo.oDcFactory.GetDefaultSidePanelUIComponent(OneViewDcGlobalVariableInfo.DefaulSidePanelContext.Action, "DcDefaultSidePanelUIComponent");

                if (oSidePanelUIComponent != null) {

                    oSidePanelUIComponent.SidePanelClickContext = MyInstance.SidePanelClickContext;
                    oSidePanelUIComponent.ActionNCConfig = ActionNCConfigLst[0];
                    OneViewDcGlobalVariableInfo.CurrentActionNCConfig = ActionNCConfigLst[0];
                    oSidePanelUIComponent.Excecute();
                }
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Raise Automatic Action
    /// </summary>
    var RaiseAutomaticAction = function (ActionNCConfigLst) {

        try {
            OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification("Automatic Action: Not implemented exception", 4);
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Action Validation Info
    /// </summary>
    this.GetActionValidationInfo = function (_oActionNCConfig) {

        try {
            var Response = {                
                "TotalActions": 0,
                "TotalCustomActions": 0,
                "TotalPredefinedActions": 0,
                "TotalFormActions": 0
            };

            var ActionNCModelDic = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.ActionNCModel.DCNCModel;

            if (ActionNCModelDic != null && ActionNCModelDic[_oActionNCConfig.RuleId] != undefined) {

                for (var i = 0; i < ActionNCModelDic[_oActionNCConfig.RuleId].Actions.length; i++) {

                    if (ActionNCModelDic[_oActionNCConfig.RuleId].Actions[i].IsDisable == false) {

                        if (ActionNCModelDic[_oActionNCConfig.RuleId].Actions[i].CustomActionName != '') {
                            Response.TotalCustomActions++;
                        }
                        else if (ActionNCModelDic[_oActionNCConfig.RuleId].Actions[i].PreDefinedActionId > 0) {
                            Response.TotalPredefinedActions++;
                        }
                        else if (ActionNCModelDic[_oActionNCConfig.RuleId].Actions[i].FormAction != null) {
                            Response.TotalFormActions++;
                        }

                        Response.TotalActions++;
                    }
                }
            }

            return Response;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DcDefaultActionNCUIComponent
function DcDefaultCustomActionUIComponent() {

    var MyInstance = this;

    /// <summary>
    /// Add Custom Action
    /// </summary>
    this.AddCustomAction = function (ActionNCConfig) {

        try {           
            var _otxtCustomAction = OneViewDcGlobalVariableInfo.oDOM.GetObjectById("txtCustomAction");

            if (_otxtCustomAction != null) {

                var CustomAction = _otxtCustomAction.value;

                if (CustomAction.trim() != "") {

                    CustomAction = OneViewDcGlobalVariableInfo.oDcSpecialCharacterValidationComponent.RemoveSpecialCharacters(CustomAction);

                    var _oActionNCConfig = OneViewDcGlobalVariableInfo.oOneViewJavaScriptSerializer.Parse(ActionNCConfig);

                    var ActionNCModelDic = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.ActionNCModel.DCNCModel;
                    
                    if (ActionNCModelDic[_oActionNCConfig.RuleId] == undefined) {

                        ActionNCModelDic[_oActionNCConfig.RuleId] = {
                            ActionClientGuid: "",
                            ActionClientId : 0,
                            ActionComments : "",
                            ActionMultiMediaSubElements : [],
                            Actions : [],
                            ActionServerId : 0,
                            ActualValue : "",
                            DCNCMappingClientId : 0,
                            Deviatedby : "",
                            DNNCMappingClientGuid: "",
                            DNNCMappingServerId : 0,
                            ExpectedValue : "",
                            IsDisable : false,
                            IsManualRule: true,
                            IsNC: false,
                            IsObservation: false,
                            NcComments : "",
                            NCMultiMediaSubElements : [],
                            RuleCode : "",
                            RuleDescription : "",
                            RuleGroup : "",
                            RuleId : "",
                            RuleName : "",
                            TemplateNodeIds : ""
                        }
                       
                        ActionNCModelDic[_oActionNCConfig.RuleId].DNNCMappingClientGuid = OneViewDcGlobalVariableInfo.oDcClientGuidGenerationComponent.GetClientGuid();
                        ActionNCModelDic[_oActionNCConfig.RuleId].ActionClientGuid = OneViewDcGlobalVariableInfo.oDcClientGuidGenerationComponent.GetClientGuid();
                    }

                    ActionNCModelDic[_oActionNCConfig.RuleId].IsManualRule = _oActionNCConfig.IsManualRule;
                    ActionNCModelDic[_oActionNCConfig.RuleId].IsNC = _oActionNCConfig.IsNC;
                    ActionNCModelDic[_oActionNCConfig.RuleId].IsObservation = _oActionNCConfig.IsObservation;
                   
                    //ActionNCModelDic[_oActionNCConfig.RuleId].ActualValue = _oActionNCConfig.ActualValue;
                    //ActionNCModelDic[_oActionNCConfig.RuleId].Deviatedby = _oActionNCConfig.Deviatedby;
                    //ActionNCModelDic[_oActionNCConfig.RuleId].ExpectedValue = _oActionNCConfig.ExpectedValue;

                    ActionNCModelDic[_oActionNCConfig.RuleId].RuleId = _oActionNCConfig.RuleId;
                    ActionNCModelDic[_oActionNCConfig.RuleId].RuleCode = _oActionNCConfig.RuleCode;
                    ActionNCModelDic[_oActionNCConfig.RuleId].RuleDescription = _oActionNCConfig.RuleDescription;
                    ActionNCModelDic[_oActionNCConfig.RuleId].RuleGroup = _oActionNCConfig.RuleGroup;
                    ActionNCModelDic[_oActionNCConfig.RuleId].RuleName = _oActionNCConfig.RuleName;

                    ActionNCModelDic[_oActionNCConfig.RuleId].TemplateNodeIds = _oActionNCConfig.TemplateNodeIds;
                    ActionNCModelDic[_oActionNCConfig.RuleId].IsDisable = false;

                    var Actions = ActionNCModelDic[_oActionNCConfig.RuleId].Actions;
                    var IsActionExist = false;

                    for (var i = 0; i < Actions.length; i++) {

                        if (Actions[i].CustomActionName == CustomAction && Actions[i].IsDisable == false) {
                            IsActionExist = true;
                            break;
                        }
                    }
                    
                    if (IsActionExist == true) {
                        OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification("This action already exists, Please enter new action", 3);
                    }
                    else {
                        var _oActionModel = {
                            ActionDetailsClientId : 0,
                            ActionDetailsMultiMediaSubElements : [],
                            ActionDetailsServerId : 0,
                            ActionType : 0,
                            Comments : "",
                            CustomActionName : "",
                            FormAction : null,
                            IsDisable : false,
                            PreDefinedActionId : 0,
                        }

                        _oActionModel.ActionDetailsClientGuid = OneViewDcGlobalVariableInfo.oDcClientGuidGenerationComponent.GetClientGuid();

                        _oActionModel.CustomActionName = CustomAction;

                        Actions.push(_oActionModel);

                        OneViewDcGlobalVariableInfo.oDOM.Append("CustomActionDisplayBlock", '<li class="collection-item" id="' + CustomAction + '"><div>' + CustomAction + '<a href="#!" class="secondary-content waves-effect waves-dark red-text darken-1" onclick="new DcDefaultCustomActionUIComponent().DeleteCustomAction(\'' + ActionNCConfig + '\',\'' + CustomAction + '\')"><i class="mdi mdi-minus-circle-outline"></i></a></div></li>');
                        _otxtCustomAction.value = "";

                        if (OneViewDcGlobalVariableInfo.ModifiedActionNCRuleIdLst.indexOf(_oActionNCConfig.RuleId) == -1) {
                            OneViewDcGlobalVariableInfo.ModifiedActionNCRuleIdLst.push(_oActionNCConfig.RuleId);
                        }
                    }
                }
                else {
                    OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification("Please enter valid action", 3);
                }
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Delete Custom Action
    /// </summary>
    this.DeleteCustomAction = function (ActionNCConfig, CustomAction) {

        try {
            var _oActionNCConfig = OneViewDcGlobalVariableInfo.oOneViewJavaScriptSerializer.Parse(ActionNCConfig);

            OneViewDcGlobalVariableInfo.oDOM.Remove(CustomAction);

            var ActionNCModelDic = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.ActionNCModel.DCNCModel;

            if (ActionNCModelDic != null && ActionNCModelDic[_oActionNCConfig.RuleId] != undefined) {

                var Actions = ActionNCModelDic[_oActionNCConfig.RuleId].Actions;
                var DisableActionsCount = 0;

                for (var i = 0; i < Actions.length; i++) {

                    if (Actions[i].CustomActionName == CustomAction) {
                        Actions[i].IsDisable = true;
                    }

                    if (Actions[i].IsDisable == true)
                        DisableActionsCount++;                    
                }

                if (Actions.length == DisableActionsCount) {

                    ActionNCModelDic[_oActionNCConfig.RuleId].IsDisable = true;

                    var ActionMultiMediaSubElements = ActionNCModelDic[_oActionNCConfig.RuleId].ActionMultiMediaSubElements;

                    for (var i = 0; i < ActionMultiMediaSubElements.length; i++) {
                        
                        ActionMultiMediaSubElements[i].IsDisable = true;
                        OneViewDcGlobalVariableInfo.oDOM.Remove(ActionMultiMediaSubElements[i].ClientGuid + "_MultiMedia");
                    }
                }

                if (OneViewDcGlobalVariableInfo.ModifiedActionNCRuleIdLst.indexOf(_oActionNCConfig.RuleId) == -1) {
                    OneViewDcGlobalVariableInfo.ModifiedActionNCRuleIdLst.push(_oActionNCConfig.RuleId);
                }
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DcDefaultActionMultiMediaSubElementsUIComponent
function DcDefaultActionMultiMediaSubElementsUIComponent() {

    var MyInstance = this;

    /// <summary>
    /// Attach Multi Media Sub Element
    /// </summary>
    this.AttachMultiMediaSubElement = function (Obj, Event, ActionNCConfig) {

        try {            
            var _oActionNCConfig = OneViewDcGlobalVariableInfo.oOneViewJavaScriptSerializer.Parse(ActionNCConfig);            

            if (IsActionExist(_oActionNCConfig)) {

                var _oImageControl = new ImageControl();
                _oImageControl.ImageSelectClickEvent(Obj);
            }
            else {
                OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification("Please select/add atleast one action", 3);
                Event.preventDefault();
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Add Multi Media Sub Element
    /// </summary>
    this.AddMultiMediaSubElement = function (Obj, ActionNCConfig) {

        try {           
            var _oActionNCConfig = OneViewDcGlobalVariableInfo.oOneViewJavaScriptSerializer.Parse(ActionNCConfig);

            var _oImageControl = new ImageControl();
            var Response = _oImageControl.ImageSave(Obj);
            
            if (Response != null && Response.IsAnyException == false) {

                var ActionNCModelDic = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.ActionNCModel.DCNCModel;
                
                var _oMultiMediaSubElementsModel = {
                    AlternateName : "",
                    ClientGuid : "",
                    ClientId : 0,
                    Comments : "",
                    Dimension : "",
                    IsDisable : false,
                    LocalURL : "",
                    MappedEntityClientGuid : "",
                    MappedEntityId : 0,
                    MultiMediaType : "",
                    ServerId : 0,
                }
                _oMultiMediaSubElementsModel.ClientGuid = OneViewDcGlobalVariableInfo.oDcClientGuidGenerationComponent.GetClientGuid();
                _oMultiMediaSubElementsModel.LocalURL = Response.FolderPath;
                _oMultiMediaSubElementsModel.MappedEntityClientGuid = ActionNCModelDic[_oActionNCConfig.RuleId].ActionClientGuid;
                _oMultiMediaSubElementsModel.MultiMediaType = "image/jpg";
                _oMultiMediaSubElementsModel.Dimension = OneViewDcGlobalVariableInfo.DATEntityTypes.Action;
               
                ActionNCModelDic[_oActionNCConfig.RuleId].ActionMultiMediaSubElements.push(_oMultiMediaSubElementsModel);

                OneViewDcGlobalVariableInfo.oDOM.Append(_oActionNCConfig.RuleId + "_MultiMediaDisplayBlock", '<div class="media-box" id="' + _oMultiMediaSubElementsModel.ClientGuid + '_MultiMedia"><img class="materialboxed" width="150px" src="' + Response.FullPath + '" /><a herf="#" class="btn-flat waves-effect waves-dark red-text darken-1" onclick="new DcDefaultActionMultiMediaSubElementsUIComponent().DeleteMultiMediaSubElement(this, \'' + ActionNCConfig + '\', \'' + _oMultiMediaSubElementsModel.ClientGuid + '\');"><i class="mdi mdi-delete-forever"></i></a></div>');

                if (OneViewDcGlobalVariableInfo.ModifiedActionNCRuleIdLst.indexOf(_oActionNCConfig.RuleId) == -1) {
                    OneViewDcGlobalVariableInfo.ModifiedActionNCRuleIdLst.push(_oActionNCConfig.RuleId);
                }
            }
            else {
                OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification("Error while saving", 3);
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Delete Multi Media Sub Element
    /// </summary>
    this.DeleteMultiMediaSubElement = function (Obj, ActionNCConfig, ClientGuid) {

        try {            
            var _oActionNCConfig = OneViewDcGlobalVariableInfo.oOneViewJavaScriptSerializer.Parse(ActionNCConfig);
            var ActionNCModelDic = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.ActionNCModel.DCNCModel;

            if (ActionNCModelDic[_oActionNCConfig.RuleId] != undefined) {

                var ActionMultiMediaSubElements = ActionNCModelDic[_oActionNCConfig.RuleId].ActionMultiMediaSubElements;

                for (var i = 0; i < ActionMultiMediaSubElements.length; i++) {

                    if (ActionMultiMediaSubElements[i].ClientGuid == ClientGuid) {

                        ActionMultiMediaSubElements[i].IsDisable = true;
                        break;
                    }
                }

                OneViewDcGlobalVariableInfo.oDOM.Remove(ClientGuid + "_MultiMedia");

                if (OneViewDcGlobalVariableInfo.ModifiedActionNCRuleIdLst.indexOf(_oActionNCConfig.RuleId) == -1) {
                    OneViewDcGlobalVariableInfo.ModifiedActionNCRuleIdLst.push(_oActionNCConfig.RuleId);
                }
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// IsActionExist
    /// </summary>
    var IsActionExist = function (_oActionNCConfig) {

        try {
            var IsSuccess = false;
            var ActionNCModelDic = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.ActionNCModel.DCNCModel;

            if (ActionNCModelDic != null && ActionNCModelDic[_oActionNCConfig.RuleId] != undefined) {

                for (var i = 0; i < ActionNCModelDic[_oActionNCConfig.RuleId].Actions.length; i++) {

                    if (ActionNCModelDic[_oActionNCConfig.RuleId].Actions[i].IsDisable == false) {
                        IsSuccess = true;
                        break;
                    }
                }
            }

            return IsSuccess;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }       
    }
}

// DcDefaultSidePanelUIComponent
function DcDefaultSidePanelUIComponent(Context) {

    var MyInstance = this;
    this.HeaderId = "DefaultSidePanelHeader";
    this.ContentId = "DefaultSidePanelContent";
    this.FooterId = "DefaultSidePanelFooter";
    this.ActionNCConfig = null;
    this.AttributeId = 0;
    this.SidePanelClickContext = 0;

    /// <summary>
    /// Open
    /// </summary>
    this.Excecute = function () {

        try {
            //if (MyInstance.SidePanelClickContext != OneViewDcGlobalVariableInfo.DefaulSidePanelClickContext.Tab)
                MyInstance.Init();

            MyInstance.Load();

            if (MyInstance.SidePanelClickContext != OneViewDcGlobalVariableInfo.DefaulSidePanelClickContext.Tab) {
                MyInstance.Open();
                $("#sidenav-overlay").click(function () {
                    if (OneViewDcGlobalVariableInfo.CurrentActionNCConfig != null) {
                        ActionNCValidationHandler(OneViewDcGlobalVariableInfo.CurrentActionNCConfig);
                    }
                });
            }
            else {
                SetSelectedTab();
                InitializeUIControls();
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Init
    /// </summary>
    this.Init = function () {

        try {
            var Html = '<nav class="nav-extended white black-text">' +
                            '<div class="nav-content">' +
                                '<ul class="tabs tabs-fixed-width">' +
                                    '<li class="tab" id="Tab_' + OneViewDcGlobalVariableInfo.DefaulSidePanelContext.Comments + '" onclick="new DcDefaultAttributeComponent(' + OneViewDcGlobalVariableInfo.DataCaptureContext.DC + ',' + OneViewDcGlobalVariableInfo.CurrentAttributeId + ').OpenCommentsPanel(' + OneViewDcGlobalVariableInfo.DefaulSidePanelClickContext.Tab + ')"><a id="TabSelected_' + OneViewDcGlobalVariableInfo.DefaulSidePanelContext.Comments + '">COMMENT</a></li>' +
                                    '<li class="tab" id="Tab_' + OneViewDcGlobalVariableInfo.DefaulSidePanelContext.Action + '" onclick="new DcDefaultAttributeComponent(' + OneViewDcGlobalVariableInfo.DataCaptureContext.DC + ',' + OneViewDcGlobalVariableInfo.CurrentAttributeId + ').OpenActionPanel(' + OneViewDcGlobalVariableInfo.DefaulSidePanelClickContext.Tab + ')"><a id="TabSelected_' + OneViewDcGlobalVariableInfo.DefaulSidePanelContext.Action + '">ACTION</a></li>' +
                                '</ul>' +
                            '</div>' +
                       '</nav>';

            OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml(MyInstance.HeaderId, Html);
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Load
    /// </summary>
    this.Load = function () {

        try {
            var ContentHtml = GetContentHtml();
            OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml(MyInstance.ContentId, ContentHtml);

            var FooterHtml = GetFooterHtml();
            OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml(MyInstance.FooterId, FooterHtml);
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Clear
    /// </summary>
    this.Clear = function () {

        try {            
            OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml(MyInstance.ContentId, "");
            OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml(MyInstance.FooterId, "");
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Content Html
    /// </summary>
    var GetContentHtml = function () {

        try {            
            var Html = '';

            if (Context == OneViewDcGlobalVariableInfo.DefaulSidePanelContext.Comments) {

                Html = GetCommentsContentHtml();
            }
            else if (Context == OneViewDcGlobalVariableInfo.DefaulSidePanelContext.Action) {

                Html = GetActionContentHtml();
                Html += GetMultiMediaSubElementsContentHtml();
            }

            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Comments Content Html
    /// </summary>
    var GetCommentsContentHtml = function () {

        try {
            var Input_AttributeId = "'" + MyInstance.AttributeId + "'";
            var AttributeModel = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DataCaptureDetailsModel[MyInstance.AttributeId];
            
            var Comments = AttributeModel.Comments;

            var Html = '<div class="row">' +
                            '<form class="col s12">' +
                                '<div class="row">' +
                                    '<div class="input-field col s12">' +
                                        '<textarea id="txtComments" class="materialize-textarea" onchange="new DcDefaultAttributeComponent(' + Context + ',' + Input_AttributeId + ').SetComments()">' + Comments + '</textarea>' +
                                        '<label for="txtComments">Add Comment</label>' +
                                    '</div>' +
                                '</div>' +
                            '</form>' +
                       '</div>';

            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Action Content Html
    /// </summary>
    var GetActionContentHtml = function () {

        try {
            var _oActionNCConfig = OneViewDcGlobalVariableInfo.oOneViewJavaScriptSerializer.Stringify(MyInstance.ActionNCConfig);

            var ActionNCModelDic = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.ActionNCModel.DCNCModel;
            var AvailableCustomActions = '';

            if (ActionNCModelDic[MyInstance.ActionNCConfig.RuleId] != undefined) {

                var Actions = ActionNCModelDic[MyInstance.ActionNCConfig.RuleId].Actions;

                for (var i = 0; i < Actions.length; i++) {

                    if (Actions[i].CustomActionName != "" && Actions[i].IsDisable == false) {

                        AvailableCustomActions += '<li class="collection-item" id="' + Actions[i].CustomActionName + '"><div>' + Actions[i].CustomActionName + '<a href="#!" class="secondary-content waves-effect waves-dark red-text darken-1" onclick="new DcDefaultCustomActionUIComponent().DeleteCustomAction(\'' + _oActionNCConfig + '\',\'' + Actions[i].CustomActionName + '\')"><i class="mdi mdi-minus-circle-outline"></i></a></div></li>';
                    }
                }
            }

            var Html = '<header class="padding-10">CUSTOM ACTION</header>' +
                       '<div class="row no-margin">' +
                            '<div class="col s9">' +
                                '<div class="input-field">' +
                                    '<input type="text" class="" id="txtCustomAction">' +
                                    '<label for="txtCustomAction">Add Action</label>' +
                                '</div>' +
                            '</div>' +
                            '<div class="col s3 cus-action-btn">' +
                                '<a href="#" class="waves-effect waves-light blue-grey darken-2 btn" onclick="new DcDefaultCustomActionUIComponent().AddCustomAction(\'' + _oActionNCConfig + '\')">ADD</a>' +
                            '</div>' +
                        '</div>' +
                        '<ul class="collection margin-hrz-5" id="CustomActionDisplayBlock">' + AvailableCustomActions + '</ul>';

            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Multi Media Sub Elements Content Html
    /// </summary>
    var GetMultiMediaSubElementsContentHtml = function () {

        try {
            var _oActionNCConfig = OneViewDcGlobalVariableInfo.oOneViewJavaScriptSerializer.Stringify(MyInstance.ActionNCConfig);

            var ActionNCModelDic = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.ActionNCModel.DCNCModel;
            var AvailableMultiMediaSubElements = '';

            if (ActionNCModelDic[MyInstance.ActionNCConfig.RuleId] != undefined) {

                var ActionMultiMediaSubElements = ActionNCModelDic[MyInstance.ActionNCConfig.RuleId].ActionMultiMediaSubElements;
                
                for (var i = 0; i < ActionMultiMediaSubElements.length; i++) {
                  
                    if (ActionMultiMediaSubElements[i].IsDisable == false) {

                        var Url = OneViewDcGlobalVariableInfo.SimpleStorageUrl + ActionMultiMediaSubElements[i].LocalURL;                        
                        AvailableMultiMediaSubElements += '<div class="media-box" id="' + ActionMultiMediaSubElements[i].ClientGuid + '_MultiMedia"><img class="materialboxed" width="150px" src="' + Url + '" /><a herf="#" class="btn-flat waves-effect waves-dark red-text darken-1" onclick="new DcDefaultActionMultiMediaSubElementsUIComponent().DeleteMultiMediaSubElement(this, \'' + _oActionNCConfig + '\', \'' + ActionMultiMediaSubElements[i].ClientGuid + '\');"><i class="mdi mdi-delete-forever"></i></a></div>';
                    }
                }
            }

            var Html = '<div class="media-panel">' +
                            '<header class="padding-10">Media</header>' +
                            '<div class="margin-ver-15" id="' + MyInstance.ActionNCConfig.RuleId + '_MultiMediaDisplayBlock">' + AvailableMultiMediaSubElements + '</div>' +
                        '</div>';

            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Footer Html
    /// </summary>
    var GetFooterHtml = function () {

        try {
            var _oActionNCConfig = OneViewDcGlobalVariableInfo.oOneViewJavaScriptSerializer.Stringify(MyInstance.ActionNCConfig);

            var CameraButtonHtml = '';

            if (Context == OneViewDcGlobalVariableInfo.DefaulSidePanelContext.Action) {
              
                CameraButtonHtml = '<div class="left">' +
                                        //'<a href="#!" class="waves-effect waves-dark btn-flat"><i class="mdi mdi-camera"></i></a>' +
                                        //'<input style="width:150px" type="file" class="waves-effect waves-dark btn-flat" id="file" name="file" onchange="new DcDefaultActionMultiMediaSubElementsUIComponent().AddMultiMediaSubElement(this, \'' + _oActionNCConfig + '\');" onclick="new DcDefaultActionMultiMediaSubElementsUIComponent().AttachMultiMediaSubElement(this, event, \'' + _oActionNCConfig + '\');">' +
                                        '<div class="file-field input-field">' +
                                         '<div class="waves-effect waves-dark btn-flat">' +
                                            '<span><i class="mdi mdi-camera"></i></span>' +
                                            '<input style="width:150px" type="file" onchange="new DcDefaultActionMultiMediaSubElementsUIComponent().AddMultiMediaSubElement(this, \'' + _oActionNCConfig + '\');" onclick="new DcDefaultActionMultiMediaSubElementsUIComponent().AttachMultiMediaSubElement(this, event, \'' + _oActionNCConfig + '\');">' +
                                          '</div>' +
                                          '<div class="file-path-wrapper hide">' +
                                            '<input class="file-path validate" type="text">' +
                                          '</div>' +
                                        '</div>' +
                                   '</div>';
            }

            var Html = '<div class="nav-wrapper padding-hrz-10">'+
                           CameraButtonHtml +
                           '<div class="right">' +
                                '<a href="#!" class="modal-action modal-close waves-effect waves-green btn-flat" onclick="new DcDefaultSidePanelUIComponent(' + Context + ').Close(\'' + _oActionNCConfig + '\')">Close</a>' +
                                //'<a href="#!" class="modal-action modal-close waves-effect waves-green btn-flat" onclick="new DcDefaultSidePanelUIComponent(' + Context + ').Save(\'' + _oActionNCConfig + '\')">Save</a>' +
                           '</div>' +
                       '</div>';
          
            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Open
    /// </summary>
    this.Open = function () {

        try {
            SetSelectedTab();

            $('.btn-right-panel').sideNav('show');
            InitializeUIControls();
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Set Selected Tab
    /// </summary>
    var SetSelectedTab = function () {

        try {
            if (Context == OneViewDcGlobalVariableInfo.DefaulSidePanelContext.Comments) {
                OneViewDcGlobalVariableInfo.oDOM.RemoveClass("TabSelected_" + OneViewDcGlobalVariableInfo.DefaulSidePanelContext.Action, "active");
                OneViewDcGlobalVariableInfo.oDOM.AddClass("TabSelected_" + OneViewDcGlobalVariableInfo.DefaulSidePanelContext.Comments, "active");
            }
            else if (Context == OneViewDcGlobalVariableInfo.DefaulSidePanelContext.Action) {
                OneViewDcGlobalVariableInfo.oDOM.RemoveClass("TabSelected_" + OneViewDcGlobalVariableInfo.DefaulSidePanelContext.Comments, "active");
                OneViewDcGlobalVariableInfo.oDOM.AddClass("TabSelected_" + OneViewDcGlobalVariableInfo.DefaulSidePanelContext.Action, "active");
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Initialize UI Controls
    /// </summary>
    var InitializeUIControls = function () {

        try {                        
            $('ul.tabs').tabs();
            Materialize.updateTextFields();
            $('#txtComments').trigger('autoresize');
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Close
    /// </summary>
    this.Close = function (ActionNCConfig) {

        try {
            MyInstance.Save(ActionNCConfig);            
            //Close(ActionNCConfig);
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Close
    /// </summary>
    var Close = function (ActionNCConfig) {

        try {           
            //ActionNCValidationHandler(ActionNCConfig);
            $('.btn-right-panel').sideNav('hide');
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Action NC Validation Handler
    /// </summary>
    var ActionNCValidationHandler = function (_oActionNCConfig) {

        try {           
            var ActionNCModelDic = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.ActionNCModel.DCNCModel;
          
            if (ActionNCModelDic[_oActionNCConfig.RuleId] == undefined ||
                (ActionNCModelDic[_oActionNCConfig.RuleId] != undefined && ActionNCModelDic[_oActionNCConfig.RuleId].IsDisable == true)
            ) {
                if (Context == OneViewDcGlobalVariableInfo.DefaulSidePanelContext.Action) {
                    var _oDcDefaultAnswerModeComponent = new DcDefaultAnswerModeComponent(OneViewDcGlobalVariableInfo.DataCaptureContext.DC, OneViewDcGlobalVariableInfo.CurrentAttributeId, OneViewDcGlobalVariableInfo.CurrentControlId);
                    _oDcDefaultAnswerModeComponent.Clear();
                }
            }

            OneViewDcGlobalVariableInfo.IsDcModelModified = true;

            if (OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.indexOf(OneViewDcGlobalVariableInfo.CurrentAttributeId) == -1) {
                OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.push(OneViewDcGlobalVariableInfo.CurrentAttributeId);
            }

            if (OneViewDcGlobalVariableInfo.IsDcOnDemandSaveEnabled == true)
                oOneViewGlobalDataCaptureComponent.Save();  
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Save
    /// </summary>
    this.Save = function (ActionNCConfig) {

        try {
            var IsSuccess = true;

            if (Context == OneViewDcGlobalVariableInfo.DefaulSidePanelContext.Action) {
                var _oActionNCConfig = OneViewDcGlobalVariableInfo.oOneViewJavaScriptSerializer.Parse(ActionNCConfig);
                if (_oActionNCConfig.MinNoAction == 0) {
                    IsSuccess = true;
                }
                else {
                    IsSuccess = false;
                }
            }
            
            if (IsSuccess == true) {

                OneViewDcGlobalVariableInfo.IsDcModelModified = true;

                if (OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.indexOf(OneViewDcGlobalVariableInfo.CurrentAttributeId) == -1) {
                    OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.push(OneViewDcGlobalVariableInfo.CurrentAttributeId);
                }

                if (OneViewDcGlobalVariableInfo.IsDcOnDemandSaveEnabled == true)
                    oOneViewGlobalDataCaptureComponent.Save();        

                Close(ActionNCConfig);
            }
            else {
                OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification("Action NC for mandatory actions : Not implemented exception", 4);
            }

            //Close();
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Save
    /// </summary>
    this.ValidateActions = function (ActionNCConfig) {

        try {
            var IsSuccess = true;
            var _oActionNCConfig = OneViewDcGlobalVariableInfo.oOneViewJavaScriptSerializer.Parse(ActionNCConfig);

            if (_oActionNCConfig.MinNoAction == 0) {
                IsSuccess = true;
            }
            else {
                var ActionNCModelDic = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.ActionNCModel.DCNCModel;

                if (ActionNCModelDic[_oActionNCConfig.RuleId] == undefined) {
                }
                IsSuccess = false;
            }

            
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DcTemplateUIEventJobComponent
function DcTemplateUIEventJobComponent(Context, AttributeId, ControlId) {

    var MyInstance = this;
    this.NotificationType = 3;
    this.IsNotificationEnabledForMessageKey = true;
    this.IsDcPageLoad = false;

    var AttributeConfig = null;
    var PreControlUIJobs = null;
    var PostControlUIJobs = null;

    // Self invoking function (Constructor)
    (function () {
        if (Context == OneViewDcGlobalVariableInfo.DataCaptureContext.DC) {

            AttributeConfig = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.FormatedTemplateMetadata[AttributeId];
           
            var TemplateConfigUIMetaData = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.TemplateConfigUIMetaData;

            if (TemplateConfigUIMetaData != null) {

                var ControlEventUIJobs = TemplateConfigUIMetaData.ControlEventUIJobs;

                if (ControlEventUIJobs != null && ControlEventUIJobs[AttributeId] != undefined && ControlEventUIJobs[AttributeId][ControlId] != undefined) {

                    PreControlUIJobs = ControlEventUIJobs[AttributeId][ControlId].PreControlUIJobs;
                    PostControlUIJobs = ControlEventUIJobs[AttributeId][ControlId].PostControlUIJobs;
                }
            }                   
        }
    }());
  
    /// <summary>
    /// Excecute Pre Control UI Jobs
    /// </summary>   
    this.ExcecutePreControlUIJobs = function () {

        try {            
            if (PreControlUIJobs != null) {
                ExcecuteUIJobs(PreControlUIJobs);
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {          
        }
    }

    /// <summary>
    /// Excecute Post Control UI Jobs
    /// </summary>   
    this.ExcecutePostControlUIJobs = function () {

        try {
            if (PostControlUIJobs != null) {
                ExcecuteUIJobs(PostControlUIJobs);
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// ExcecuteUIJobs
    /// </summary>
    /// <param name="UIJobs">UIJobs</param>    
    var ExcecuteUIJobs = function (UIJobs) {

        try {
            for (var i = 0; i < UIJobs.length; i++) {
               
                if (UIJobs[i].Type == "DefaultControlUIOperationsRule") {
                    
                    var IsSuccess = ValidateRule(UIJobs[i].FinalJavaScriptEquation);

                    if (IsSuccess == true) {

                        if (UIJobs[i].MessageKey != null && UIJobs[i].MessageKey != "" && MyInstance.IsNotificationEnabledForMessageKey == true && MyInstance.IsDcPageLoad == false) {

                            OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification(UIJobs[i].MessageKey, MyInstance.NotificationType);
                        }

                        if (UIJobs[i].ShowControls != null) {

                            for (var itrControl in UIJobs[i].ShowControls) {

                                if (UIJobs[i].ShowControls[itrControl].length == 0) {

                                    var _oDcDefaultAttributeComponent = new DcDefaultAttributeComponent(Context, itrControl);
                                    _oDcDefaultAttributeComponent.Show();
                                }
                                else {
                                    OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification("Not implemented exception: Answer mode UI Jobs, DcTemplateUIEventJobComponent.ExcecuteUIJobs", 4);
                                }
                            }
                        }

                        if (UIJobs[i].HideControls != null) {

                            for (var itrControl in UIJobs[i].HideControls) {

                                if (UIJobs[i].HideControls[itrControl].length == 0) {

                                    var _oDcDefaultAttributeComponent = new DcDefaultAttributeComponent(Context, itrControl);
                                    _oDcDefaultAttributeComponent.Hide();
                                }
                                else {
                                    OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification("Not implemented exception: Answer mode UI Jobs, DcTemplateUIEventJobComponent.ExcecuteUIJobs", 4);
                                }
                            }
                        }

                        if (UIJobs[i].ClearControls != null && MyInstance.IsDcPageLoad == false) {

                            for (var itrControl in UIJobs[i].ClearControls) {

                                if (UIJobs[i].ClearControls[itrControl].length == 0) {

                                    var _oDcDefaultAttributeComponent = new DcDefaultAttributeComponent(Context, itrControl);
                                    _oDcDefaultAttributeComponent.Clear();

                                    var _oDcDefaultNAComponent = new DcDefaultNAComponent(Context, itrControl);
                                    _oDcDefaultNAComponent.Clear();
                                    
                                    var AttributeConfig = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.FormatedTemplateMetadata[itrControl];

                                    if (OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.indexOf(itrControl) == -1) {
                                        OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.push(itrControl);
                                    }

                                    for (var j = 0; j < AttributeConfig.AnswerModes.length; j++) {

                                        var _oDcTemplateUIEventJobComponent = new DcTemplateUIEventJobComponent(Context, itrControl, AttributeConfig.AnswerModes[j].ControlId);
                                        _oDcTemplateUIEventJobComponent.ExcecutePostControlUIJobs();                                                                              
                                    }
                                }
                                else {
                                    OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification("Not implemented exception: Answer mode UI Jobs, DcTemplateUIEventJobComponent.ExcecuteUIJobs", 4);
                                }
                            }
                        }

                        if (UIJobs[i].RefreshControls != null && MyInstance.IsDcPageLoad == false) {
                            
                            for (var itrControl in UIJobs[i].RefreshControls) {

                                if (UIJobs[i].RefreshControls[itrControl].length == 0) {

                                    var _oDcDefaultAttributeComponent = new DcDefaultAttributeComponent(Context, itrControl);
                                    _oDcDefaultAttributeComponent.Refresh();

                                    var AttributeConfig = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.FormatedTemplateMetadata[itrControl];

                                    if (OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.indexOf(itrControl) == -1) {
                                        OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.push(itrControl);
                                    }
                                    
                                    for (var j = 0; j < AttributeConfig.AnswerModes.length; j++) {
                                        var _oDcTemplateUIEventJobComponent = new DcTemplateUIEventJobComponent(Context, itrControl, AttributeConfig.AnswerModes[j].ControlId);
                                        _oDcTemplateUIEventJobComponent.ExcecutePostControlUIJobs();
                                    }
                                }
                                else {
                                    OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification("Not implemented exception: Answer mode UI Jobs, DcTemplateUIEventJobComponent.ExcecuteUIJobs", 4);
                                }
                            }
                        }
                    }
                }
                else {
                    OneViewDcGlobalVariableInfo.oOneViewMessageBox.ShowNotification("Not implemented exception, Type = " + UIJobs[i].Type + ", DcTemplateUIEventJobComponent.ExcecuteUIJobs", 4);
                }
            }

            return IsSuccess;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Validate Rule
    /// </summary>
    /// <param name="Rule">Rule</param>   
    /// <returns>true or false</returns> 
    var ValidateRule = function (Rule) {

        try {
            Rule = Rule.replace(/#/g, "'");
            var IsSuccess = eval(Rule);

            return IsSuccess;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DcDefaultNAComponent
function DcDefaultNAComponent(Context, AttributeId) {

    var MyInstance = this;

    var AttributeConfig = null;
    var AttributeModel = null;
    var NAConfig = null;

    // Self invoking function (Constructor)
    (function () {
        if (Context == OneViewDcGlobalVariableInfo.DataCaptureContext.DC) {

            AttributeConfig = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.FormatedTemplateMetadata[AttributeId];
            AttributeModel = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DataCaptureDetailsModel[AttributeId];
           
            var AttributeOtherConfigMobileMetaData = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.AttributeOtherConfigMobileMetaData;

            if (AttributeOtherConfigMobileMetaData != null && AttributeOtherConfigMobileMetaData.NAMetaDataDict != null) {
                if (AttributeOtherConfigMobileMetaData.NAMetaDataDict[AttributeId] != undefined)
                    NAConfig = AttributeOtherConfigMobileMetaData.NAMetaDataDict[AttributeId];
                else if (AttributeOtherConfigMobileMetaData.NAMetaDataDict[OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.TemplateNodeId] != undefined)
                    NAConfig = AttributeOtherConfigMobileMetaData.NAMetaDataDict[OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.TemplateNodeId];
            }
        }
    }());
 
    /// <summary>
    /// Get Html
    /// </summary>  
    /// <returns>Html</returns>  
    this.GetHtml = function () {

        try {
            var Html = '';

            if (MyInstance.IsEnable() == true) {

                var Input_AttributeId = "'" + AttributeId + "'";

                if (AttributeModel.IsNA == false) {
                    Html = '<a class="blue-grey-text darken-4 waves-effect waves-dark na-btn" onclick="new DcDefaultNAComponent(' + Context + ',' + Input_AttributeId + ').Set(this);">' +
                                '<span><i id="NAIcon_' + AttributeId + '" class="mdi mdi-checkbox-blank-circle-outline"></i> N/A</span>' +
                           '</a>';
                }
                else {
                    Html = '<a class="blue-grey-text darken-4 waves-effect waves-dark na-btn" onclick="new DcDefaultNAComponent(' + Context + ',' + Input_AttributeId + ').Set(this);">' +
                               '<span><i id="NAIcon_' + AttributeId + '" class="mdi mdi-check-circle-outline"></i> N/A</span>' +
                          '</a>';
                }
            }

            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Set
    /// </summary>
    /// <param name="DOMObj">DOMObj</param>  
    this.Set = function (DOMObj) {

        try {
            OneViewDcGlobalVariableInfo.CurrentAttributeId = AttributeId;
            OneViewDcGlobalVariableInfo.CurrentControlId = "";

            AttributeModel.IsNA = !AttributeModel.IsNA;
            AttributeModel.IsModified = true;

            for (var i = 0; i < AttributeModel.Answers.length; i++) {
                AttributeModel.Answers[i].IsModified = true;
            }

            if (AttributeModel.IsNA == true) {
                OneViewDcGlobalVariableInfo.oDOM.RemoveClass("NAIcon_" + AttributeId, 'mdi-checkbox-blank-circle-outline');
                OneViewDcGlobalVariableInfo.oDOM.AddClass("NAIcon_" + AttributeId, 'mdi-check-circle-outline');
                OneViewDcGlobalVariableInfo.oDOM.AddClass("Container_" + AttributeId, 'na-disabled');

                var _oDcDefaultAttributeComponent = new DcDefaultAttributeComponent(Context, AttributeId);
                _oDcDefaultAttributeComponent.Clear();
            }
            else {
                OneViewDcGlobalVariableInfo.oDOM.RemoveClass("NAIcon_" + AttributeId, 'mdi-check-circle-outline');
                OneViewDcGlobalVariableInfo.oDOM.AddClass("NAIcon_" + AttributeId, 'mdi-checkbox-blank-circle-outline');
                OneViewDcGlobalVariableInfo.oDOM.RemoveClass("Container_" + AttributeId, 'na-disabled');
            }

            for (var i = 0; i < AttributeConfig.AnswerModes.length; i++) {
                var _oDcTemplateUIEventJobComponent = new DcTemplateUIEventJobComponent(Context, AttributeId, AttributeConfig.AnswerModes[i].ControlId);
                _oDcTemplateUIEventJobComponent.ExcecutePostControlUIJobs();
            }

            OneViewDcGlobalVariableInfo.IsDcModelModified = true;

            if (OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.indexOf(AttributeId) == -1) {
                OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.push(AttributeId);
            }

            if (OneViewDcGlobalVariableInfo.IsDcOnDemandSaveEnabled == true)
                oOneViewGlobalDataCaptureComponent.Save();
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Clear
    /// </summary>
    this.Clear = function () {

        try {            
            AttributeModel.IsNA = false;
            AttributeModel.IsModified = true;

            for (var i = 0; i < AttributeModel.Answers.length; i++) {
                AttributeModel.Answers[i].IsModified = true;
            }

            OneViewDcGlobalVariableInfo.oDOM.RemoveClass("NAIcon_" + AttributeId, 'mdi-check-circle-outline');
            OneViewDcGlobalVariableInfo.oDOM.AddClass("NAIcon_" + AttributeId, 'mdi-checkbox-blank-circle-outline');
            OneViewDcGlobalVariableInfo.oDOM.RemoveClass("Container_" + AttributeId, 'na-disabled');
            
            OneViewDcGlobalVariableInfo.IsDcModelModified = true;            
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// NA Enable or not
    /// </summary>
    /// <param name="AttributeId">Attribute Node Id</param>   
    /// <returns>true or false</returns>  
    this.IsEnable = function () {

        try {
            var IsEnable = true;
            
            if (NAConfig != null) {

                IsEnable = NAConfig.IsNAEnabled;
            }

            return IsEnable;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// NA Exclude or not
    /// </summary>
    /// <param name="AttributeId">Attribute Node Id</param>   
    /// <returns>true or false</returns>  
    this.IsExclude = function () {

        try {
            var IsExclude = false;

            if (NAConfig != null) {

                if (NAConfig.IsExcluded == true) {

                    IsExclude = CheckEnableOrNotForLastDC(AttributeId);
                }
            }

            return IsExclude;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Check NA Enable Or Not For Last DC
    /// </summary>
    /// <param name="AttributeId">Attribute Node Id</param>   
    /// <returns>true or false</returns>  
    var CheckEnableOrNotForLastDC = function () {

        try {
            var IsExclude = false;

            return IsExclude;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DcDefaultBlockerComponent
function DcDefaultBlockerComponent(Context, AttributeId) {

    var MyInstance = this;

    var AttributeConfig = null;
    var AttributeModel = null;
    var BlockerConfig = null;

    // Self invoking function (Constructor)
    (function () {
        if (Context == OneViewDcGlobalVariableInfo.DataCaptureContext.DC) {

            AttributeConfig = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.FormatedTemplateMetadata[AttributeId];
            AttributeModel = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DataCaptureDetailsModel[AttributeId];
        }
    }());

    /// <summary>
    /// Get Html
    /// </summary>  
    /// <returns>Html</returns>  
    this.GetHtml = function () {

        try {
            var Html = '';

            if (MyInstance.IsEnable() == true) {

                var Input_AttributeId = "'" + AttributeId + "'";

                if (AttributeModel.IsBlocker == false) {
                    Html = '<a class="blue-grey-text darken-4 waves-effect waves-dark np-btn" onclick="new DcDefaultBlockerComponent(' + Context + ',' + Input_AttributeId + ').Set(this);">' +
                                '<span><i id="BlockerIcon_' + AttributeId + '" class="mdi mdi-checkbox-blank-circle-outline"></i> N/P</span>' +
                           '</a>';
                }
                else {
                    Html = '<a class="blue-grey-text darken-4 waves-effect waves-dark np-btn" onclick="new DcDefaultBlockerComponent(' + Context + ',' + Input_AttributeId + ').Set(this);">' +
                               '<span><i id="BlockerIcon_' + AttributeId + '" class="mdi mdi-check-circle-outline"></i> N/P</span>' +
                          '</a>';
                }
            }

            return Html;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Set
    /// </summary>
    /// <param name="DOMObj">DOMObj</param>  
    this.Set = function (DOMObj) {

        try {
            OneViewDcGlobalVariableInfo.CurrentAttributeId = AttributeId;
            OneViewDcGlobalVariableInfo.CurrentControlId = "";

            AttributeModel.IsBlocker = !AttributeModel.IsBlocker;
            AttributeModel.IsModified = true;

            for (var i = 0; i < AttributeModel.Answers.length; i++) {
                AttributeModel.Answers[i].IsModified = true;
            }

            if (AttributeModel.IsBlocker == true) {
                OneViewDcGlobalVariableInfo.oDOM.RemoveClass("BlockerIcon_" + AttributeId, 'mdi-checkbox-blank-circle-outline');
                OneViewDcGlobalVariableInfo.oDOM.AddClass("BlockerIcon_" + AttributeId, 'mdi-check-circle-outline');
                OneViewDcGlobalVariableInfo.oDOM.AddClass("Container_" + AttributeId, 'np-disabled');

                var _oDcDefaultAttributeComponent = new DcDefaultAttributeComponent(Context, AttributeId);
                _oDcDefaultAttributeComponent.Clear(AttributeId);
            }
            else {
                OneViewDcGlobalVariableInfo.oDOM.RemoveClass("BlockerIcon_" + AttributeId, 'mdi-check-circle-outline');
                OneViewDcGlobalVariableInfo.oDOM.AddClass("BlockerIcon_" + AttributeId, 'mdi-checkbox-blank-circle-outline');
                OneViewDcGlobalVariableInfo.oDOM.RemoveClass("Container_" + AttributeId, 'np-disabled');
            }

            OneViewDcGlobalVariableInfo.IsDcModelModified = true;

            if (OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.indexOf(AttributeId) == -1) {
                OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.push(AttributeId);
            }

            if (OneViewDcGlobalVariableInfo.IsDcOnDemandSaveEnabled == true)
                oOneViewGlobalDataCaptureComponent.Save();
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// NA Enable or not
    /// </summary>
    /// <param name="AttributeId">Attribute Node Id</param>   
    /// <returns>true or false</returns>  
    this.IsEnable = function () {

        try {
            var IsEnable = false;

            if (BlockerConfig != null) {

                IsEnable = BlockerConfig[AttributeId].IsBlockerEnabled;
            }

            return IsEnable;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Blocker Exclude or not
    /// </summary>
    /// <param name="AttributeId">Attribute Node Id</param>   
    /// <returns>true or false</returns>  
    this.IsExclude = function () {

        try {
            var IsExclude = false;

            if (BlockerConfig != null) {

                if (BlockerConfig.IsExcluded == true) {

                    IsExclude = CheckEnableOrNotForLastDC(AttributeId);
                }
            }

            return IsExclude;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Check Blocker Enable Or Not For Last DC
    /// </summary>
    /// <param name="AttributeId">Attribute Node Id</param>   
    /// <returns>true or false</returns>  
    var CheckEnableOrNotForLastDC = function () {

        try {
            var IsExclude = false;

            return IsExclude;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DOM
function DOM() {

    /// <summary>
    /// Get Object By Id
    /// </summary>
    /// <param name="Id">DOM Id</param>    
    /// <returns>object</returns> 
    this.GetObjectById = function (Id) {

        try {            
            var obj = document.getElementById(Id);
            return obj;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Object By Name
    /// </summary>
    /// <param name="Name">DOM Name</param>
    /// <returns>object</returns> 
    this.GetObjectByName = function (Name) {

        try {
            var obj = document.getElementsByName(Name);
            return obj;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Set Value
    /// </summary>
    /// <param name="Id">DOM Id</param>    
    /// <param name="Value">Value te set</param>               
    this.SetValue = function (Id, Value) {

        try {            
            var obj = document.getElementById(Id);
            if (obj != null) {
                obj.value = Value;
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Value
    /// </summary>
    /// <param name="Id">DOM Id</param>    
    /// <returns>DOM object Value</returns> 
    this.GetValue = function (Id) {

        try {            
            var Value = "";

            var obj = document.getElementById(Id);
            if (obj != null) {
                Value = obj.value;
            }

            return Value;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Append Html
    /// </summary>
    /// <param name="Id">DOM Id</param>    
    /// <param name="Html">Html</param>  
    this.Append = function (Id, Html) {

        try {
            var obj = document.getElementById(Id);
            if (obj != null) {
                obj.innerHTML += Html;
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Remove DOM object
    /// </summary>
    /// <param name="Id">DOM Id</param>             
    this.Remove = function (Id) {

        try {            
            var obj = document.getElementById(Id);
            if (obj != null) {
                obj.remove();
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Disable DOM object
    /// </summary>
    /// <param name="Id">DOM Id</param>    
    this.Disable = function (Id) {

        try {            
            var obj = document.getElementById(Id);
            if (obj != null) {
                obj.disabled = true;
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Enable DOM object
    /// </summary>
    /// <param name="Id">DOM Id</param> 
    this.Enable = function (Id) {

        try {            
            var obj = document.getElementById(Id);
            if (obj != null) {
                obj.disabled = false;
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Remove DOM object
    /// </summary>
    /// <param name="Id">DOM Id</param> 
    this.Remove = function (Id) {

        try {           
            var obj = document.getElementById(Id);
            if (obj != null) {
                $('#' + Id).remove();
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Attribute Value
    /// </summary>
    /// <param name="Id">DOM Id</param>   
    /// <param name="AttributeName">AttributeName</param>   
    /// <param name="Value">Value</param>   
    this.GetAttributeValue = function (Id, AttributeName, Value) {

        try {           
            var Result = "";

            var obj = document.getElementById(Id);
            if (obj != null) {
                Result = obj.getAttribute(AttributeName);
            }

            return Result;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get Attribute Value By Obj
    /// </summary>
    /// <param name="obj">obj</param>   
    /// <param name="AttributeName">AttributeName</param>   
    /// <param name="Value">Value</param>   
    this.GetAttributeValueByObj = function (obj, AttributeName, Value) {

        try {
            var Result = "";

            if (obj != null) {
                Result = obj.getAttribute(AttributeName);
            }

            return Result;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Set Attribute Value
    /// </summary>
    /// <param name="Id">DOM Id</param>   
    /// <param name="AttributeName">AttributeName</param>   
    /// <param name="Value">Value</param>   
    this.SetAttributeValue = function (Id, AttributeName, Value) {

        try {
            var obj = document.getElementById(Id);
            if (obj != null) {
                obj.setAttribute(AttributeName, Value);
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Set Attribute Value By Obj
    /// </summary>
    /// <param name="obj">obj</param>   
    /// <param name="AttributeName">AttributeName</param>   
    /// <param name="Value">Value</param>   
    this.SetAttributeValueByObj = function (obj, AttributeName, Value) {

        try {
            if (obj != null) {
                obj.setAttribute(AttributeName, Value);
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Get InnerHtml
    /// </summary>
    /// <param name="Id">DOM Id</param>            
    this.GetInnerHtml = function (Id) {

        try {
            var Result = "";

            var obj = document.getElementById(Id);
            if (obj != null) {
                Result = obj.innerHTML;
            }

            return Result;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Add InnerHtml
    /// </summary>
    /// <param name="Id">DOM Id</param> 
    /// <param name="Html">Html (String format)</param> 
    this.AddInnerHtml = function (Id, Html) {

        try {
            var obj = document.getElementById(Id);
            if (obj != null) {
                obj.innerHTML = Html;
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Add InnerHtml
    /// </summary>
    /// <param name="obj">obj</param>   
    /// <param name="Html">Html (String format)</param> 
    this.AddInnerHtmlByObj = function (obj, Html) {

        try {
            if (obj != null) {
                obj.innerHTML = Html;
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Remove InnerHtml
    /// </summary>
    /// <param name="Id">DOM Id</param>           
    this.RemoveInnerHtml = function (Id) {

        try {
            var obj = document.getElementById(Id);
            if (obj != null) {
                obj.innerHTML = "";
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Remove InnerHtml
    /// </summary>
    /// <param name="obj">obj</param>
    this.RemoveInnerHtmlByObj = function (obj) {

        try {
            if (obj != null) {
                obj.innerHTML = "";
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Prepend 
    /// </summary>
    /// <param name="Id">DOM Id</param> 
    /// <param name="Html">Html (String format)</param> 
    this.Prepend = function (Id, Html) {

        try {
            var obj = document.getElementById(Id);
            if (obj != null) {
                $('#' + Id).prepend(Html);
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    /// <summary>
    /// Hide DOM object
    /// </summary>
    /// <param name="Id">DOM Id</param> 
    this.Hide = function (Id) {

        try {
            var obj = document.getElementById(Id);
            if (obj != null) {
                $('#' + Id).hide();
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Show DOM object
    /// </summary>
    /// <param name="Id">DOM Id</param> 
    this.Show = function (Id) {

        try {
            var obj = document.getElementById(Id);
            if (obj != null) {
                $('#' + Id).show();
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Add Class to DOM object using Id
    /// </summary>
    /// <param name="Id">DOM Id</param> 
    /// <param name="ClassName">ClassName</param> 
    this.AddClass = function (Id, ClassName) {

        try {         
            var obj = document.getElementById(Id);
            if (obj != null) {
                $('#' + Id).addClass(ClassName);
                //obj.className = obj.className + " " + ClassName;
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Remove Class from DOM object using Id
    /// </summary>
    /// <param name="Id">DOM Id</param> 
    /// <param name="ClassName">ClassName</param> 
    this.RemoveClass = function (Id, ClassName) {

        try {            
            var RegularExpressionForRemoveClass = new RegExp('(\\s|^)' + ClassName + '(\\s|$)');
            var obj = document.getElementById(Id);
            if (obj != null) {
                $('#' + Id).removeClass(ClassName);
                //obj.className = obj.className.replace(RegularExpressionForRemoveClass, ' ');
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Remove all Class from DOM object using Id
    /// </summary>
    /// <param name="Id">DOM Id</param>             
    this.RemoveAllClass = function (Id) {

        try {
            var obj = document.getElementById(Id);
            if (obj != null) {
                obj.className = "";
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Add Class to DOM object using Obj
    /// </summary>
    /// <param name="Obj">Obj</param> 
    /// <param name="ClassName">ClassName</param>
    this.AddClassByObj = function (Obj, ClassName) {

        try {            
            if (Obj != undefined && Obj != null && Obj != "") {
                Obj.className = Obj.className + " " + ClassName;
            }          
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Remove Class from DOM object using Obj
    /// </summary>
    /// <param name="Obj">Obj</param> 
    /// <param name="ClassName">ClassName</param> 
    this.RemoveClassByObj = function (Obj, ClassName) {

        try {
            var RegularExpressionForRemoveClass = new RegExp('(\\s|^)' + ClassName + '(\\s|$)');           
            if (Obj != undefined && Obj != null && Obj != "") {
                Obj.className = Obj.className.replace(RegularExpressionForRemoveClass, ' ');
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Toggle Class from DOM object using Id
    /// </summary>
    /// <param name="Id">DOM Id</param> 
    /// <param name="ClassName">ClassName</param>
    this.ToggleClass = function (Id, ClassName) {

        try {
            var obj = document.getElementById(Id);
            if (obj != null) {
                $('#' + Id).toggleClass(ClassName);
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Set Height to DOM object using Id
    /// </summary>
    /// <param name="Id">DOM Id</param> 
    /// <param name="Height">Height</param>
    this.SetHeight = function (Id, Height) {

        try {
            $("#" + Id).height(Height);
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Set Focus to DOM object using Id
    /// </summary>
    /// <param name="Id">DOM Id</param>            
    this.SetFocus = function (Id) {

        try {
            var obj = document.getElementById(Id);
            if (obj != null) {
                obj.focus();
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Clear DOM object using Id
    /// </summary>
    /// <param name="Id">DOM Id</param>     
    this.Clear = function (Id) {

        try {
            var obj = document.getElementById(Id);
            if (obj != null) {
                obj.value = "";
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Set Style DOM object using Id
    /// </summary>
    /// <param name="Id">DOM Id</param>   
    /// <param name="Property">Property</param>   
    /// <param name="Value">Value</param>   
    this.SetStyle = function (Id, Property, Value) {

        try {
            var obj = document.getElementById(Id);
            if (obj != null) {
                obj.style[Property] = Value;
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Set Focus to DOM object using Obj
    /// </summary>
    /// <param name="Obj">Obj</param>            
    this.SetFocusByObj = function (Obj) {

        try {
            if (Obj != undefined && Obj != null && Obj != "") {
                Obj.focus();
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Clear DOM object using Obj
    /// </summary>
    /// <param name="Obj">Obj</param>  
    this.ClearByObj = function (Obj) {

        try {
            if (Obj != undefined && Obj != null && Obj != "") {
                Obj.value = "";
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Get Siblings
    /// </summary>
    /// <param name="Id">DOM Id</param> 
    /// <param name="Obj list">List of objects</param>  
    this.GetSiblings = function (Id) {

        try {
            var Siblings = new Array();
            var obj = document.getElementById(Id);

            if (obj != null) {
                Siblings = $('#' + Id).siblings();
            }

            return Siblings;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DcFactory
function DcFactory() {

    // <summary>
    /// Get AnswerMode Component
    /// </summary>
    /// <param name="Type">DcFactory key</param>    
    /// <returns>object</returns> 
    this.GetAnswerModeComponent = function (Context, AttributeId, ControlId, Type) {

        try {
            switch (Type) {
                case "DCTextBoxControlConfig": {
                    return new DcDefaultTextBoxAnswerModeComponent(Context, AttributeId, ControlId);
                };
                case "DCNumericTextBoxControlConfig": {
                    return new DcDefaultNumericTextBoxAnswerModeComponent(Context, AttributeId, ControlId);
                };
                case "DCDateTimeControlConfig": {
                    return new DcDefaultDateTimeAnswerModeComponent(Context, AttributeId, ControlId);
                }; 
                case "DCListViewControlConfig": {
                    return new DcDefaultListViewAnswerModeComponent(Context, AttributeId, ControlId);
                };                
                default: null;
            }           
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Get Action NC UI Component
    /// </summary>
    /// <param name="Type">DcFactory key</param>    
    /// <returns>object</returns> 
    this.GetActionNCUIComponent = function (Type) {

        try {
            switch (Type) {
                case "DcDefaultActionNCUIComponent": {
                    return new DcDefaultActionNCUIComponent();
                };               
                default: null;
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Get NA Component
    /// </summary>
    /// <param name="Type">DcFactory key</param>    
    /// <returns>object</returns> 
    this.GetNAComponent = function (Context, AttributeId, Type) {

        try {
            switch (Type) {
                case "DcDefaultNAComponent": {
                    return new DcDefaultNAComponent(Context, AttributeId);
                };
                default: null;
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Get Blocker Component
    /// </summary>
    /// <param name="Type">DcFactory key</param>    
    /// <returns>object</returns> 
    this.GetBlockerComponent = function (Context, AttributeId, Type) {

        try {
            switch (Type) {
                case "DcDefaultBlockerComponent": {
                    return new DcDefaultBlockerComponent(Context, AttributeId);
                };
                default: null;
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Get Default Side Panel UI Component
    /// </summary>
    /// <param name="Type">DcFactory key</param>    
    /// <returns>object</returns> 
    this.GetDefaultSidePanelUIComponent = function (Context, Type) {

        try {
            switch (Type) {
                case "DcDefaultSidePanelUIComponent": {
                    return new DcDefaultSidePanelUIComponent(Context);
                };
                default: null;
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Get ScoringLogic Component
    /// </summary>
    /// <param name="Type">Factory key</param>    
    /// <returns>object</returns> 
    this.GetScoringLogicComponent = function (Type) {

        try {
            switch (Type) {
                case "DcDefaultScoringLogicComponent": return new DcDefaultScoringLogicComponent();
                default: null;
            }
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DcFactory
function OneViewJavaScriptSerializer() {

    // <summary>
    /// Stringify
    /// </summary>
    /// <param name="Obj">Obj</param>    
    /// <returns>String</returns> 
    this.Stringify = function (Obj) {

        try {
            return JSON.stringify(Obj).replaceAll("\"", "-vn-OVNStringify-vn-");
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    // <summary>
    /// Get Action NC UI Component
    /// </summary>
    /// <param name="Req">Req</param>    
    /// <returns>Obj</returns> 
    this.Parse = function (Req) {

        try {
            return JSON.parse(Req.replaceAll("-vn-OVNStringify-vn-", '\"'));
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DcSaveTestReportComponent
function DcSaveTestReportComponent() {

    var MyInstance = this;

    this.Open = function () {

        try{
            if (OneViewDcGlobalVariableInfo.IsDevelopementMode == true) {

                MyInstance.Refresh();
                $('.btn-right-panel').sideNav('show');
            }
        }
        catch (Excep) {
        }
        finally {
        }
    }

    this.Refresh = function () {

        try {
            if (OneViewDcGlobalVariableInfo.IsDevelopementMode == true) {

                OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("DefaultSidePanelHeader", "");
                OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("DefaultSidePanelContent", "");
                OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("DefaultSidePanelFooter", "");

                OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("DefaultSidePanelHeader", '<header class="padding-10" style="text-align:center;background-color:black;color:white">DATA CAPTURE SAVE TRACKING<a href="#!" class="secondary-content waves-effect waves-dark red-text darken-1" onclick="new DcSaveTestReportComponent().ClearAll();"><i class="mdi mdi-minus-circle-outline"></i></a></header>');

                var DcSaveTrack = OneViewDcGlobalVariableInfo.DcSaveTrack;
                var Html = '';

                for (var i = 0; i < DcSaveTrack.length; i++) {

                    Html += '<header class="padding-10" style="background-color:gray">Transaction : ' + DcSaveTrack[i].Id + '<a href="#!" class="secondary-content waves-effect waves-dark red-text darken-1" onclick="new DcSaveTestReportComponent().Clear(' + i + ');"><i class="mdi mdi-minus-circle-outline"></i></a></header>';
                    Html += '<ul class="collection margin-hrz-5">';

                    Html += '<li class="collection-item"><div>Start Time : ' + DcSaveTrack[i].StartTime + '<a href="#!" class="secondary-content waves-effect waves-dark red-text darken-1"></a></div></li>';
                    Html += '<li class="collection-item"><div>End Time : ' + DcSaveTrack[i].EndTime + '<a href="#!" class="secondary-content waves-effect waves-dark red-text darken-1"></a></div></li>';
                    Html += '<li class="collection-item"><div>Attribute Ids : ' + DcSaveTrack[i].AttributeIds + '<a href="#!" class="secondary-content waves-effect waves-dark red-text darken-1"></a></div></li>';
                    Html += '<li class="collection-item"><div>ActionNC RuleIds : ' + DcSaveTrack[i].ActionNCRuleIds + '<a href="#!" class="secondary-content waves-effect waves-dark red-text darken-1"></a></div></li>';
                    Html += '<li class="collection-item"><div>Status : ' + DcSaveTrack[i].Status + '<a href="#!" class="secondary-content waves-effect waves-dark red-text darken-1"></a></div></li>';

                    if (DcSaveTrack[i].Status == "Completed" && DcSaveTrack[i].Response != null && DcSaveTrack[i].Response != "") {
                        var Response = JSON.parse(DcSaveTrack[i].Response);
                        if (Response.IsAnyException == true) {
                            Html += '<li class="collection-item"><div>Exception : ' + Response.IsAnyException + '<a href="#!" class="secondary-content waves-effect waves-dark red-text darken-1"></a></div></li>';
                            Html += '<li class="collection-item"><div>Exception Message : ' + Response.ExceptionMessage + '<a href="#!" class="secondary-content waves-effect waves-dark red-text darken-1"></a></div></li>';
                        }
                    }
                    else if (DcSaveTrack[i].Status != "On Progress") {
                        Html += '<li class="collection-item"><div>Exception : true<a href="#!" class="secondary-content waves-effect waves-dark red-text darken-1"></a></div></li>';
                        Html += '<li class="collection-item"><div>Exception Message : ' + DcSaveTrack[i].Response + '<a href="#!" class="secondary-content waves-effect waves-dark red-text darken-1"></a></div></li>';
                    }

                    Html += '</ul>';
                }

                OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("DefaultSidePanelContent", Html);                
            }
        }
        catch (Excep) {
        }
        finally {
        }
    }

    this.Clear = function (Index) {
        try{
            OneViewDcGlobalVariableInfo.DcSaveTrack.splice(Index, 1);
            MyInstance.Refresh();
        }
        catch (Excep) {
        }
        finally {
        }
    }

    this.ClearAll = function () {
        try{
            OneViewDcGlobalVariableInfo.DcSaveTrack = [];
            MyInstance.Refresh();
        }
        catch (Excep) {
        }
        finally {
        }
    }

    this.MakeAllNA = function () {
        try {
            var DataCaptureDetailsModel = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DataCaptureDetailsModel;
            
            for (var itr in DataCaptureDetailsModel) {
                
                if (DataCaptureDetailsModel[itr].IsAttributeGroup == false) {

                    DataCaptureDetailsModel[itr].IsNA = true;
                    DataCaptureDetailsModel[itr].IsModified = true;

                    for (var i = 0; i < DataCaptureDetailsModel[itr].Answers.length; i++) {
                        DataCaptureDetailsModel[itr].Answers[i].IsModified = true;
                    }

                    OneViewDcGlobalVariableInfo.oDOM.RemoveClass("NAIcon_" + itr, 'mdi-checkbox-blank-circle-outline');
                    OneViewDcGlobalVariableInfo.oDOM.AddClass("NAIcon_" + itr, 'mdi-check-circle-outline');
                    OneViewDcGlobalVariableInfo.oDOM.AddClass("Container_" + itr, 'na-disabled');   

                    if (OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.indexOf(itr) == -1) {
                        OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.push(itr);
                    }
                }
            }           
        }
        catch (Excep) {
        }
        finally {
        }
    }    
}

// DcCustomScoringLogicComponent_3_16
function DcCustomScoringLogicComponent_3_16() {

    this.Excecute = function () {

        try {           
            var ActionNCModelDic = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.ActionNCModel.DCNCModel;

            var AttributeGroupAcionNcRuleCofig = {
                "17": new Array(),
                "54": new Array(),
                "96": new Array(),
            }
            
            for (var i = 8012; i <= 8022; i++) {
                AttributeGroupAcionNcRuleCofig["17"].push(i);
            }

            for (var i = 8023; i <= 8054; i++) {
                AttributeGroupAcionNcRuleCofig["54"].push(i);
            }

            for (var i = 8055; i <= 8070; i++) {
                AttributeGroupAcionNcRuleCofig["96"].push(i);
            }
            
            var AttributeGroup_17_MaxScore = 1000;
            var AttributeGroup_17_Score = 1000;
            var AttributeGroup_17_Percentage = 0;

            var AttributeGroup_54_MaxScore = 1000;
            var AttributeGroup_54_Score = 1000;
            var AttributeGroup_54_Percentage = 0;

            var AttributeGroup_96_MaxScore = 1000;
            var AttributeGroup_96_Score = 1000;
            var AttributeGroup_96_Percentage = 0;
            
            AttributeGroup_17_NcCount = 0;
            for (var i = 0; i < AttributeGroupAcionNcRuleCofig[17].length; i++) {
                if (ActionNCModelDic[AttributeGroupAcionNcRuleCofig[17][i]] != undefined && ActionNCModelDic[AttributeGroupAcionNcRuleCofig[17][i]].IsDisable == false) {
                    AttributeGroup_17_NcCount++;
                }
            }

            AttributeGroup_54_NcCount = 0;
            for (var i = 0; i < AttributeGroupAcionNcRuleCofig[54].length; i++) {
                if (ActionNCModelDic[AttributeGroupAcionNcRuleCofig[54][i]] != undefined && ActionNCModelDic[AttributeGroupAcionNcRuleCofig[54][i]].IsDisable == false) {
                    AttributeGroup_54_NcCount++;
                }
            }

            AttributeGroup_96_NcCount = 0;
            for (var i = 0; i < AttributeGroupAcionNcRuleCofig[96].length; i++) {
                if (ActionNCModelDic[AttributeGroupAcionNcRuleCofig[96][i]] != undefined && ActionNCModelDic[AttributeGroupAcionNcRuleCofig[96][i]].IsDisable == false) {
                    AttributeGroup_96_NcCount++;
                }
            }
            
            if (AttributeGroup_17_NcCount >= 5) {
                AttributeGroup_17_Score -= 500;
            }
            else if (AttributeGroup_17_NcCount == 4) {
                AttributeGroup_17_Score -= 300;
            }
            else if (AttributeGroup_17_NcCount == 3) {
                AttributeGroup_17_Score -= 250;
            }
            else if (AttributeGroup_17_NcCount == 2) {
                AttributeGroup_17_Score -= 175;
            }
            else if (AttributeGroup_17_NcCount == 1) {
                AttributeGroup_17_Score -= 150;
            }

            if (AttributeGroup_54_NcCount >= 5) {
                AttributeGroup_54_Score -= 350;
            }
            else if (AttributeGroup_54_NcCount == 4) {
                AttributeGroup_54_Score -= 200;
            }
            else if (AttributeGroup_54_NcCount == 3) {
                AttributeGroup_54_Score -= 150;
            }
            else if (AttributeGroup_54_NcCount == 2) {
                AttributeGroup_54_Score -= 120;
            }
            else if (AttributeGroup_54_NcCount == 1) {
                AttributeGroup_54_Score -= 100;
            }

            if (AttributeGroup_96_NcCount >= 5) {
                AttributeGroup_96_Score -= 250;
            }
            else if (AttributeGroup_96_NcCount == 4) {
                AttributeGroup_96_Score -= 100;
            }
            else if (AttributeGroup_96_NcCount == 3) {
                AttributeGroup_96_Score -= 75;
            }
            else if (AttributeGroup_96_NcCount == 2) {
                AttributeGroup_96_Score -= 50;
            }
            else if (AttributeGroup_96_NcCount == 1) {
                AttributeGroup_96_Score -= 30;
            }
        
            var AttributeGroup_17_Model = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DataCaptureDetailsModel[17];
            AttributeGroup_17_Model.Answers[0].Score = AttributeGroup_17_Score;
            AttributeGroup_17_Model.Answers[0].MaxScore = AttributeGroup_17_MaxScore;
            AttributeGroup_17_Model.Answers[0].Percentage = ((AttributeGroup_17_Score / AttributeGroup_17_MaxScore) * 100).toFixed(2);
            AttributeGroup_17_Model.Answers[0].IsModified = true;
            AttributeGroup_17_Model.IsModified = true;
            if (OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.indexOf("17") == -1) {
                OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.push("17");
            }

            var AttributeGroup_54_Model = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DataCaptureDetailsModel[54];
            AttributeGroup_54_Model.Answers[0].Score = AttributeGroup_54_Score;
            AttributeGroup_54_Model.Answers[0].MaxScore = AttributeGroup_54_MaxScore;
            AttributeGroup_54_Model.Answers[0].Percentage = ((AttributeGroup_54_Score / AttributeGroup_54_MaxScore) * 100).toFixed(2);
            AttributeGroup_54_Model.Answers[0].IsModified = true;
            AttributeGroup_54_Model.IsModified = true;
            if (OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.indexOf("54") == -1) {
                OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.push("54");
            }

            var AttributeGroup_96_Model = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DataCaptureDetailsModel[96];
            AttributeGroup_96_Model.Answers[0].Score = AttributeGroup_96_Score;
            AttributeGroup_96_Model.Answers[0].MaxScore = AttributeGroup_96_MaxScore;
            AttributeGroup_96_Model.Answers[0].Percentage = ((AttributeGroup_96_Score / AttributeGroup_96_MaxScore) * 100).toFixed(2);
            AttributeGroup_96_Model.Answers[0].IsModified = true;
            AttributeGroup_96_Model.IsModified = true;
            if (OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.indexOf("96") == -1) {
                OneViewDcGlobalVariableInfo.ModifiedAttributeIdLst.push("96");
            }
            
            var DataCaptureModel = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel;
            DataCaptureModel.Score = AttributeGroup_17_Score + AttributeGroup_54_Score + AttributeGroup_96_Score;
            DataCaptureModel.MaxScore = AttributeGroup_17_MaxScore + AttributeGroup_54_MaxScore + AttributeGroup_96_MaxScore;
            DataCaptureModel.Percentage = ((DataCaptureModel.Score / DataCaptureModel.MaxScore) * 100).toFixed(2);

            if (DataCaptureModel.Percentage < 44) {
                DataCaptureModel.DcRatingId = 6;
            }
            else if (DataCaptureModel.Percentage < 59) {
                DataCaptureModel.DcRatingId = 5;
            }
            else if (DataCaptureModel.Percentage < 74) {
                DataCaptureModel.DcRatingId = 4;
            }
            else if (DataCaptureModel.Percentage < 89) {
                DataCaptureModel.DcRatingId = 3;
            }
            else if (DataCaptureModel.Percentage < 94) {
                DataCaptureModel.DcRatingId = 2;
            }
            else {
                DataCaptureModel.DcRatingId = 1;
            }
            DataCaptureModel.DcRatingUserId = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DcUserId;

            OneViewDcGlobalVariableInfo.IsDcModelModified = true;
            
            var GetNcCount = function (RuleIdLst) {

                var Count = 0;

                for (var i = 0; i < RuleIdLst.length; i++) {

                    if (ActionNCModelDic[RuleIdLst[i]] != undefined && ActionNCModelDic[RuleIdLst[i]].IsDisable == false) {
                        Count++;
                    }
                }

                return Count;
            }           
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DcCustomMandatoryValidationComponent_3_16
function DcCustomMandatoryValidationComponent_3_16() {

    var MyInstance = this;

    this.Excecute = function () {

        try {            
            var Response = { IsSuccess: true, Message: "Please complete all the questions in the section :" };
            var IsSuccess = false;

            var TemplateConfigMetaData = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.TemplateConfigMetaData.TemplateConfigMetaDataDetails;
     
            var Childs = TemplateConfigMetaData.Childs;
            var AdministrativeResponse = null;
            var CriticalResponse = null;
            var MajorResponse = null;
            var GeneralResponse = null;

            for (var i = 0; i < Childs.length; i++) {
                var AttributeGroupDetails = Childs[i];
             
                //Administrative 
                if (AttributeGroupDetails.Id == 4) {
                    AdministrativeResponse = MyInstance.ValidateAdministrative(AttributeGroupDetails.Childs);
                }
                //Critical
                else if (AttributeGroupDetails.Id == 17) {
                    CriticalResponse = MyInstance.ValidateCritical(AttributeGroupDetails.Childs);
                }
                //Major
                else if (AttributeGroupDetails.Id == 54) {
                    MajorResponse = MyInstance.ValidateMajor(AttributeGroupDetails.Childs);
                }
                //General
                else if (AttributeGroupDetails.Id == 96) {
                    GeneralResponse = MyInstance.ValidateGeneral(AttributeGroupDetails.Childs);
                }
            }

            if (AdministrativeResponse != null && AdministrativeResponse.IsSuccess != true) {
                Response.IsSuccess = false;
                if (Response.Message == "Please complete all the questions in the section :") {
                    Response.Message += " " + AdministrativeResponse.Message;
                }
                else {
                    Response.Message += ", " + AdministrativeResponse.Message;
                }
            }
            if (CriticalResponse != null && CriticalResponse.IsSuccess != true) {
                Response.IsSuccess = false;
                if (Response.Message == "Please complete all the questions in the section :") {
                    Response.Message += " " + CriticalResponse.Message;
                }
                else {
                    Response.Message += ", " + CriticalResponse.Message;
                }
            }
            if (MajorResponse != null && MajorResponse.IsSuccess != true) {
                Response.IsSuccess = false;
                if (Response.Message == "Please complete all the questions in the section :") {
                    Response.Message += " " + MajorResponse.Message;
                }
                else {
                    Response.Message += ", " + MajorResponse.Message;
                }
            }
            if (GeneralResponse != null && GeneralResponse.IsSuccess != true) {
                Response.IsSuccess = false;
                if (Response.Message == "Please complete all the questions in the section :") {
                    Response.Message += " " + GeneralResponse.Message;
                }
                else {
                    Response.Message += ", " + GeneralResponse.Message;
                }
            }

            Response.Message += "  and submit";

            if (Response.IsSuccess == false) {
                MyInstance.SetMandatotyFieldsColor();
            }
            
            return Response;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    this.ValidateAdministrative = function (SubChilds) {

        try {
            var Response = { IsSuccess: true, Message: "Administrative" };

            var Context = OneViewDcGlobalVariableInfo.DataCaptureContext.DC;

            for (var i = 0; i < SubChilds.length; i++) {
                var AttributeGroupDetails = SubChilds[i];
                var IsNA = new DcDefaultAttributeComponent(Context, AttributeGroupDetails.Id).IsNA();
                if (IsNA != true) {
                    var AnswerModes = AttributeGroupDetails.AnswerModes;
                    for (var j = 0; j < AnswerModes.length; j++) {
                        var Answer = new DcDefaultAnswerModeComponent(Context, AttributeGroupDetails.Id, AnswerModes[j].ControlId).GetAnswer();
                        if (Answer == undefined || Answer == null || Answer == "") {
                            Response.IsSuccess = false;
                            break;
                        }
                    }
                }

                if (Response.IsSuccess != true) {
                    break;
                }
            }

            return Response;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    this.ValidateCritical = function (SubChilds) {

        try {
            var Response = { IsSuccess: true, Message: "Critical" };

            var Context = OneViewDcGlobalVariableInfo.DataCaptureContext.DC;

            // var AttributeList = [18, 19, 20, 21, 27, 33, 39, 45, 51];
            var TemplateConfigMetaDataList = SubChilds;//OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.FormatedTemplateMetadata[17];
            var TemplateUIEventJobConfigMetaData = {
                21: { "ShowControls": [22, 23, 24, 25, 26] , "ControlToCheck" : 2},
                27: { "ShowControls": [28, 29, 30, 31, 32] , "ControlToCheck": 2 },
                33: { "ShowControls": [34, 35, 36, 37, 38], "ControlToCheck": 3 },
                39: { "ShowControls": [40, 41, 42, 43, 44], "ControlToCheck": 4 },
                45: { "ShowControls": [46, 47, 48, 49, 50], "ControlToCheck": 3 }
            };

            Response.IsSuccess = MyInstance.ValidateGroupWithHiddenAttribute(TemplateConfigMetaDataList, TemplateUIEventJobConfigMetaData);

            return Response;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    this.ValidateMajor = function (SubChilds) {

        try {
            var Response = { IsSuccess: true, Message: "Major" };
            
            var Context = OneViewDcGlobalVariableInfo.DataCaptureContext.DC;

            var TemplateConfigMetaDataList = SubChilds;
            var TemplateUIEventJobConfigMetaData = {
                57: { "ShowControls": [58], "ControlToCheck": 2 },
                61: { "ShowControls": [62], "ControlToCheck": 1 },
                68: { "ShowControls": [69], "ControlToCheck": 1 },
                71: { "ShowControls": [72], "ControlToCheck": 1 },
                74: { "ShowControls": [75], "ControlToCheck": 1 },
                78: { "ShowControls": [79], "ControlToCheck": 1 },
                80: { "ShowControls": [81], "ControlToCheck": 2 },
                82: { "ShowControls": [83], "ControlToCheck": 2 },
                94: { "ShowControls": [95], "ControlToCheck": 2 }                
            };

            Response.IsSuccess = MyInstance.ValidateGroupWithHiddenAttribute(TemplateConfigMetaDataList, TemplateUIEventJobConfigMetaData);

            return Response;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    this.ValidateGeneral = function (SubChilds) {

        try {
            var Response = { IsSuccess: true, Message: "General" };
            
            var Context = OneViewDcGlobalVariableInfo.DataCaptureContext.DC;

            var TemplateConfigMetaDataList = SubChilds;
            var TemplateUIEventJobConfigMetaData = {
                100: { "ShowControls": [101], "ControlToCheck": 1 },
                102: { "ShowControls": [103], "ControlToCheck": 1 },
            };

            Response.IsSuccess = MyInstance.ValidateGroupWithHiddenAttribute(TemplateConfigMetaDataList, TemplateUIEventJobConfigMetaData);

            return Response;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
    
    this.ValidateGroupWithHiddenAttribute = function (TemplateConfigMetaDataList, TemplateUIEventJobConfigMetaData) {

        try {
            var IsSuccess = true;
            
            var Context = OneViewDcGlobalVariableInfo.DataCaptureContext.DC;

            for (var i = 0; i < TemplateConfigMetaDataList.length; i++) {
                var AttributeGroupDetails = TemplateConfigMetaDataList[i]
                var AttributeId = AttributeGroupDetails.Id;
                var IsSkip = MyInstance.GetIsHiddenAttribute(AttributeId, TemplateUIEventJobConfigMetaData);
                if (IsSkip != true) {
                    var IsNA = new DcDefaultAttributeComponent(Context, AttributeId).IsNA();
                    if (IsNA != true) {
                        var AnswerModes = AttributeGroupDetails.AnswerModes;
                        for (var j = 0; j < AnswerModes.length; j++) {
                            var Answer = new DcDefaultAnswerModeComponent(Context, AttributeGroupDetails.Id, AnswerModes[j].ControlId).GetAnswer();
                            if (Answer == undefined || Answer == null || Answer == "") {
                                IsSuccess = false;
                                break;
                            }
                            else if (Answer == 1) {
                                var AttributeUIEventJobConfig = TemplateUIEventJobConfigMetaData[AttributeId];
                                if (AttributeUIEventJobConfig != undefined) {
                                    var CountOfCompleted = 0;
                                    for (var k = 0; k < AttributeUIEventJobConfig.ShowControls.length; k++) {
                                        //var IsGroupSuccess = MyInstance.GetIsGroupCompleted(AttributeUIEventJobConfig.ShowControls[k], AttributeUIEventJobConfig.ControlToCheck);
                                        //if (IsGroupSuccess != true) {
                                        //    IsSuccess = false;
                                        //    break;
                                        //}
                                        var ResponseString = MyInstance.GetIsGroupCompleted(AttributeUIEventJobConfig.ShowControls[k], AttributeUIEventJobConfig.ControlToCheck);
                                        if (ResponseString == "Completed") {
                                            CountOfCompleted++;
                                        }
                                        else if (ResponseString == "Failed") {
                                            IsSuccess = false;
                                            break;
                                        }
                                    }

                                    if (CountOfCompleted < 1) {
                                        IsSuccess = false;
                                    }

                                }
                            }
                        }
                    }

                    if (IsSuccess != true) {
                        break;
                    }
                }
            }

            return IsSuccess;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    this.GetIsGroupCompleted = function (AttributeId, ControlToCheck) {

        try {
            var Context = OneViewDcGlobalVariableInfo.DataCaptureContext.DC;
            var ResponseString = "";

          //  var IsSuccess = false;
            var Count = 0;
            var IsNA = new DcDefaultAttributeComponent(Context, AttributeId).IsNA();
            if (IsNA != true) {
                var AttributeGroupDetails = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.FormatedTemplateMetadata[AttributeId];
                var AnswerModes = AttributeGroupDetails.AnswerModes;
                for (var m = 0; m < ControlToCheck ; m++) {
                    var Answer = new DcDefaultAnswerModeComponent(Context, AttributeGroupDetails.Id, AnswerModes[m].ControlId).GetAnswer();
                    if (Answer != undefined && Answer != null && Answer != "") {
                       // IsSuccess = true;
                        Count++;
                    }
                }


                if (Count == 0) {
                    ResponseString = "Empty";
                }
                else if (Count == ControlToCheck) {
                    ResponseString = "Completed";
                }
                else if (Count < ControlToCheck) {
                    ResponseString = "Failed";
                }
            }
            else {
              //  IsSuccess = true;
                ResponseString = "Completed";
            }

            return ResponseString;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    this.GetIsHiddenAttribute = function (AttributeId, TemplateUIEventJobConfigMetaData) {

        try {
            var IsHiddenAttribute = false;

            for (var id in TemplateUIEventJobConfigMetaData) {
                if (TemplateUIEventJobConfigMetaData[id].ShowControls.indexOf(AttributeId) != -1) {
                    IsHiddenAttribute = true;
                    break;
                }
            }
            return IsHiddenAttribute;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    this.SetMandatotyFieldsColor = function () {

        try {
            var TemplateConfigMetaData = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.TemplateConfigMetaData.TemplateConfigMetaDataDetails;
            var Childs = TemplateConfigMetaData.Childs;
            var HideAndShowAttributes = [22, 28, 34, 40, 46, 58, 62, 69, 72, 75, 79, 81, 83, 95, 101, 103];
            
            for (var i = 0; i < Childs.length; i++) {

                var SubChilds = Childs[i].Childs;
                var Context = OneViewDcGlobalVariableInfo.DataCaptureContext.DC;

                for (var j = 0; j < SubChilds.length; j++) {

                    var AttributeDetails = SubChilds[j];

                    var IsNA = new DcDefaultAttributeComponent(Context, AttributeDetails.Id).IsNA();
                    var AnswerModes = AttributeDetails.AnswerModes;

                    if (AnswerModes.length == 1 && AnswerModes[0].Type == "DCListViewControlConfig") {

                        var Answer = new DcDefaultAnswerModeComponent(Context, AttributeDetails.Id, AnswerModes[0].ControlId).GetAnswer();
                        
                        if (IsNA == true || Answer != "") {   
                            OneViewDcGlobalVariableInfo.oDOM.RemoveClass("Container_" + AttributeDetails.Id, 'ans-mant');                           
                        }
                        else {                           
                            OneViewDcGlobalVariableInfo.oDOM.AddClass("Container_" + AttributeDetails.Id, 'ans-mant');
                        }
                    }
                    else if (HideAndShowAttributes.indexOf(AttributeDetails.Id) != -1) {

                        var IsAnswered = true;

                        for (var k = 0; k < AnswerModes.length; k++) {
                            var Answer = new DcDefaultAnswerModeComponent(Context, AttributeDetails.Id, AnswerModes[k].ControlId).GetAnswer();
                            if (Answer == "") {
                                IsAnswered = false;
                                break;
                            }
                        }

                        if (IsNA == true || IsAnswered == true) {
                            OneViewDcGlobalVariableInfo.oDOM.RemoveClass("Container_" + AttributeDetails.Id, 'ans-mant');
                        }
                        else {
                            OneViewDcGlobalVariableInfo.oDOM.AddClass("Container_" + AttributeDetails.Id, 'ans-mant');
                        }
                    }
                }
            }      
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
}

// DcCustomAttributeGroupSummary_3_16
function DcCustomAttributeGroupSummary_3_16() {

    var MyInstance = this;

    this.Excecute = function () {

        try {
            var Response = { CompletedAttributeCount: 0, TotalAttributeCount: 0};
            var IsSuccess = false;

            var TemplateConfigMetaData = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.TemplateConfigMetaData.TemplateConfigMetaDataDetails;

            var Childs = TemplateConfigMetaData.Childs;
            var AdministrativeResponse = null;
            var CriticalResponse = null;
            var MajorResponse = null;
            var GeneralResponse = null;

            for (var i = 0; i < Childs.length; i++) {

                var AttributeGroupDetails = Childs[i];

                //Administrative 
                if (AttributeGroupDetails.Id == 4) {
                    AdministrativeResponse = MyInstance.GetSummary(AttributeGroupDetails.Childs);
                }
                //Critical
                else if (AttributeGroupDetails.Id == 17) {
                    CriticalResponse = MyInstance.GetSummary(AttributeGroupDetails.Childs);
                }
                //Major
                else if (AttributeGroupDetails.Id == 54) {
                    MajorResponse = MyInstance.GetSummary(AttributeGroupDetails.Childs);
                }
                //General
                else if (AttributeGroupDetails.Id == 96) {
                    GeneralResponse = MyInstance.GetSummary(AttributeGroupDetails.Childs);
                }                
            }  

            //var AttributeGroup_4_Model = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DataCaptureDetailsModel[4];
            //AttributeGroup_4_Model.Answers[0].CompletedAttributeCount = AdministrativeResponse.CompletedAttributeCount;
            //AttributeGroup_4_Model.Answers[0].TotalAttributeCount = AdministrativeResponse.TotalAttributeCount;          

            //var AttributeGroup_17_Model = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DataCaptureDetailsModel[17];
            //AttributeGroup_17_Model.Answers[0].CompletedAttributeCount = CriticalResponse.CompletedAttributeCount;
            //AttributeGroup_17_Model.Answers[0].TotalAttributeCount = CriticalResponse.TotalAttributeCount;           

            //var AttributeGroup_54_Model = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DataCaptureDetailsModel[54];
            //AttributeGroup_54_Model.Answers[0].CompletedAttributeCount = MajorResponse.CompletedAttributeCount;
            //AttributeGroup_54_Model.Answers[0].TotalAttributeCount = MajorResponse.TotalAttributeCount;
            
            //var AttributeGroup_96_Model = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel.DataCaptureDetailsModel[96];
            //AttributeGroup_96_Model.Answers[0].CompletedAttributeCount = GeneralResponse.CompletedAttributeCount;
            //AttributeGroup_96_Model.Answers[0].TotalAttributeCount = GeneralResponse.TotalAttributeCount;
            
            //var DataCaptureModel = OneViewDcGlobalVariableInfo.OneViewDataCaptureModelInfo.DataCaptureModel;
            //DataCaptureModel.CompletedAttributeCount =
            //    AdministrativeResponse.CompletedAttributeCount +
            //    CriticalResponse.CompletedAttributeCount +
            //    MajorResponse.CompletedAttributeCount +
            //    GeneralResponse.CompletedAttributeCount;
            //DataCaptureModel.TotalAttributeCount =
            //    AdministrativeResponse.TotalAttributeCount +
            //    CriticalResponse.TotalAttributeCount +
            //    MajorResponse.TotalAttributeCount +
            //    GeneralResponse.TotalAttributeCount;

            //var templateheaderLst = document.getElementsByClassName("template-header");

            //var otemplateheader = templateheaderLst[0].childNodes;
            //otemplateheader[0].innerHTML = '<div class="right">' + AdministrativeResponse.CompletedAttributeCount + "/" + AdministrativeResponse.TotalAttributeCount + '</div>';

            //var otemplateheader = templateheaderLst[1].childNodes;
            //otemplateheader[0].innerHTML = '<div class="right">' + AdministrativeResponse.CompletedAttributeCount + "/" + AdministrativeResponse.TotalAttributeCount + '</div>';

            //var otemplateheader = templateheaderLst[2].childNodes;
            //otemplateheader[0].innerHTML = '<div class="right">' + AdministrativeResponse.CompletedAttributeCount + "/" + AdministrativeResponse.TotalAttributeCount + '</div>';

            //var otemplateheader = templateheaderLst[3].childNodes;
            //otemplateheader[0].innerHTML = '<div class="right">' + AdministrativeResponse.CompletedAttributeCount + "/" + AdministrativeResponse.TotalAttributeCount + '</div>';

            OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("AttributeGroupSummary_11", AdministrativeResponse.CompletedAttributeCount + "/" + AdministrativeResponse.TotalAttributeCount);
            OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("AttributeGroupSummary_21", CriticalResponse.CompletedAttributeCount + "/" + CriticalResponse.TotalAttributeCount);
            OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("AttributeGroupSummary_31", MajorResponse.CompletedAttributeCount + "/" + MajorResponse.TotalAttributeCount);
            OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("AttributeGroupSummary_41", GeneralResponse.CompletedAttributeCount + "/" + GeneralResponse.TotalAttributeCount);           
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    this.GetSummary = function (SubChilds) {

        try {
            var Response = { CompletedAttributeCount: 0, TotalAttributeCount: 0 };

            var Context = OneViewDcGlobalVariableInfo.DataCaptureContext.DC;

            for (var i = 0; i < SubChilds.length; i++) {

                var AttributeDetails = SubChilds[i];
                
                var IsNA = new DcDefaultAttributeComponent(Context, AttributeDetails.Id).IsNA();
                var AnswerModes = AttributeDetails.AnswerModes;

                if (AnswerModes.length == 1 && AnswerModes[0].Type == "DCListViewControlConfig") {

                    var Answer = new DcDefaultAnswerModeComponent(Context, AttributeDetails.Id, AnswerModes[0].ControlId).GetAnswer();

                    if (IsNA == true || Answer != "") {
                        Response.CompletedAttributeCount++;
                    }

                    Response.TotalAttributeCount++;
                }          
            }

            return Response;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }

    this.RegisterGroupCollapse = function () {

        try {            
            var templateheaderLst = document.getElementsByClassName("template-header");
            var PlusHtml = '<i class="mdi mdi-plus" style="cursor:pointer"><i>';
            var MinusHtml = '<i class="mdi mdi-minus" style="cursor:pointer"><i>';
            //var PlusHtml = '<span>&#9660;<span>';
            //var MinusHtml = '<span>&#9650;<span>';

            templateheaderLst[0].addEventListener("click", function () {
                var DisplayStatus = templateheaderLst[0].nextSibling.style.display;
                DisplayStatus = (DisplayStatus == "" || DisplayStatus == "block") ? "none" : "";
                MyInstance.DisplayStatus(templateheaderLst[0], DisplayStatus);
                if (DisplayStatus == "") {
                    OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("CollapseIcon_11", MinusHtml);
                }
                else {
                    OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("CollapseIcon_11", PlusHtml);
                }               
            });
            templateheaderLst[1].addEventListener("click", function () {
                var DisplayStatus = templateheaderLst[1].nextSibling.style.display;
                DisplayStatus = (DisplayStatus == "" || DisplayStatus == "block") ? "none" : "";
                MyInstance.DisplayStatus(templateheaderLst[1], DisplayStatus);
                if (DisplayStatus == "") {
                    OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("CollapseIcon_21", MinusHtml);
                }
                else {
                    OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("CollapseIcon_21", PlusHtml);
                }   
            });
            templateheaderLst[2].addEventListener("click", function () {
                var DisplayStatus = templateheaderLst[2].nextSibling.style.display;
                DisplayStatus = (DisplayStatus == "" || DisplayStatus == "block") ? "none" : "";
                MyInstance.DisplayStatus(templateheaderLst[2], DisplayStatus);
                if (DisplayStatus == "") {
                    OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("CollapseIcon_31", MinusHtml);
                }
                else {
                    OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("CollapseIcon_31", PlusHtml);
                }   
            });
            templateheaderLst[3].addEventListener("click", function () {
                var DisplayStatus = templateheaderLst[3].nextSibling.style.display;
                DisplayStatus = (DisplayStatus == "" || DisplayStatus == "block") ? "none" : "";
                MyInstance.DisplayStatus(templateheaderLst[3], DisplayStatus);
                if (DisplayStatus == "") {
                    OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("CollapseIcon_41", MinusHtml);
                }
                else {
                    OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("CollapseIcon_41", PlusHtml);
                }   
            });

            //MyInstance.DisplayStatus(templateheaderLst[0], "none");
            MyInstance.DisplayStatus(templateheaderLst[1], "none");
            MyInstance.DisplayStatus(templateheaderLst[2], "none");
            MyInstance.DisplayStatus(templateheaderLst[3], "none"); 

            templateheaderLst[0].style.cursor = 'pointer';
            templateheaderLst[1].style.cursor = 'pointer';
            templateheaderLst[2].style.cursor = 'pointer';
            templateheaderLst[3].style.cursor = 'pointer';

            OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("CollapseIcon_11", MinusHtml);
            OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("CollapseIcon_21", PlusHtml);
            OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("CollapseIcon_31", PlusHtml);
            OneViewDcGlobalVariableInfo.oDOM.AddInnerHtml("CollapseIcon_41", PlusHtml);            
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }
    
    this.DisplayStatus = function (otemplateheader, DisplayStatus) {

        try {  
            otemplateheader = otemplateheader["nextSibling"];

            while (otemplateheader != null) {
                
                if (otemplateheader != null && otemplateheader.style.display != DisplayStatus) {
                    otemplateheader.style.display = DisplayStatus;
                }

                otemplateheader = otemplateheader["nextSibling"];
            }        
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
        }
    }    
}